<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>carlos schults / blog</title>
    <description>Articles on software development, databases and several tech related subjects.</description>
    <link>http://carlosschults.net/</link>
    <atom:link href="http://carlosschults.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 09 Apr 2016 16:44:37 -0300</pubDate>
    <lastBuildDate>Sat, 09 Apr 2016 16:44:37 -0300</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
    
      <item>
        <title>Unit testing for beginners - Part 1</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1459979937/testes-unitarios-iniciantes-min_povcse.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Maybe, some time in your career, you might have worked on an incredibly complex application, with an enormous, poorly-documented code base, full of hacks, unnecessary couplings, with a confused architecture and no specifications at all. That kind of app you’d call a miracle if it even works. Maybe I’ve just described your current project!
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;In this type of project, it’s very common for the developers to get afraid of touching the code, cause they know that if they do, something is going to break for sure. And worse: it’s going to break in production, most likely.&lt;/p&gt;

&lt;p&gt;Now, imagine that your application is completely covered by an alarm system. Every time a feature stops working, the alarm goes off. The developers are immediately notified, and someone can take action and solve the problem as soon as possible.&lt;/p&gt;

&lt;p&gt;Imagine yet that this alarm system consists of hundreds of smaller systems. Each subsystem must watch a very specific part of your application. In order for the main system to function properly, each subsystem must be totally independent from the others.&lt;/p&gt;

&lt;p&gt;The adoption of such a system would bring several benefits. First of all, developers would lose the fear of touching the code. Code refactoring would become easier to do, and it would be done more often. As a consequence, the quality of the code would improve.&lt;/p&gt;

&lt;p&gt;The development process itself would be simplified. The alarm system would dramatically reduce the need for slow manual tests, thus speeding the release to the users.&lt;/p&gt;

&lt;p&gt;Finally, the need for independence between the subsystems would promote the reduction of coupling between modules of the application.&lt;/p&gt;

&lt;p&gt;It sounds too good to be true? Well, it isn’t. This “alarm system” is exactly the benefit you get after adding a suite of unit tests to your application.&lt;/p&gt;

&lt;h2 id=&quot;what-are-unit-tests&quot;&gt;What are unit tests?&lt;/h2&gt;

&lt;p&gt;Let’s see what Wikipedia tells us:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In computer programming, unit testing is a software testing method by which individual units of source code, […] are tested to determine whether they are fit for use. Intuitively, one can view a unit as the smallest testable part of an application.  […]
 Unit tests are typically written and run by software developers to ensure that code meets its design and behaves as intended.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first thing worth mentioning is that unit tests &lt;strong&gt;don’t have the goal of testing the system as a whole&lt;/strong&gt;. On the contrary, they test small pieces of the application - the units. And what is a unit? There are several conflicting points of view on this, several “schools of thought”. But it’s safe to say that, in a context of Object Oriented Programming, most people would consider the class as being a unit.&lt;/p&gt;

&lt;p&gt;Right after this, we see that unit tests are usually written and run by programmers. This is interesting for two reasons: first, it apparently goes against the idea that programmers don’t make good testers (I’m going back to this point later). And more importantly than that, it shows the principal feature of unit tests: they are &lt;strong&gt;automated&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Bear in mind that there are a lot of types of automated tests, but here we’re only talking about unit tests (which, according to several authors, such as &lt;a href=&quot;http://martinfowler.com/bliki/TestPyramid.html&quot;&gt;Martin Fowler&lt;/a&gt;, are the ones who benefits the application the most).&lt;/p&gt;

&lt;p&gt;In practice, unit tests are classes that contains methods who test small and isolated pieces of functionality. These classes are created with the aid of a test framework (such as JUnit in Java, NUnit or Microsoft Test in .Net). Then, the tests can be run via command line, by your IDE or even by an automated build service.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1460211309/teste00_bnsbfl.png&quot; alt=&quot;Example of test case in C#&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the tests are run, you get an immediate feedback about which tests failed and which ones succeeded, along with the run time of each one of them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1459979476/teste01_ciglca.png&quot; alt=&quot;Windows displaying the result of a test run&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With this feedback, you can decide on your best course of action. Ideally, a failing test should signal something wrong in the production code. The production code should then be fixed so the test can pass.&lt;/p&gt;

&lt;h2 id=&quot;benefits-of-unit-tests&quot;&gt;Benefits of unit tests&lt;/h2&gt;

&lt;p&gt;In the beginning of the post, while using the alarm system metaphor, I’ve talked about some of the benefits that unit tests can provide, for instance:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;they promote and facilitate code refactoring;&lt;/li&gt;
  &lt;li&gt;they promote architectural improvement of the system;&lt;/li&gt;
  &lt;li&gt;they can simplify and accelerate the release of the product to the final users;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another benefit worth mention is that unit tests &lt;strong&gt;document the code&lt;/strong&gt;. Think of it: for each production class in your system, there are several test cases, that exercise every possible use of this class. A good test suite could help a recent hire to quickly gain familiarity with the code base.&lt;/p&gt;

&lt;p&gt;That is, the best type of documentation: the one that is alive, executable, always up-to-date, and never lies.&lt;/p&gt;

&lt;p&gt;We must also mention that a good and comprehensive test suite helps to prevent bug regression. It’s a best practice to create a new test every time a new bug is found. That way, if the bug ever comes back due to a change, the test is going to show you.&lt;/p&gt;

&lt;p&gt;Finally, one of the more important benefits that test automation can provide is cost reduction. Oddly enough, I don’t see this benefit being talked about too much - maybe because it’s more related to the business side of things. Let’s say that your team tests the whole application, every time your about to release. You use four testers, working full-time, during two weeks. Just do the math and you’ll see that &lt;strong&gt;manual tests are freaking expensive!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Worse yet: they are expensive twice. First, there’s the cost itself, that you can calculate with the formula &lt;em&gt;hourly rate of tester x number of testers x hours spent in testing&lt;/em&gt;. Pretty straightforward, no surprises here.&lt;/p&gt;

&lt;p&gt;But, besides that, there is also an &lt;a href=&quot;https://en.wikipedia.org/wiki/Opportunity_cost&quot;&gt;opportunity cost&lt;/a&gt;: if professionals are spending time doing manual tests that could be automated, then they are &lt;em&gt;NOT&lt;/em&gt; doing other tasks that could have a greater ROI to the company.&lt;/p&gt;

&lt;h2 id=&quot;common-misconceptions&quot;&gt;Common misconceptions&lt;/h2&gt;

&lt;p&gt;In this section, I’m going to try to clarify some of the myths and misconceptions that some people have about unit testing.&lt;/p&gt;

&lt;h3 id=&quot;programmers-shouldnt-write-tests-because-they-are-bad-testers&quot;&gt;Programmers shouldn’t write tests, because they are bad testers&lt;/h3&gt;

&lt;p&gt;There is a widespread notion that programmers shouldn’t test their own code. The rationale for this is that the developers would unconsciously avoid to use the app in a way that would break it. And from experience I can say that this indeed happens. I’ve lost count of how many times a coworker found bugs in an app I made after literally &lt;strong&gt;seconds&lt;/strong&gt; of using it, in spite of the fact that I had already tested it a lot without making it fail.&lt;/p&gt;

&lt;p&gt;The important point here is: &lt;strong&gt;there are tests and tests&lt;/strong&gt;. Often, when people say that developers shouldn’t test, they’re talking about system tests, also called end-to-end tests. Such tests mean to test the system as a whole, which is not the goal of unit tests, as I said before.&lt;/p&gt;

&lt;p&gt;Maybe, it’s just lack of information: the person probably doesn’t know the nature and purpose of unit tests, and mistake them for end-to-end tests.&lt;/p&gt;

&lt;h2 id=&quot;writing-unit-tests-is-a-waste-of-time-its-like-coding-the-same-thing-twice&quot;&gt;Writing unit tests is a waste of time; it’s like coding the same thing twice&lt;/h2&gt;

&lt;p&gt;When you try to convince management that unit tests are worth it, it would be wise to focus on cost reduction. But, what about the developers? How to convince them to spend time writing test code, when they’re already in tight deadlines and under a lot of pressure?&lt;/p&gt;

&lt;p&gt;So, don’t be so surprised if you try to sell unit testing to your fellow developers, and they just say to you: “Wast of time. We’re not going to do that”.&lt;/p&gt;

&lt;p&gt;What these people don’t grasp is that &lt;em&gt;they’re already testing their own code all the time, even if they don’t call it that way&lt;/em&gt;. Not convinced? Well, I bet your development work-flow looks something like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write a bit of code&lt;/li&gt;
  &lt;li&gt;Compile&lt;/li&gt;
  &lt;li&gt;Run the app, test the new feature
    &lt;ul&gt;
      &lt;li&gt;If it works, start to code next functionality;&lt;/li&gt;
      &lt;li&gt;If if doesn’t, debug until you find what’s wrong, then fix it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Repeat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What we propose is just to swap the “write production code -&amp;gt; compile -&amp;gt; test manually -&amp;gt; debug -&amp;gt; repeat” cycle for the “write production code -&amp;gt; write test code -&amp;gt; run tests -&amp;gt; fix production code if necessary”.&lt;/p&gt;

&lt;p&gt;You could argue that the cycles are the same - they kind of are. But the big advantage of unit tests is that, once written, they are easily repeatable until the end of the project’s life. You “waste time” only once. Or better, you &lt;strong&gt;invest&lt;/strong&gt; time and effort in the beginning, in order to create the tests, and seize the benefits for indefinite time.&lt;/p&gt;

&lt;h3 id=&quot;unit-tests-replace-all-manual-tests&quot;&gt;Unit tests replace all manual tests&lt;/h3&gt;

&lt;p&gt;Unit tests are not the only types of tests that can be beneficial to a project. We can also use several other types of automated tests such as &lt;strong&gt;integration tests&lt;/strong&gt; and &lt;em&gt;acceptance tests&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1460217453/testing_triangle-300x233_nzq8kx.jpg&quot; alt=&quot;Testing pyramid, showing the ideal ratio of different types of software testing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That doesn’t mean that manual testing should be extinct. On the contrary, manual tests still have an important role in quality assurance processes. Ideally, manual tests should focus on the areas that can’t be automated, like usability testing.&lt;/p&gt;

&lt;p&gt;In regards to agile methodologies, it is key that the Product Owner/Client/Business Person approves and accepts the user stories before they are included in a release.&lt;/p&gt;

&lt;p&gt;Exploratory manual tests, that doesn’t follow a script, can be useful to detect certain kinds of bugs. Most automated test cases tend to focus on the “Happy Path”, that is, the scenario in which everything went right.
In real life, is very common for the users to use the application in…hm…“creative” ways. So, when you put the system under stress, using it in ways that the developers never intended, nasty bugs that would otherwise keep hidden, can show up.&lt;/p&gt;

&lt;p&gt;Of course, once the bug is found, you should immediately write a test that exposes it. That way, if the bug ever comes back, it’ll be easily detected.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Unit testing - and automated software testing, in general - is a huge subject. There are a lot of books about it, there are master’s theses about it. So, of course I can’t do justice to this subject with a mere blog post.&lt;/p&gt;

&lt;p&gt;But I sincerely hope that I had made a proper introduction to unit tests and clarified some of the questions that beginners usually have. If you have a question, suggestion or criticism, the comment are is all yours.&lt;/p&gt;

&lt;p&gt;This post is the first one in a series dedicated to unit testing.
Next post: time to get your hands dirty! I’m going to show how to create your first unit test!&lt;/p&gt;

&lt;p&gt;See you there!&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Apr 2016 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/en/unit-testing-for-beginners-part1/</link>
        <guid isPermaLink="true">http://carlosschults.net/en/unit-testing-for-beginners-part1/</guid>
        
        <category>software testing</category>
        
        <category>unit testing</category>
        
        <category>automated tests</category>
        
        <category>agile</category>
        
        
      </item>
    
      <item>
        <title>Book Review: The Pragmatic Programmer</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1457998345/the-pragmatic-programmer-review-min_tulprt.png&quot; alt=&quot;&quot; /&gt;
If I had to choose one book, just one book, to elect as the number one must-read to every programmer, I’d choose “The Pragmatic Programmer”. It’s a no-brainer. It’s just that good. 
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;The Pragmatic Programmer: From Journeyman to Master&lt;/em&gt;&lt;/strong&gt; is a book about software engineering by Andrew Hunt and David Thomas, published in October 1999. The book is organized in short, self-contained chapters, that you can read in any order you’d like. Each chapter features tips (there are 70 in total) that offer advice on several subjects, like estimating, testing, debugging, how to prototype, how to communicate effectively, best practices about exception handling, and a whole lot more.&lt;/p&gt;

&lt;p&gt;Each chapter also has exercises and/or challenges. What’s the difference? All the exercises have answers, and you can find them in the appendix in the end of the book. The challenges, on the other hand, are not supposed to have clear answers. They are designed to make you think, reflect and (guess what!) challenge yourself and the way you currently do things.&lt;/p&gt;

&lt;p&gt;One thing I really like about this book is that it is very practical. Of course theory has its value and its place, and I personally believe that a lot of programmers lack knowledge in the fundamentals of Computer Science and that really hurts our industry. That said, I think it’s awesome that two programmers took the time to translate their years of experience and knowledge into a book that goes straight to the point with very practical advice that you can put in use right away!&lt;/p&gt;

&lt;p&gt;Another point I’d like to highlight is how easy and fun it is to read this book. Its chapters and sections are short, providing a very comfortable pace. It also has a great sense of humor. Not the type that makes you laugh hysterically, but the type that makes you feel at ease, as if the book was a conversation. But I think the number one thing I love about “The Pragmatic Programmer” is that it isn’t really focused on code, or tied to a particular technology, or to particular tools. Sure, it has its fair share of code samples (mostly Java and C/C++). Yeah, it mentions some particular tools and applications. But for the most part, &lt;strong&gt;this book is about a mindset&lt;/strong&gt;. A certain way of thinking, a way of approaching problems and challenges. Once this mindset, this “
Pragmatic Philosophy” is really ingrained in your way of thinking, you’ll be able to apply it to a lot of areas in your professional life, not just coding. And I think this is the real strength of this book. Had it been focused on tools or a specific language, I probably wouldn’t be writing about it now, almost 17 year later.&lt;/p&gt;

&lt;h2 id=&quot;a-little-bit-of-cons&quot;&gt;A little bit of cons&lt;/h2&gt;

&lt;p&gt;Of course, now that I have sang the many praises of this book, let me talk about some bad things in it. And, to be honest, it’s not that easy to find something bad to say about it.But if there’s one thing that I think most readers would agree, is that some parts of it are somewhat outdated.&lt;/p&gt;

&lt;p&gt;I mean, come on! It’s been almost two decades! It’s amazing for a software development book to remain influential for this long. Of course at least some parts &lt;em&gt;must&lt;/em&gt; be outdated. For example, one of the tips is to always use version control. Nowadays, version control is something that we take for granted, every developer worth his/her salt knows what Github is, so it’s almost funny to read that recommendation. It is like when you watch Steve Jobs giving the first iPhone presentation, and the audience is mesmerized about its capabilities, that are weak by today’s standards, but were amazing for them at the time. (Yeah, I know there are companies out there in which developers don’t even know about version control. My tip is: if you work in a place like this, try to evangelize version control to them. If you succeed, great! If you don’t, get out as soon as possible.)&lt;/p&gt;

&lt;p&gt;In another point of the book, they explain a technique called “tracer-bullet development”. The name may be a little strange, but when they start to explain it, you may find that it sounds a lot like the “minimum viable product” concept, that you may be familiar with from the agile methodologies.&lt;/p&gt;

&lt;p&gt;Which shouldn’t be a surprise at all, since Andy Thomas and Dave Hunt were among the signatories of the now legendary &lt;a href=&quot;http://agilemanifesto.org/&quot;&gt;Manifesto For Agile Software Development&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s why is so hard to find anything wrong with this book. You see, it may seem a little outdated &lt;strong&gt;today&lt;/strong&gt;, but that’s just because the authors were way ahead of their time. Some things that are commonplace and obvious today, we’re totally non-obvious and even counter-intuitive almost 20 years ago. It took a lot of vision to write this book, and for this, and all of the above, I think it’s a very worth read.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Mar 2016 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/en/book-review-pragmatic-programmer/</link>
        <guid isPermaLink="true">http://carlosschults.net/en/book-review-pragmatic-programmer/</guid>
        
        <category>book review</category>
        
        <category>agile</category>
        
        
      </item>
    
      <item>
        <title>Value and reference types in C#</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1454161644/value-reference-types-1038x437_tutiht.png&quot; alt=&quot;&quot; /&gt;
This is my first “real” post here on my blog, and I decided to talk about value types and reference types. This is somewhat of a basic subject, in the sense that it is something that you should already know if you write C# code for a living.But at the same time, it can be a little non-intuitive if you’re not an experienced developer.
&lt;!--more--&gt;
I’ll try to make this as simple and short as possible, so I won’t talk about string immutability, boxing, unboxing, and some other things with fancy names.
I’ll write about those in the future, but for today let’s focus on the basics.&lt;/p&gt;

&lt;p&gt;So, take a look at the following piece of code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The value of x is {x}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Outputs &quot;The value of x is 10&quot;
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The value of y is {y}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Outputs&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The value of y is 11&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;No surprises here, cause this is the exact behaviour you’d expect.&lt;br /&gt;
Now, suppose we have a class like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Profession&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Profession&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello! My name is {Name} and I&#39;m a {Profession}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, you do this:&lt;code&gt; &lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;   
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;programmer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// outputs &quot;Hello! My name is Mary and I&#39;m a programmer&quot;
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;person2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;person2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Profession&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;musician&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;person2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// outputs &quot;Hello! My name is John and I&#39;m a musician &quot;  
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello! My name is John and I&#39;m a musician &quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now is the time when beginners sometimes get confused. “This doesn’t make sense”, they say. “I’ve changed the value of one of the variables, and the other also changed.”&lt;/p&gt;

&lt;p&gt;Well, that is the wrong way to look at it. As it turns out,&lt;strong&gt;you didn’t really change the value of the variable&lt;/strong&gt;, in this case. And that’s the point.&lt;/p&gt;

&lt;p&gt;Remember the first example? Let’s take a look at it again, this time step by step:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;The figure show a sample of C# soure code, in which a variable is being declared and assigned the value 10&quot; src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1454161625/fig1_czxki5.png&quot; style=&quot;height:158px; width:250px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We declare the first variable and assign the value 10 to it. Now, somewhere inside the computer’s memory, there is a “box” labeled “x” which holds the value 10.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;&lt;img alt=&quot;The image show a sample of C# code, in which a variable y is being declared, and the value of x is assigned to it.&quot; src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1454161628/fig2_m1gxsd.png&quot; style=&quot;height:179px; width:250px&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We declare the second variable and assign the value of the first variable to it. Notice that the value is copied from x to y. Now we have two boxes, one labeled x, the other labeled y, and both of them hold the value 10.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;&lt;img alt=&quot;The image show a sample of C# code, in which a variable y gets incremented by 1.&quot; src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1454161625/fig3_esck9i.png&quot; style=&quot;height:172px; width:250px&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we increment the value of the variable y by 1. Notice that the value of x remained unchanged. Of course, because &lt;strong&gt;they have nothing to do with each other! &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On the other hand, something very different happens when you’re dealing with reference types. To understand that, let’s review the second example, step by step:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;&lt;img alt=&quot;The image show a sample of C# code, in which a variable is assigned a new instance of the Person class&quot; src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1454161628/fig4_kxmmuk.png&quot; style=&quot;height:257px; width:600px&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, we create a variable called person and assign to it a new instance of the Person class. Now, somewhere inside the computer’s memory, we have a box called “person”. Notice, however, that our variable person stores &lt;strong&gt;a reference that points to the instance of Person, instead of storing the instance itself!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;&lt;img alt=&quot;The image show a sample of C# code, in which a variable person2 is created and receives the value of the variable person.&quot; src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1454161623/fig5_aznix0.png&quot; style=&quot;height:340px; width:600px&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the second step, we create a variable called person2 and assign the value of the variable person to it. As in the previous example, the value from one variable is copied to the other. In this case, &lt;strong&gt;the value that is copied is the reference that points to the instance&lt;/strong&gt;. So now we have two variables whose values are references that point to the same instance of Person.&lt;/p&gt;

&lt;p&gt;Now, of course when you change the object’s data (e.g. alter the person’s name and/or profession), it seems that the two variables were altered. In fact, the variables’s values remain exactly the same: what was really changed was the object to which they point to.&lt;/p&gt;

&lt;p&gt;So, we could summarize that way: value types store data. When you assign the value of a value type variable to another, what gets copied is the data itself (like an integer, for example).&lt;br /&gt;
This is similar to when you copy a file from one folder and paste it somewhere else. You made a copy, but from now on, they are independent files and have nothing to do with each other.&lt;/p&gt;

&lt;p&gt;Reference types store a reference, that points to the data, which lives somewhere else in the machine’s memory. When you assign the value of a reference type variable to another, what gets copied is the reference.It can be useful to think of them as shortcuts to files. If you have one or more shortcuts that point to a particular file, when you make changes in the original file, those changes will be visible through the shortcuts. Because they’re just that, shortcuts.&lt;/p&gt;

&lt;h2 id=&quot;which-types-are-value-types&quot;&gt;Which types are value types?&lt;/h2&gt;

&lt;p&gt;According to MSDN, the value types are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All numeric data types&lt;/li&gt;
  &lt;li&gt;Boolean, Char, and Date&lt;/li&gt;
  &lt;li&gt;All structures&lt;/li&gt;
  &lt;li&gt;Enumerations&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;which-types-are-reference-types&quot;&gt;Which types are reference types?&lt;/h2&gt;

&lt;p&gt;Again, acording to MSDN:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;String&lt;/li&gt;
  &lt;li&gt;All arrays&lt;/li&gt;
  &lt;li&gt;Classes&lt;/li&gt;
  &lt;li&gt;Delegates&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wait-a-minute-string-is-a-reference-type&quot;&gt;Wait a minute! String is a reference type?!&lt;/h2&gt;

&lt;p&gt;Maybe you’re surprised to see String listed as a reference type. After all, it seems to behave as a value type. 
Well, the reason for this is because String is an &lt;strong&gt;immutable type&lt;/strong&gt;. As I said, I won’t talk about this today, but soon we’ll have a post all about System.String.&lt;/p&gt;

&lt;p&gt;OK, that’s it for today. I hope you guys enjoyed this post, and I’d love to hear your feedback.Have I expressed myself clearly enough? Have I said something innacurate - or even flat-out wrong?
Let me know in the comments, or &lt;a href=&quot;http://twitter.com/carlosschults&quot;&gt;reach me on twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://jonskeet.uk/csharp/references.html&quot;&gt;http://jonskeet.uk/csharp/references.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/t63sy5hs.aspx&quot;&gt;https://msdn.microsoft.com/en-us/library/t63sy5hs.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 30 Jan 2016 00:00:00 -0200</pubDate>
        <link>http://carlosschults.net/en/value-reference-types-in-csharp/</link>
        <guid isPermaLink="true">http://carlosschults.net/en/value-reference-types-in-csharp/</guid>
        
        <category>c#</category>
        
        <category>beginners</category>
        
        <category>oop</category>
        
        <category>type system</category>
        
        
      </item>
    
      <item>
        <title>Share what you learn</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1440517439/share1038x437_mshqwf.jpg&quot; alt=&quot;&quot; /&gt;
Share what you learn. Write a blog post. Answer a question on Stack Overflow. Open-source your code. Create content! In our industry, this advice shows up very often, in all colours and shapes. And rightly so, I’d say. How many hours have you saved thanks to someone else’s post on their blog? Or to a well-crafted answer on Stack Overflow?&lt;/p&gt;

&lt;p&gt;How many times an open-source tool/library/whatever spared you from having to code it’s functionality from scratch? If I had to guess the answer to these questions, I’d say: a lot. 
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.akitaonrails.com/2014/08/29/milesimo-1000-post-no-blog#.VdzH9peC7lc&quot;&gt;Brazilian developer Rafael Rosa Fu talks about some of the benefits of content creation on this post&lt;/a&gt;, originally written in Portuguese:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Learning - in order to fix new skills you must practice them, when we write about what we learn we are reinforcing and expanding our knowledge by being “forced” to explain it in a way that other people can  understand&lt;/li&gt;
    &lt;li&gt;Memory - I don’t know about you, but my memory is not that great, and I’m sure I’m no exception here. Write about that complex concept or write down the recipe to a sporadic procedure and when you need to remember it just open your blog, or even google it and you’re going to find your own words to remind you.&lt;/li&gt;
    &lt;li&gt;Portfolio - specially useful to those who are starting their careers, blog posts are useful as part of a knowledge portfolio that can be found by a prospective employer or used as reference during an interview, acting as a complement to career time,  besides being an excellent starting point to a conversation.  […]&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jeff Atwood (co-founder of Stack Overflow and Discourse) even said that starting his blog “was the the most important thing I’ve ever done in my entire career.” So, it seems reasonable that we if encourage more and more people to share their knowledge and experiences, the whole community wins, right?&lt;/p&gt;

&lt;p&gt;In this 2012 Smashing Magazine post, Louis Lazaris gives advice on how to start publishing: just publish what you learn, don’t be afraid of making mistakes, welcome your reader’s collaborations.&lt;/p&gt;

&lt;p&gt;It sounds easy, doesn’t it?&lt;/p&gt;

&lt;h2 id=&quot;when-doubt-arrives&quot;&gt;When Doubt Arrives&lt;/h2&gt;

&lt;p&gt;I had a lot of self-doubt before starting this blog. I mean, how could it be any different? All those established bloggers, they have years or even decades of experience. They give talks in several countries. They are published authors, they host podcasts, they created successful companies, or maybe a piece of technology used by millions.\r\n\r\nIn short, they have a very impressive “About Me” page. Heck, some of them may even have an wikipedia article about themselves! They’re the rockstars.&lt;/p&gt;

&lt;p&gt;What about me? I’m just a dude, a couple years out of college, trying to learn and make my career. Do I really have something valuable to offer? Will I be able to really help somebody? Or I’ll be just adding to the noise?&lt;/p&gt;

&lt;p&gt;I think these are all important questions. The web is a ridiculously big place. You could share content for years, or maybe even your whole life, without being noticed and without receiving any feedback.&lt;/p&gt;

&lt;p&gt;Every now and then when I google something, I land on some blog with a cool design and very well written posts. I start to browse the posts, and I notice that most of them (sometimes, all of them) have no comments. Sometimes, I also notice that the last post is from 2 or 3 years ago. They gave up.&lt;/p&gt;

&lt;p&gt;While this is sad and quite disencouraging, it’s just a fact of life. Maybe your blog will reach a large audience, maybe it will not.&lt;/p&gt;

&lt;h2 id=&quot;why-i-created-this-blog-after-all&quot;&gt;Why I created this blog, after all?&lt;/h2&gt;

&lt;p&gt;Maybe the previous section has given you the impression that I am skeptical about the benefits of creating content. And maybe I am, just a little bit. But I’m not going to let that stop me. I believe in the importance of giving back to the community.&lt;/p&gt;

&lt;p&gt;Remember that stackoverflow answer that saved your job? Well, guess what: somebody took the time to write that answer, for free, and posted it online, for free, for the whole internet to see, forever. Isn’t that amazing? I think part of the beauty of our profession is that there are so many people willing to share knowledge for free. To sacrifice their own free time in order to build something. Miracles like GitHub, StackOverflow, Wikipedia, are only possible thanks to those people. And I want to be a part of that.&lt;/p&gt;

&lt;p&gt;Sure, you could argue that these people are moved by their own selfish reasons. Yeah, they probably are, but the point is: at the end of the day, it doesn’t really matter. Results matter. If the user JaneDoe123 wrote that answer on StackOverflow just to earn a few points of reputation, that’s fine by me! I just want to have my problem solved.&lt;/p&gt;

&lt;p&gt;So, that’s it. To use a torrent metaphor, I’m tired of being only a leecher. It’s time to seed a little bit.&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Aug 2015 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/en/share-what-you-learn/</link>
        <guid isPermaLink="true">http://carlosschults.net/en/share-what-you-learn/</guid>
        
        <category>blogging</category>
        
        <category>sharing</category>
        
        <category>first post</category>
        
        
      </item>
    
  </channel>
</rss>
