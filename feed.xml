<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>carlos schults / blog</title>
    <description>Articles on software development, databases and several tech related subjects.</description>
    <link>http://carlosschults.net/</link>
    <atom:link href="http://carlosschults.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 21 Dec 2017 21:55:05 -0200</pubDate>
    <lastBuildDate>Thu, 21 Dec 2017 21:55:05 -0200</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
    
      <item>
        <title>C# 8.0 Features: A Glimpse of the Future</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1513817072/csharp8-1037x438_skogpz.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;C# 8.0 is coming and will bring some great new features. Let’s check out what the future holds for us.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Editorial note: I originally wrote this post for the NDepend blog.  You can &lt;a href=&quot;https://blog.ndepend.com/c-8-0-features-glimpse-future/&quot;&gt;check out the original here, at their site&lt;/a&gt;. While you’re there, download NDepend and give it a try.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It’s been almost 20 years since Microsoft released the first version of the C# language. From its inception—when some unjustly deemed it a mere Java copycat—until now, C# has had a remarkable evolution.&lt;/p&gt;

&lt;p&gt;Nowadays, it’s frequently featured in both &lt;a href=&quot;https://insights.stackoverflow.com/survey/2017#technology-programming-languages&quot;&gt;most used&lt;/a&gt; and &lt;a href=&quot;https://insights.stackoverflow.com/survey/2017#most-loved-dreaded-and-wanted&quot;&gt;most loved&lt;/a&gt; programming languages lists. You can use it to develop desktop, web, and mobile apps, and you can write code that will run in all the major operating systems. Or you can jump right onto the IOT bandwagon and write code to “smarten” your house. We live in interesting times to be a C# developer indeed.&lt;/p&gt;

&lt;p&gt;If the present is already exciting, what about the future? Would it be possible for us to get a glimpse of what lies ahead for the language?&lt;/p&gt;

&lt;p&gt;Of course it is. Microsoft has developed C# “in the open” for quite a while now. You can just &lt;a href=&quot;https://github.com/dotnet/csharplang&quot;&gt;take a look at the GitHub repo&lt;/a&gt; to read (and participate—why not?) in the discussions and proposals.&lt;/p&gt;

&lt;p&gt;Today, we’ve selected three feature proposals for C# 8.0 to talk about here: &lt;strong&gt;extension everything&lt;/strong&gt;, &lt;strong&gt;default implementations on interfaces,&lt;/strong&gt; and &lt;strong&gt;nullable reference types&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;extension-everything&quot;&gt;Extension Everything&lt;/h2&gt;

&lt;p&gt;Extension everything is probably the least controversial of these three feature proposals, and in a certain way, it’s the least fleshed out also. So I figured it’d make a good starting point.&lt;/p&gt;

&lt;p&gt;You’re probably familiar with extension methods, introduced in C# 3.0 in 2007. &lt;a href=&quot;https://www.daedtech.com/why-i-dont-like-c-extension-methods/&quot;&gt;And while it’s totally possible for them to be abused&lt;/a&gt;, there’s no denying that extension methods, if used wisely, can be an awesome addition to the C# developer’s toolkit—not to mention they’re essential for LINQ.&lt;/p&gt;

&lt;p&gt;At some point you may have wondered, though: why only extension &lt;em&gt;methods&lt;/em&gt;? And you wouldn’t be alone. Extension properties, for instance, have been a desire of C# developers for quite a long time, as evidenced by &lt;a href=&quot;https://stackoverflow.com/questions/619033/does-c-sharp-have-extension-properties&quot;&gt;this 2009 Stack Overflow question&lt;/a&gt; or this &lt;a href=&quot;https://channel9.msdn.com/forums/Coffeehouse/257556-C-Extension-Properties/&quot;&gt;even older 2007(!) forum thread&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But now it seems the wait is finally coming to an end. According to Mads Torgersen, the program manager for the C# design team, &lt;a href=&quot;https://channel9.msdn.com/Blogs/Seth-Juarez/A-Preview-of-C-8-with-Mads-Torgersen&quot;&gt;a Microsoft intern proposed a new syntax for extension methods that will also allow “extension &lt;em&gt;other things&lt;/em&gt;”&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;lets-see-the-code&quot;&gt;Let’s See the Code&lt;/h3&gt;

&lt;p&gt;Well, if I were you, I’d be itching to see some code. Here’s an example of an extension method using current syntax:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/d6ec153b7274ac699634d5dadb2e9644.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Nothing surprising here, right? In the original syntax, an extension method is just a static method in a static class, with the &lt;em&gt;this&lt;/em&gt; keyword before the first parameter.&lt;/p&gt;

&lt;p&gt;The thing is this syntax only works with methods (and, really, how could it be otherwise, since what would be the first “parameter” of a property?)&lt;/p&gt;

&lt;p&gt;Here comes “extension everything.” This proposal suggests a new type declaration called an “extension”:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/5c1afca9c8fbc6837257cc5d289df2e9.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The code above is an example; as of the date of this writing, the C# team is yet to settle on a syntax.&lt;/p&gt;

&lt;p&gt;Regardless, the example shows the creation of an extension class that extends “int.” We then declare a property as we normally do, and we’re done.&lt;/p&gt;

&lt;p&gt;Now the caller code would be able to use the property normally:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/d401d37e182647b253fa721425eec828.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This new feature is meant to support methods, properties, operators, and static members, at least in the beginning; events and constructors may come later.&lt;/p&gt;

&lt;p&gt;You won’t be able to add additional state to the original instance, i.e., creating a private field in the extension class. According to Torgersen, this would add undesirable complexity in order to keep track of this new state.&lt;/p&gt;

&lt;h3 id=&quot;current-status&quot;&gt;Current Status&lt;/h3&gt;

&lt;p&gt;You can &lt;a href=&quot;https://github.com/dotnet/csharplang/issues/192&quot;&gt;follow the feature development on its GitHub issue.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;default-implementation-on-interfaces&quot;&gt;Default Implementation on Interfaces&lt;/h2&gt;

&lt;p&gt;I admit I was surprised—and not exactly happy—when I first heard about default implementation on interfaces &lt;a href=&quot;https://channel9.msdn.com/Events/Build/2017/B8104&quot;&gt;in a talk Mads Torgersen gave in May 2017, at the Build 2017 Conference.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;“What about record types?” I thought. “What about immutable objects? What we’re really getting is implementation on &lt;em&gt;interfaces&lt;/em&gt;?”&lt;/p&gt;

&lt;p&gt;You can safely guess what this feature is by its name: we’ll be able to add method implementations on interfaces. For instance:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/efde91de1a54a1bc4f44c1a7a748d70c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In C# 8.0, the code above would be perfectly legal. A class implementing the interface wouldn’t need to implement the method. If some implementation of the interface decides that the default implementation doesn’t fit its needs, then it can provide its own implementation.&lt;/p&gt;

&lt;p&gt;Besides methods, you’ll also be allowed to add bodies for indexers, properties, and event accessors. Static members such as methods, properties, and indexers will be allowed as well.&lt;/p&gt;

&lt;p&gt;Instance state will not be allowed in interfaces, though. You’ll be able to use static fields but not instance fields. As a consequence of this, auto-implement properties won’t be allowed as well, since they automatically declare a hidden backing-field.&lt;/p&gt;

&lt;h3 id=&quot;use-cases&quot;&gt;Use Cases&lt;/h3&gt;

&lt;p&gt;As stated in the feature &lt;a href=&quot;https://github.com/dotnet/csharplang/blob/master/proposals/default-interface-methods.md&quot;&gt;proposal&lt;/a&gt;, the primary use case for default interface methods is to enable the developer to safely evolve an interface. You could add new methods to it and, as long as you provided a default implementation, existing clients of the interface wouldn’t be forced to implement it.&lt;/p&gt;

&lt;p&gt;Currently, you could solve this problem with an extension method. This approach is limited, though: what if you wanted to provide a specialized version of the method for one of the implementations? Good luck with that.&lt;/p&gt;

&lt;p&gt;That’s when default implementation shines.&lt;/p&gt;

&lt;p&gt;Another important value proposition of default implementation on interfaces relates to Android and iOS. Since both Java and Swift offer this feature, it’s tricky to use C# to wrap Android/iOS APIs that make use of it. C# 8.0 will make it possible to wrap those APIs more faithfully.&lt;/p&gt;

&lt;h3 id=&quot;will-interfaces-become-abstract-classes&quot;&gt;Will Interfaces Become Abstract Classes?&lt;/h3&gt;

&lt;p&gt;Sort of, but not really. As you know, there’s no multiple inheritance in languages like C# and Java, which means you can’t inherit from more than one class. On the other hand, a class is (and will continue to be) able to implement several interfaces.&lt;/p&gt;

&lt;h3 id=&quot;current-status-1&quot;&gt;Current Status&lt;/h3&gt;

&lt;p&gt;This feature is currently being prototyped. &lt;a href=&quot;https://github.com/dotnet/csharplang/blob/master/proposals/default-interface-methods.md&quot;&gt;You can follow its development on the GitHub issue.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;nullable-reference-types&quot;&gt;Nullable Reference Types&lt;/h2&gt;

&lt;p&gt;“What?” you may be wondering. “Shouldn’t it be ‘&lt;strong&gt;non&lt;/strong&gt;-nullable reference types’?” The name of this feature can be a bit confusing, indeed. I’ll get back to that soon, but first, let me address why this is even a thing.&lt;/p&gt;

&lt;p&gt;I bet you’re familiar with the phrase “the billion dollar mistake.” On the off-chance you’re not, the phrase refers to the null reference, and it &lt;a href=&quot;https://en.wikipedia.org/wiki/Tony_Hoare#Apologies_and_retractions&quot;&gt;was coined by none other than Sir Tony Hoare, the inventor of the null reference himself.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;but-why-is-that-why-is-null-so-bad&quot;&gt;But why is that? Why is null so bad?&lt;/h3&gt;

&lt;p&gt;You could make several arguments as to why, but the biggest problem is, of course, the risk of getting the infamous null-reference exception (aka null-pointer exception in Java-land). Since everything (“everything” in the context of C# meaning all &lt;a href=&quot;http://carlosschults.net/en/value-reference-types-in-csharp/&quot;&gt;reference types&lt;/a&gt;) can be null, you always run the risk of getting an exception when you try to access some member of the object.&lt;/p&gt;

&lt;p&gt;One of the biggest issues here is that the language itself lacks a syntax that would allow the author to express their intent. It isn’t possible for you to say “This parameter can never be null” or “This property may be null sometimes, and that’s ok.”&lt;/p&gt;

&lt;p&gt;It’s common for functional languages to deal with this by having some type that represents the concept of a potential absent value, often called “Maybe” or “Option.”&lt;/p&gt;

&lt;p&gt;The C# team decided against something like this since, according to them, it’d be the same as adding a new kind of null to the language and it’d probably make things more complex.&lt;/p&gt;

&lt;p&gt;Let’s go back now to the naming issue. You may be thinking that I’ve got it backwards. It makes sense to talk about nullable value types since value types are non-nullable by default. But in the case of reference types, it shouldn’t, right? After all, they’ve been nullable from the beginning.&lt;/p&gt;

&lt;p&gt;Here’s the catch: the C# design team—in a move not free of controversy—intends to make non-nullability the new default for reference types. In that sense, the “new” thing would be the nullable types.&lt;/p&gt;

&lt;p&gt;To keep the language consistent, they propose to use the same syntax that already exists for nullable reference types—in other words, the question mark.&lt;/p&gt;

&lt;h3 id=&quot;enough-talking-lets-see-some-code&quot;&gt;Enough talking. Let’s see some code!&lt;/h3&gt;

&lt;p&gt;I suppose using the infamous “Person” class in an example is the software equivalent of playing “Stairway to Heaven” in a musical instruments store—it may be a little overdone. But using a more elaborate example would be both distracting and unnecessary, so please bear with me.&lt;/p&gt;

&lt;p&gt;Suppose we have a “Person” class with an “Age” property of type “int.” Then, we write the following method:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/9b09f0572e737569e6f97315e5028411.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Even though the code above will gladly compile, it’s fragile since “p” could be null. You probably should add an “if” statement to account for that possibility, but no one will make you do that. You’re completely free to leave the code as it is.&lt;/p&gt;

&lt;p&gt;C# 8 promises to change that by making reference types non-nullable by default. In the example above, trying to access the “Age” property would be safe, since “p” would never be null.&lt;/p&gt;

&lt;p&gt;If you wanted “p” to be nullable, then you’d have to add a question mark to the type, as I’ve mentioned before:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/8554d8863882955b554b486797b83726.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Now that “p” can be null, trying to access Age isn’t safe anymore: you’ll get a warning for doing that. Want to get rid of the warning?&lt;/p&gt;

&lt;p&gt;Just do what you (hopefully) already do today and perform a null check:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/edc992560bf6c005c6be821103e160a3.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;That way, a flow analysis will be performed; if the assignment line is reached, the compiler will know for a fact that “p” can’t possibly be null and will leave you alone.&lt;/p&gt;

&lt;p&gt;Here’s another possibility:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/518c1b35560cafe17fca829aa2aef27b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In short, you have several options. As soon as you convince the compiler that your code offers no risk of throwing a null reference exception, the warning goes away.&lt;/p&gt;

&lt;h3 id=&quot;preventing-assignment-from-nullable-to-non-nullable&quot;&gt;Preventing Assignment from Nullable to Non-Nullable&lt;/h3&gt;

&lt;p&gt;The new version of C# will also prevent assigning from a nullable variable to a non-nullable, so the code below will result in a warning as well:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/98f91bc50c924a8bd47897b874a7be89.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This feature will come along with a new operator called the null-ignoring operator. You’ll basically use this operator to tell the compiler that “I, the developer, know best.” There will be situations when a variable can’t possibly be null, but the compiler won’t be able to infer that.&lt;/p&gt;

&lt;p&gt;One such example would be the use of the “string.IsNullOrEmpty()” method:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/7f0f2f7470f810d228f1d68559b1d6b7.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The code above will generate a warning, despite it not being possible for “bar” to be null. That’s when this operator comes in handy:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/008709a0b9ff6a72abc8fc4882a467d3.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Keep in my mind that, by using this operator, you’re basically telling the compiler: “Trust me! I know what I’m doing.” So you’d better really know what you’re doing!&lt;/p&gt;

&lt;h3 id=&quot;what-about-backward-compatibility&quot;&gt;What about backward compatibility?&lt;/h3&gt;

&lt;p&gt;I know what you’re probably thinking by now. “That sounds nice and all, but wouldn’t this change break a lot of existing code?”&lt;/p&gt;

&lt;p&gt;Well, of course it would. That’s why this will be an &lt;strong&gt;opt-in&lt;/strong&gt; change, activated on a per-project basis&lt;/p&gt;

&lt;h3 id=&quot;current-status-2&quot;&gt;Current Status&lt;/h3&gt;

&lt;p&gt;This one is already prototyped. If you’re interested, &lt;a href=&quot;https://github.com/dotnet/csharplang/wiki/Nullable-Reference-Types-Preview&quot;&gt;you can download, install, and test a preview for nullable reference types right away.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As with the previous features, you can stay tuned by &lt;a href=&quot;https://github.com/dotnet/csharplang/blob/master/proposals/nullable-reference-types.md&quot;&gt;following the relevant proposal in GitHub.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;c-has-a-future-and-it-looks-awesome&quot;&gt;C# Has a Future. And It Looks Awesome&lt;/h2&gt;

&lt;p&gt;So now you know a bit more about three of the features we’re probably getting with the next major version of the C# language.&lt;/p&gt;

&lt;p&gt;As you can see, evolving the language is hard work. The language has to remain compatible with the millions (billions?) of lines of code written with it in the last 17 years. At the same time, in order to continue being relevant, it must meet the needs of developers that are facing challenges that were unimaginable years ago. And it must do all of this without losing its essence: being an easy and approachable object-oriented C-like language.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Dec 2017 00:00:00 -0200</pubDate>
        <link>http://carlosschults.net/en/csharp-8-features/</link>
        <guid isPermaLink="true">http://carlosschults.net/en/csharp-8-features/</guid>
        
        <category>csharp</category>
        
        
      </item>
    
      <item>
        <title>Unit testing for beginners - Part 2</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1459979937/testes-unitarios-iniciantes-min_povcse.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Better late than later! Time to continue our series on unit testing for beginners. Today you’re going to write your first unit test.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In the &lt;a href=&quot;http://carlosschults.net/en/unit-testing-for-beginners-part1/&quot;&gt;previous article&lt;/a&gt; you learned what unit tests are and what are the motivations for writing them.&lt;/p&gt;

&lt;p&gt;Today you’re going to learn how to create unit tests. I’ll show you how to install and use the a unit test framework called &lt;strong&gt;NUnit&lt;/strong&gt;. Together, we’re going to write some tests in order for you to know some of its features.&lt;/p&gt;

&lt;h2 id=&quot;nunit-installation&quot;&gt;NUnit Installation&lt;/h2&gt;

&lt;p&gt;If you recall my &lt;a href=&quot;http://carlosschults.net/pt/testes-unitarios-iniciantes-parte1&quot;&gt;previous article&lt;/a&gt;, you’ll remember that, in order to write and run unit tests, you need a &lt;strong&gt;unit testing framework.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The framework we’re going to use is &lt;strong&gt;NUnit&lt;/strong&gt;, based on &lt;strong&gt;JUnit&lt;/strong&gt;, which is a test framework for the Java language. There are other testing frameworks available in the .Net world, such as MS Test, developed by Microsoft itself.
Feel free to try other frameworks later on.&lt;/p&gt;

&lt;p&gt;Ok, let’s begin. For this project I’m going to use Visual Studio 2017. &lt;a href=&quot;https://www.visualstudio.com/pt-br/downloads/&quot;&gt;Download the Community version here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Create a new solution of the &lt;strong&gt;Class Library&lt;/strong&gt; type, with the name &lt;strong&gt;LearningUnitTesting&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Whenever I create a new solution on Visual Studio I delete the &lt;code class=&quot;highlighter-rouge&quot;&gt;Class1&lt;/code&gt; class that is created by default. You could rename it, of course, it makes no difference.&lt;/p&gt;

&lt;p&gt;Now, let’s rename the default project to &lt;strong&gt;Application&lt;/strong&gt;. This project will store the &lt;em&gt;production code&lt;/em&gt; in our solution.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the context of unit testing, we use the term &lt;strong&gt;Production Code&lt;/strong&gt; when we’re talking about the “real code” in our application, in contrast to the &lt;strong&gt;Test Code&lt;/strong&gt; we also write.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next step! Now we &lt;strong&gt;create the test project&lt;/strong&gt;. There are several different opinions regarding &lt;em&gt;where&lt;/em&gt; should the test class be kept: along with production code, or in a different location. I usually create another project, which I name using the scheme &lt;em&gt;[ProductionProject]Test&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So, the new project will be called &lt;strong&gt;ApplicationTest&lt;/strong&gt;, and it’ll be of type &lt;strong&gt;Class Library&lt;/strong&gt; as well.
After creating the project, I delete the default class, same as before.&lt;/p&gt;

&lt;p&gt;Your solution should look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1498503229/unit2-img1_ugbo3b.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s install NUnit. Fortunately, NUnit is available as a Nuget package, which makes its installation a breeze.&lt;/p&gt;

&lt;p&gt;First, open the &lt;strong&gt;Package Manager Console&lt;/strong&gt;. Go to: &lt;strong&gt;Tools&lt;/strong&gt; &amp;gt; &lt;strong&gt;Nuget Package Manager&lt;/strong&gt; &amp;gt; &lt;strong&gt;Package Manager Console&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Then type or copy-paste the following command:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Install-Package NUnit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Double-check that you’ve got the right project selected, like in the image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1498503359/unit2-img2_nzedn5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And then press &lt;em&gt;ENTER&lt;/em&gt;. The installation will be done in a few seconds.&lt;/p&gt;

&lt;p&gt;We are not done yet, though. We need to install another package, the &lt;strong&gt;NUnit Test Adapter&lt;/strong&gt;, which we’ll let us run NUnit tests in Visual Studio. The process is the same, the only difference is the package’s name:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Install-Package NUnit3TestAdapter&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don’t forget to check if the right project is selected before pressing &lt;em&gt;ENTER&lt;/em&gt;. The installation will be done in a few seconds.&lt;/p&gt;

&lt;p&gt;This is it.&lt;/p&gt;

&lt;h2 id=&quot;creating-and-running-the-first-test&quot;&gt;Creating and running the first test&lt;/h2&gt;

&lt;p&gt;Let’s create some tests. First, let’s add a new class to our production project. The class’s name will be &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; and its code will look like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/3f42e324b10ceb42b360382686d314de.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;I think the class is simple enough to not require additional explanation. Now, it’s time to create our test class. Add a new class called &lt;code class=&quot;highlighter-rouge&quot;&gt;EmployeeTest&lt;/code&gt; to the &lt;strong&gt;ApplicationTest&lt;/strong&gt; project.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is another naming convention I like to use: to name the test class after the production class, adding the word &lt;em&gt;Test&lt;/em&gt; at the end.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After the class is created, add the &lt;em&gt;NUnit.Framework&lt;/em&gt; namespace to its using declarations. Then, create a new void returning public method called &lt;strong&gt;MyFirstTestMethod&lt;/strong&gt; and add the &lt;code class=&quot;highlighter-rouge&quot;&gt;[Test]&lt;/code&gt; attribute to it.&lt;/p&gt;

&lt;p&gt;By now, your code should look like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/406525bd23d3ee2ecba4f7592c0f8af3.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The skeleton for the test is ready. It’s time for you to write your first &lt;strong&gt;assertion&lt;/strong&gt;. In the context of unit testing, an assertion is an affirmation about how a unit of your system should behave. If the affirmation turns out to be true, we say the test has &lt;em&gt;passed&lt;/em&gt;. In case it proves to be false, we say the test has &lt;em&gt;failed&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In NUnit we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Assert&lt;/code&gt; class to write our assertions. This class has a large number of methods that allow us to express our expectations about the behavior of our units.&lt;/p&gt;

&lt;p&gt;Add the following line of code to the test method:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Assert.Pass();&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Pass&lt;/code&gt; method, not surprisingly, just forces the test to pass. Now you’re going to run this test in order to see it passing. First of all, open the &lt;strong&gt;Test Explorer&lt;/strong&gt;. Use the menu bar: &lt;strong&gt;Test&lt;/strong&gt; &amp;gt; &lt;strong&gt;Windows&lt;/strong&gt; &amp;gt; &lt;strong&gt;Test Explorer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When the window is show, click on &lt;em&gt;Run All&lt;/em&gt;. If everything goes right, you’ll see this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1498507514/MyFirstTestPass_atkrjl.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you click on the test’s name, some additional information is shown, such as the test file and elapsed time:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1498508050/MyFirstTestPass2_ageqqm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice the use of green to indicate the test’s success.&lt;/p&gt;

&lt;p&gt;Now let’s do the opposite: force the test to fail. Replace the previous line for the following one:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Assert.Fail();&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Run the test again and you’ll see the failure message, this time with the red bar:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1498508371/myfirsttestfail_xwuo5u.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that you’re getting the hang of it, we’re start testing our &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; class. Don’t forget to switch the test method back to &lt;code class=&quot;highlighter-rouge&quot;&gt;Assert.Pass()&lt;/code&gt;, otherwise it will continue to fail.&lt;/p&gt;

&lt;p&gt;Now add a new method called &lt;code class=&quot;highlighter-rouge&quot;&gt;IntroduceMethodShouldWorkCorrectly&lt;/code&gt;. In this method we’ll create a new instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; and verify that the &lt;code class=&quot;highlighter-rouge&quot;&gt;Introduce&lt;/code&gt; method is working properly.&lt;/p&gt;

&lt;p&gt;Before we do that, though, we must add a reference from the production project to our test project. Otherwise, our test class won’t be able to see the classes it is supposed to test!&lt;/p&gt;

&lt;p&gt;To do that, right-click the &lt;strong&gt;ApplicationTest&lt;/strong&gt; project, then go to &lt;strong&gt;Add&lt;/strong&gt;, then &lt;strong&gt;Reference&lt;/strong&gt;. In the opened window, choose the project, according to the following image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1498509304/Captura_de_tela_2017-06-26_17.34.04_hgianj.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, click on &lt;strong&gt;OK&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Back to the test class. Edit the code so it looks like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/c840590dab95a023d4530962fca048db.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;You will notice that &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; is marked as an error. If you hover over it, you’ll see a message saying that the name &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; couldn’t be found and asking if there is some reference or &lt;em&gt;using&lt;/em&gt; directive missing.&lt;/p&gt;

&lt;p&gt;Of course there is a using directive missing, related to the reference we’ve just added. To fix this problem, just add the line &lt;code class=&quot;highlighter-rouge&quot;&gt;using Application;&lt;/code&gt; to the namespace declarations, right at the start of the file.&lt;/p&gt;

&lt;p&gt;Now that our code compiles, let’s go through this method, line by line.&lt;/p&gt;

&lt;p&gt;In the first line, we create a new instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt;, specifying name, profession and salary. In the following line, we assign to a variable the value we &lt;strong&gt;expect&lt;/strong&gt; the method to return. Then we assign to another variable the obtained result from the method.&lt;/p&gt;

&lt;p&gt;Finally, we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;AreEqual&lt;/code&gt; method from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Assert&lt;/code&gt; class to verify the equality of the two values. This method is, probably, the one you’ll use the most during your tests.&lt;/p&gt;

&lt;p&gt;Now it’s time to run the test. Use the shortcut &lt;strong&gt;CTRL + R, A&lt;/strong&gt; or click on &lt;strong&gt;Run All&lt;/strong&gt; in the Test Explorer window. If everything goes smoothly, you should see the green bar and the message indicating that both tests have passed.&lt;/p&gt;

&lt;p&gt;Time to test our test! We’re going to deliberately ruin the &lt;code class=&quot;highlighter-rouge&quot;&gt;Introduce&lt;/code&gt; method to see if the test fails as expected. Back to the production class, edit the method like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/02554ca9b8dd69f8c904dbbcc271c99e.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As you’ve seen, we’ve just removed the square brackets before and after “JobTitle”. This way, the string interpolation won’t work, hard-coding the string instead of replacing it by the value of the variable.&lt;/p&gt;

&lt;p&gt;When we run the tests again, we got the following result:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mensagem:   Expected string length 48 but was 46. Strings differ at index 37.
Expected: “Hi! My name is Alice and I work as a Programmer.”
But was:  “Hi! My name is Alice and I work as a JobTitle.”
————————————————^&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see, the message is very detailed. It not only lets us know that the strings differed, but it also tells us exactly where they differ. It also shows the expected string and what we really got. It is important to notice that the parameter’s orders in the &lt;code class=&quot;highlighter-rouge&quot;&gt;AreEqual&lt;/code&gt; matters a lot, since it is used in the failure message.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;The parameters’ order in the &lt;code class=&quot;highlighter-rouge&quot;&gt;AreEqual&lt;/code&gt; is very important. First specify the expected value, and then the actual result.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Great. Now you can switch the method back to the correct implementation and run the tests again, so the test can be green again.&lt;/p&gt;

&lt;p&gt;As you can see, a unit test consists in a well defined sequence of steps: we &lt;strong&gt;prepare&lt;/strong&gt; the scenario, then &lt;strong&gt;execute&lt;/strong&gt; the action and &lt;strong&gt;verify&lt;/strong&gt; the results. This sequence of steps, or phases, is sometimes called AAA: &lt;strong&gt;Arrange-Act-Assert&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A typical unit test has the three phases: &lt;strong&gt;Arrange-Act-Assert&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even though there are another naming conventions for the phases of a unit test, we’ll adopt &lt;strong&gt;Arrange-Act-Assert&lt;/strong&gt; , at least for now.&lt;/p&gt;

&lt;p&gt;You may be wondering why I gave the name “sut” to the variable at the start of the method. This is a naming convention that I learned while reading &lt;a href=&quot;http://blog.ploeh.dk/&quot;&gt;Mark Seeman’s blog&lt;/a&gt;. &lt;strong&gt;SUT&lt;/strong&gt; stands for &lt;em&gt;System Under Test&lt;/em&gt;, i.e. the thing you’re testing.&lt;/p&gt;

&lt;p&gt;There is nothing preventing you from naming the variable whatever you want. I really like to follow this convention, though, since it makes really clear what is being tested.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Tip: Try to use naming conventions that improve the readability of your code and make the author’s intention clear for anyone who reads the code.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take a look at the same test method, but this time with comments delimiting each test phase:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/a91d41ff7ac732fc9c57e63c03a6be07.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Even though it isn’t really need, I suggest you use comments like the ones above to indicate the test phases, at least in the beginning of your learning.&lt;/p&gt;

&lt;h2 id=&quot;testing-the-giveraise-method&quot;&gt;Testing the &lt;code class=&quot;highlighter-rouge&quot;&gt;GiveRaise&lt;/code&gt; method&lt;/h2&gt;

&lt;p&gt;A salary raise is always welcome, wouldn’t you agree? Let’s test the &lt;code class=&quot;highlighter-rouge&quot;&gt;GiveRaise&lt;/code&gt; method to see if it’s working properly. Add the following method to your test class:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/2ce153c1da6f83e80342fa7f83ea4786.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Run the test and you should see the familiar green bar. Did it work? Great. Time to &lt;strong&gt;test the test&lt;/strong&gt;: we’re going to sabotage the implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;GiveRaise&lt;/code&gt; and hope our test catches the error.&lt;/p&gt;

&lt;p&gt;In the production class, edit the method this way:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/fba5901aaa2f542bcd8528de0e96afff.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Now the method is obviously wrong; the test should fail. Let’s run it?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mensagem:   Expected: 110
   But was:  5m&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, as we can see, the test did fail. Switch the method back to the correct implementation.&lt;/p&gt;

&lt;h2 id=&quot;one-last-test&quot;&gt;One last test&lt;/h2&gt;

&lt;p&gt;Let’s say the Product Owner just showed up with a new requirement: the &lt;code class=&quot;highlighter-rouge&quot;&gt;GiveRaise&lt;/code&gt; method should ignore negative raise rates. First, let’s edit the &lt;code class=&quot;highlighter-rouge&quot;&gt;GiveRaise&lt;/code&gt; method to deal with this scenario:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/3f09a8043a1e58753adf9bfdee37350a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We’ve just made a change in production code. Our top priority right now is &lt;strong&gt;to guarantee that we haven’t broken anything&lt;/strong&gt;.
Run the test to be sure that all of them are passing.&lt;/p&gt;

&lt;p&gt;Everything still green? Great, let’s go ahead. Now we need to create a new test to document the “negative raise attempt” scenario.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unit tests are also a type of documentation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the test class, add the following method:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/a474698655450da6547dbfa6b9dbcb8c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Nothing really surprising here, right? At this point I’m sure you’ve already got this. So, now it is up to you to &lt;strong&gt;test the test&lt;/strong&gt;: ruin the production code in one or more ways to see if the test fails as expected.&lt;/p&gt;

&lt;h2 id=&quot;a-quick-recap&quot;&gt;A quick recap&lt;/h2&gt;

&lt;p&gt;Today’s article was more dense than the previous one. We’ve managed to cover several topics::&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Installation of &lt;strong&gt;NUnit&lt;/strong&gt; and &lt;strong&gt;NUnit Test Adapter&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;Creation of a test;&lt;/li&gt;
  &lt;li&gt;Introduction to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Assert&lt;/code&gt; class;&lt;/li&gt;
  &lt;li&gt;Test execution, via &lt;em&gt;Test Explorer&lt;/em&gt; and keyboard shortcuts;&lt;/li&gt;
  &lt;li&gt;Reading and interpretation of test results;&lt;/li&gt;
  &lt;li&gt;Phases of a unit test (&lt;em&gt;Arrange-Act-Assert&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides these topics, we’ve also enlarged our test related vocabulary with terms like &lt;em&gt;SUT&lt;/em&gt;, &lt;em&gt;assertion&lt;/em&gt; and &lt;em&gt;test code vs production code&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Some naming conventions were covered as well, for both classes and methods.&lt;/p&gt;

&lt;p&gt;Last but not least, you’ve learned about the importance of seeing the test fail, and how we can gain confidence in our tests by deliberately sabotaging the production code.&lt;/p&gt;

&lt;h2 id=&quot;some-notes&quot;&gt;Some notes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;You’ve probably noticed that my Visual Studio is not in English in the screen-captures. That is because I’m Brazilian and my Visual Studio is configured in Portuguese (and I first wrote this post in pt-br). I apologize for that.&lt;/li&gt;
  &lt;li&gt;All of the code for today’s post &lt;a href=&quot;https://github.com/carlosschults/learning-unit-testing/&quot;&gt;can be found on Github&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Once again, I thank my friend Gunter Italiano Ribeiro for proof-reading this post.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This was my second article in the series about unit testing. As I already mentioned, it is deliberately longer and more practical than the previous one. Still, all we’ve covered today is just the tip of the iceberg. Whole books were written about unit testing; by the way I’m indicating some in the following articles, along with more references.&lt;/p&gt;

&lt;p&gt;For the tests we wrote today, we used the more intuitive - and probably more common - approach of creating the tests after the production code. However, many people and teams work differently: they write the tests &lt;em&gt;before&lt;/em&gt; the production code.&lt;/p&gt;

&lt;p&gt;I know it may sound strange, at first, but working this way can bring many benefits to your project. This and other topics will be covered in the next article.&lt;/p&gt;

&lt;p&gt;Thanks for reading! See you soon.&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Aug 2017 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/en/unit-testing-for-beginners-part2/</link>
        <guid isPermaLink="true">http://carlosschults.net/en/unit-testing-for-beginners-part2/</guid>
        
        <category>software testing</category>
        
        <category>unit testing</category>
        
        <category>automated tests</category>
        
        <category>agile</category>
        
        
      </item>
    
      <item>
        <title>C# 7 Features Worth Knowing - Part 2</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1489452722/charp7-features-cover_ciekql.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this post we’ll see some more new features from C# 7.0.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;http://carlosschults.net/en/csharp-7-features/&quot;&gt;the first part of this series&lt;/a&gt;, we talked about some new features from C#, namely: literal improvements, out variables, more &lt;em&gt;expression-bodied&lt;/em&gt; members and throw expressions.&lt;/p&gt;

&lt;p&gt;Today we’ll see: &lt;strong&gt;Tuples&lt;/strong&gt; and &lt;strong&gt;Local Functions&lt;/strong&gt;. But before we go on, I’d like to thank my friend Gunter Italiano Ribeiro for reviewing this article.&lt;/p&gt;

&lt;h2 id=&quot;tuples&quot;&gt;Tuples&lt;/h2&gt;

&lt;p&gt;Have you ever felt the need to write a method that returned more than one value? I’d bet you have. In previous versions of the C# language, there were some options available. You could use an out parameter, or even create a type for that, but each one of these had their own problems. Out parameters are non-intuitive and can complicate the design; creating a custom type just for this can be overkill.&lt;/p&gt;

&lt;p&gt;In C# 7.0 you have a new option, by using &lt;strong&gt;tuple types&lt;/strong&gt; and &lt;strong&gt;tuple literals&lt;/strong&gt;. With this feature you can easily declare a method that returns more than one value. Let’s see an example:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/37689aeb84ed4fdff067eab72690a035.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;You’re probably familiar with the &lt;code class=&quot;highlighter-rouge&quot;&gt;TryXXX&lt;/code&gt; pattern, used, for instance, in the &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Int32&lt;/code&gt; BCL type. These sort of methods generally use an out parameter to return the resulting value (or the type default value, in case the parsing operation does not succeed).&lt;/p&gt;

&lt;p&gt;The method above contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;TryParse&lt;/code&gt; method in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ZipCode&lt;/code&gt; class. Take a look at the method’s signature.&lt;/p&gt;

&lt;p&gt;When you write more than one type in the method’s return, you’re using a &lt;em&gt;tuple type&lt;/em&gt;.  Don’t worry, you’re going to get used to it.&lt;/p&gt;

&lt;p&gt;Right at the start of the method, we pass the specified text for a private method that actually performs the validation and returns a boolean value.&lt;/p&gt;

&lt;p&gt;After the validation, we return a &lt;em&gt;tuple literal&lt;/em&gt;, which consists in a new instance of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ZipCode&lt;/code&gt; class and a boolean flag indicating whether the parsing operation succeeded.&lt;/p&gt;

&lt;p&gt;Nice, but what about the other side? How the function caller deals with this sort of return value? Let’s see:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/81b46fd01a187d866a41c0a74c8fc430.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;If you hover over the variable name, you’ll see its type described, unsurprisingly, as &lt;code class=&quot;highlighter-rouge&quot;&gt;(ZipCode, bool)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1495494940/csharp7-part2-fig1_pnmlx5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can access each tuple element by using &lt;code class=&quot;highlighter-rouge&quot;&gt;zipParsingResult.Item1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;zipParsingResult.Item2&lt;/code&gt;, and son on.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/f4a1cf2fea5808474fb126888c436f55.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;However, you’re not forced to use the default names. There’s nothing stopping you from using more descritive naems:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/eb3d649160d4a72a8d94b8ae79eefa2c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The calling code becomes more readable:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/5f5c85d832af66094a68c4a59bdb23d7.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;There’s still another way of accessing a tuple’s items. By using a functionality called &lt;strong&gt;Deconstruction&lt;/strong&gt;, you can easily split a tuple’s elements into variables.&lt;/p&gt;

&lt;p&gt;You can declare the variables by using their types:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/cccbc00f7b154bb897c332e4f8ed614c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Type inference also works here, and you have two options: you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; keyword for each variable, or to use it just once for all variables, placing it outside the parenthesis.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/225e608c7b844df46084b6a7af5b6ac2.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;You don’t even need to declare the variables at the deconstruction moment. It’s perfectly valid to deconstruct a tuple into already existent variables.&lt;/p&gt;

&lt;h3 id=&quot;some-notes&quot;&gt;Some notes&lt;/h3&gt;

&lt;p&gt;Tuples are &lt;a href=&quot;http://carlosschults.net/en/value-reference-types-in-csharp//&quot;&gt;&lt;em&gt;Value Types&lt;/em&gt;&lt;/a&gt;. Equality for tuples works in the way you’d probably expect: two tuples are considered equals if their items have the same values and they return the same &lt;code class=&quot;highlighter-rouge&quot;&gt;HashCode&lt;/code&gt;. The names of the items are not relevant&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/c8200f265b19c59a117d8ad5c347805b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Assignment also works in the intuitive way. As long as they’re assignable to each other, two tuples can freely be assigned to one another. As in the previous case, the item’s names don’t matter.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/feb631d45a4d8b067c502a14eb4730ea.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Currently, for this feature to work, you must install a nuget package called &lt;code class=&quot;highlighter-rouge&quot;&gt;System.ValueTuple&lt;/code&gt;. In Visual Studio, go to &lt;strong&gt;Tools&lt;/strong&gt; &amp;gt; &lt;strong&gt;NuGet Package Manager&lt;/strong&gt; &amp;gt; &lt;strong&gt;Package Manager Console.&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The Package Manager Console Windows will be shown. Type &lt;code class=&quot;highlighter-rouge&quot;&gt;Install-Package System.ValueTuple&lt;/code&gt; and press &lt;code class=&quot;highlighter-rouge&quot;&gt;ENTER&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;but-what-about-systemtuple&quot;&gt;But what about &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Tuple&lt;/code&gt;?&lt;/h3&gt;

&lt;p&gt;Maybe you’re wondering: why so much noise about tuples, if the .Net Framework has had the &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Tuple&lt;/code&gt; reference type since its 4.0 version? Why don’t we just stick to the older type?&lt;/p&gt;

&lt;p&gt;Well, &lt;a href=&quot;http://stackoverflow.com/questions/41084411/whats-the-difference-between-system-valuetuple-and-system-tuple&quot;&gt;this Stack Overflow answers it pretty well&lt;/a&gt;, but I’ll try to summarize it here.&lt;/p&gt;

&lt;p&gt;Firstly, as already mentioned, the older type is a &lt;em&gt;reference type&lt;/em&gt;, and the new one is a &lt;em&gt;value type&lt;/em&gt;, with all the usual implications.&lt;/p&gt;

&lt;p&gt;But the really important differences have to do with convenience and readability. If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Tuple&lt;/code&gt; there is no deconstruction; you can only access the items by using the default names, which makes the code harder to read and understand.&lt;/p&gt;

&lt;h2 id=&quot;local-functions&quot;&gt;Local Functions&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;Local Function&lt;/strong&gt; is exactly what its name suggests: a function that can be declared inside another function.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/0aebfaf7d900d3b47a2d142a676dbb01.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As you’ve noticed, the inner function can access the values available for the outer function.&lt;/p&gt;

&lt;p&gt;Of course, the example shown above is deliberately simple; in production, you’d probably just write the code in &lt;code class=&quot;highlighter-rouge&quot;&gt;Log()&lt;/code&gt; in the external methods and be done with it.&lt;/p&gt;

&lt;p&gt;It’d also be possible to use a &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; for that:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/045204806458c6563cd3a8b20a63133f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;It seems that everything we can do with a local function is also possible to do with private methods or delegates. Do we really need this feature?&lt;/p&gt;

&lt;p&gt;Giovani Bassi give us some reasons to use this feature:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;ul&gt;
    &lt;li&gt;Sintaxe consistente com a já utilizada em métodos;&lt;/li&gt;
    &lt;li&gt;Não há necessidade de criar um delegate, ou referenciar Func, Action, ou algo parecido;&lt;/li&gt;
    &lt;li&gt;Lambdas e delegates causam alocações extras, funções locais não;&lt;/li&gt;
    &lt;li&gt;Ref e out são permitidos;&lt;/li&gt;
    &lt;li&gt;Tipos genéricos são permitidos;&lt;/li&gt;
    &lt;li&gt;É possível referenciar funções ainda não declaradas.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;In free translation:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;ul&gt;
    &lt;li&gt;Sintaxe consistent with the one already used in methods;&lt;/li&gt;
    &lt;li&gt;No need to create a delegate, or reference Func, Action, or something like that;&lt;/li&gt;
    &lt;li&gt;Lambdas and delegates cause extra allocations, local functions don’t;&lt;/li&gt;
    &lt;li&gt;Ref and out are allowed;&lt;/li&gt;
    &lt;li&gt;Generic types are allowed;&lt;/li&gt;
    &lt;li&gt;It’s possible to reference functions not yet declared.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course you could just use a private method. But the local function has this nice property of not being acessible to the rest of your class, making it impossible to be accidentally called.&lt;/p&gt;

&lt;p&gt;Mads Torgersen shows us a situation for which local functions are the perfect solution:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As an example, methods implemented as iterators commonly need a non-iterator wrapper method for eagerly checking the arguments at the time of the call. (The iterator itself doesn’t start running until MoveNext is called). Local functions are perfect for this scenario:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/34b77038c058f261f615e739c7f9ea2a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;You could turn &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterator()&lt;/code&gt; into a private method, sure, but that would be: 1) redundant and not very elegant, since it would require you to repeat the same signature from the outer function; and 2) less safe, because another part of the code could call the method without performing the validation.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Today we’ve talked about &lt;strong&gt;Tuples&lt;/strong&gt; and &lt;strong&gt;Local Functions&lt;/strong&gt;, two new features from C# that, at first sight, can look harmless, but have potential to change the way you write code in interesting ways.&lt;/p&gt;

&lt;p&gt;Local functions? At first, I didn’t really liked it, I must admit. Or rather: I couldn’t understand what would they be useful for. After some research, I understood their use cases.&lt;/p&gt;

&lt;p&gt;With tuples, it’s a whole other story. I believe every C# developer with some experience under their belt has felt the need to return more than one value from a method and was frustrated with the available options. Now using tuples we finally have an elegant, easy-to-use solution, that makes the code less clumsy and more readable.&lt;/p&gt;

&lt;p&gt;Not everything is perfect though. Some developers already express concerns with these features. For instance, local functions could encourage the creation of large methods.&lt;/p&gt;

&lt;p&gt;Tuples, on the other hand, could be over-used in situations that require &lt;em&gt;objects&lt;/em&gt;, making the code more procedural.&lt;/p&gt;

&lt;p&gt;My opinion about all of this is very simple: every tool can be abused. It’s up to us, professionals, and to our teams, to exercise our common-sense while using these (and other) features. By the way, as I mentioned in &lt;a href=&quot;http://carlosschults.net/en/are-private-methods-a-code-smell/&quot;&gt;my article about private methods&lt;/a&gt;, code review and/or pair-programming can be of invaluable help in situations like these.&lt;/p&gt;

&lt;p&gt;Thanks for reading. See you next time.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2017/03/09/new-features-in-c-7-0/&quot;&gt;https://blogs.msdn.microsoft.com/dotnet/2017/03/09/new-features-in-c-7-0/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.lambda3.com.br/2016/04/novidades-do-c-7-local-functions/&quot;&gt;https://www.lambda3.com.br/2016/04/novidades-do-c-7-local-functions/&lt;/a&gt; (pt-br)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 05 Jun 2017 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/en/csharp-7-features-part-2/</link>
        <guid isPermaLink="true">http://carlosschults.net/en/csharp-7-features-part-2/</guid>
        
        <category>csharp</category>
        
        <category>beginners</category>
        
        
      </item>
    
      <item>
        <title>Git basics for TFS/TFVC users</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1491343925/git-for-tfs-users-1038x437_ios03n.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Learning Git can be a bit challenging for developers with a background in centralized version control systems. But it doesn’t have to be that way.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Git is becoming (or &lt;em&gt;has already become&lt;/em&gt;, many would say) the &lt;em&gt;de facto&lt;/em&gt; standard version control system of the industry. It was created in 2005 by Linus Torvalds to manage the source code from the Linux kernel, and since then its adoption has been growing phenomenally, specially after &lt;a href=&quot;github.com&quot;&gt;Github&lt;/a&gt; showed up.&lt;/p&gt;

&lt;p&gt;However, even after all this time, there are some myths about Git that just won’t die. One of them is that Git is super hard to learn. From my experience, I can say that this isn’t true.&lt;/p&gt;

&lt;p&gt;Git was meant to provide a lot of power and flexibility to its users. He certainly allow you to use it in more complex or sophisticate ways. But in practice, the basic commands you will use to get your daily work done are not that hard to learn.&lt;/p&gt;

&lt;p&gt;That being said, Git’s learning curve &lt;em&gt;may&lt;/em&gt; present some challenging to people that are used to centralized systems. I think it’s human nature to try to find patterns and to map concepts between what you already know and what you’re trying to learn; but there are significant differences and this “mapping” often results in frustration.&lt;/p&gt;

&lt;p&gt;With that in mind, I’ve decided to write a series of posts to try to help developers who are coming from centralized systems (specifically TFS/TFVC) and trying to learn Git. I don’t intend by any means to exhaust the subject. Quite the opposite: when necessary, I’ll provide links for more in-depth explanations of certain topics.&lt;/p&gt;

&lt;h2 id=&quot;a-quick-note-about-naming&quot;&gt;A quick note about naming&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;TFS&lt;/strong&gt; stands for Team Foundation Server. It is a Microsoft product that offers capabilities such as project management, requirement management, build automation and release management.&lt;/p&gt;

&lt;p&gt;TFS also offers version control capabilities. Since TFS 2013 there has been native support for Git, but before that it was only possible by using TFS’s own version control system, which is called &lt;strong&gt;Team Foundation Version Control (TFVC)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So, &lt;strong&gt;TFS&lt;/strong&gt; refers to the complete application life-cycle management solution. The version control system itself is called &lt;strong&gt;TFVC&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;However, in this article I’ll be calling the version control system “TFS” since many developers colloquially call it that way.&lt;/p&gt;

&lt;h2 id=&quot;commit--check-in&quot;&gt;Commit != Check-in&lt;/h2&gt;

&lt;p&gt;Being a centralized system, TFS presents a reasonably simple workflow, which usually consists of three steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Get the most updated version of the source code;&lt;/li&gt;
  &lt;li&gt;Make the necessary changes;&lt;/li&gt;
  &lt;li&gt;Send the code with the changes back to the server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, you can see that the “check-in” command in practice has two meaning associated with it: “saving” changes and “sending” those changes to the server.&lt;/p&gt;

&lt;p&gt;What I notice is that this notion of “&lt;strong&gt;I’m going to send my changes to the server&lt;/strong&gt;” is a little bit hard to let go when you’re making the transition.&lt;/p&gt;

&lt;p&gt;Remember: &lt;strong&gt;In Git there is no such thing as a central server&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What you have instead are &lt;em&gt;remote repositories&lt;/em&gt;, usually called just &lt;em&gt;remotes&lt;/em&gt;. You can have as much remotes as you want to. And they don’t necessarily have to be that remote. Yes, they could be on GitHub or something similar. But they could also be located on your coworker’s machine, on some network drive, or even on another folder in your own machine.&lt;/p&gt;

&lt;p&gt;When your work in a team it’s common to set up a repository that is considered, for organization means, the official repository, which holds the code’s true and current state.&lt;/p&gt;

&lt;p&gt;One more time: in Git doesn’t have a technical concept of a central repository; what’s described above is a &lt;strong&gt;convention&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With that in mind, let’s practice some Git commands so you can get used to them. Today we’re not seeing anything regarding remotes, server, nothing like that: just local commands.&lt;/p&gt;

&lt;h2 id=&quot;downloading-and-installing&quot;&gt;Downloading and installing&lt;/h2&gt;

&lt;p&gt;Some people say that using Git on Windows used to be a pain. Fortunately, that isn’t the case anymore, as you’ll see.&lt;/p&gt;

&lt;p&gt;First, &lt;a href=&quot;https://git-scm.com/download/win&quot;&gt;download Git for Windows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Double-click, next, next, you know the drill. There shouldn’t be a problem if you just choose all the default options. However, the following option might be useful:
&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1491350434/git1_xek0vv.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you get to this screen, choosing the second option you allow you to use Git from the Windows command prompt, and not only from Git Bash.&lt;/p&gt;

&lt;h2 id=&quot;basic-configuration&quot;&gt;Basic Configuration&lt;/h2&gt;

&lt;p&gt;After you’re done installing Git, it’s time to configure your identity, which consists in telling Git your name and email so it can associate them with each commit you make.&lt;/p&gt;

&lt;p&gt;In order to do that, let’s use Git Bash. Locate “Git Bash” on Start Menu and run it. Git Bash’s window will be shown.&lt;/p&gt;

&lt;p&gt;Type the following commands:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git config –global user.name “Your Name”&lt;/p&gt;

  &lt;p&gt;git config –global user.email “email@example.com”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are a lot of other configurations available, but this is enough for you to be able to explore Git.&lt;/p&gt;

&lt;h2 id=&quot;creating-your-first-repository&quot;&gt;Creating your first repository&lt;/h2&gt;

&lt;p&gt;Using Git Bash, let’s create a folder and access it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;mkdir repo&lt;/p&gt;

  &lt;p&gt;cd repo&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now it’s time to create the repo:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git init&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After running this command, you’ll see the following message:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Initialized empty Git repository in C:/Users/your-name/repo/.git/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Git Bash prompt should be showing you something like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;User@Machine MINGW64 ~/repo (master)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nothing mysterious: logged user, current location and current branch. In Git, the standard branch is called &lt;em&gt;master&lt;/em&gt;. In the next post we’ll learn some basic operations in branches, but for now we’ll be using just master.&lt;/p&gt;

&lt;h2 id=&quot;some-commands&quot;&gt;Some commands&lt;/h2&gt;

&lt;p&gt;OK, now you’ve got your repository, time to learn some commands. Let’s starting with one that you’ll probably use a lot: &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;. This command allow you to visualize the current status of your repo.&lt;/p&gt;

&lt;p&gt;When you run it you should see the following message:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;On branch master&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Initial commit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;nothing to commit (create/copy files and use “git add” to track)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;current branch;&lt;/li&gt;
  &lt;li&gt;which is waiting for your first commit;&lt;/li&gt;
  &lt;li&gt;it shows what will go in the commit - which in this case is nothing, since we haven’t made any changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Git even tell us what the next possible step is, i.e. create or copy files and the use &lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt; to track them (don’t worry for now about what this “tracking” thing means).&lt;/p&gt;

&lt;p&gt;Let’s create a file.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;echo test &amp;gt; arq1.txt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; again and you’ll see that this time the message is different:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Untracked files:
(use “git add &lt;file&gt;...&quot; to include in what will be committed)&lt;/file&gt;&lt;/p&gt;

  &lt;p&gt;arq1.txt&lt;/p&gt;

  &lt;p&gt;nothing added to commit but untracked files present (use “git add” to track)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some new concepts here, starting with “Untracked files”. Git can see our new file but it will not include it in the next commit.&lt;/p&gt;

&lt;p&gt;Again, Git tell us what to do next. Follow its advice and run the following command:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git add arq1.txt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; again and look at the response:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Changes to be committed:&lt;/p&gt;

  &lt;p&gt;(use “git rm –cached &lt;file&gt;...&quot; to unstage)&lt;/file&gt;&lt;/p&gt;

  &lt;p&gt;new file:   arq1.txt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For now ignore this: 
&amp;gt; use “git rm –cached &lt;file&gt;...&quot; to unstage&lt;/file&gt;&lt;/p&gt;

&lt;p&gt;Now we can see that the added file is ready to be commited. So, let’s do it!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git commit -m “First commit”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The command below creates our first commit. The &lt;code class=&quot;highlighter-rouge&quot;&gt;-m&lt;/code&gt; parameter is used to specify a commit message, which is essential for understanding the history of the project.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; again:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;On branch master&lt;/p&gt;

  &lt;p&gt;nothing to commit, working directory clean&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s now edit our file. Open it using notepad or another text editor of your preference and add the following line:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;adding a new line&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; again:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;On branch master
Changes not staged for commit:
(use “git add &lt;file&gt;...&quot; to update what will be committed)
 (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)&lt;/file&gt;&lt;/file&gt;&lt;/p&gt;

  &lt;p&gt;modified:   arq1.txt&lt;/p&gt;

  &lt;p&gt;no changes added to commit (use “git add” and/or “git commit -a”)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The message is familiar, but slightly different from the the previous ones. As you’re probably expecting by now, she ends offering us a suggestion for the next step. Let’s follow the suggestion:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git add arq1.txt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see, this is the same &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; command we’ve already used, when the file was still in the “untracked” phase. Even tough the command is the same, its meaning is slightly different here. We’ll cover this difference in the future as well.&lt;/p&gt;

&lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; again, message, you should know the drill by now:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Changes to be committed:
(use “git reset HEAD &lt;file&gt;...&quot; to unstage)&lt;/file&gt;&lt;/p&gt;

  &lt;p&gt;modified:   arq1.txt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The message is very similar with one we’ve already seen, but notice that our file now is in the “modified” stage, instead of “new file”, which makes perfect sense.&lt;/p&gt;

&lt;p&gt;It’s not hard to guess what’s coming next:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git commit -m “Second commit: add second line”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To wrap things up, run &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; and you’ll see a familiar message: working directory clean, nothing to commit.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I kept this article extremely simple, and that was by design. My intention was to show you some basic Git commands, so you can get the “feel” of what using Git is like.&lt;/p&gt;

&lt;p&gt;Notice that there is an easily perceptible pattern in the commands we ran:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you create an file&lt;/li&gt;
  &lt;li&gt;“add it”&lt;/li&gt;
  &lt;li&gt;commit&lt;/li&gt;
  &lt;li&gt;edit it&lt;/li&gt;
  &lt;li&gt;“add it”&lt;/li&gt;
  &lt;li&gt;commit again&lt;/li&gt;
  &lt;li&gt;and son on&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Where I’ve wrote “add it”, you know I’m talking about the &lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt; command. You might have noticed that this particular command has two different usages, which is clearly evidenced by the different messages that &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; shows us after running it.&lt;/p&gt;

&lt;p&gt;You’ve probably also noticed the different stags that a file can be in: “untracked”, “new file”, “modified”. they progress from one stage to the next one, like in a pipeline.&lt;/p&gt;

&lt;p&gt;In the next article of the series we’ll go a little more deep in this issues. We’ll understand the different “areas” that exist in a Git repository. We’ll understand Git’s basic workflow, and the stages our files can be in.&lt;/p&gt;

&lt;p&gt;We’ll also start to see one of the more important Git’s concepts: branches. We’ll see some common operations involving branches, and you’ll also learn how Git branches are different from those in TFS.&lt;/p&gt;

&lt;p&gt;See you soon!&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Apr 2017 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/en/git-basics-for-tfs-users</link>
        <guid isPermaLink="true">http://carlosschults.net/en/git-basics-for-tfs-users</guid>
        
        <category>version-control-system</category>
        
        <category>git</category>
        
        <category>tfs</category>
        
        <category>tfvcs</category>
        
        
      </item>
    
      <item>
        <title>C# 7 Features Worth Knowing - Part 1</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1489452722/charp7-features-cover_ciekql.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;C# 7 is finally among us. Time to check out some of its features.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;In my &lt;a href=&quot;http://carlosschults.net/en/csharp-6-features/&quot;&gt;last post&lt;/a&gt; I’ve written about some of the more interesting (for me, at least) features of C# 6. Visual Studio 2017 and C# 7 were officially released the following day, so I guess now it’s the perfect time for us to discuss the new version of the language.&lt;/p&gt;

&lt;p&gt;I think it’s fair to say that the seventh version of C# continues the trend started by its predecessor. Instead of adding radically new capabilities to the language, the design team again chose to include features meant to make your code cleaner and more concise.&lt;/p&gt;

&lt;p&gt;In this version, they “expanded” certain features that made their debut in C# 6. It seems that the previous version acted as a kind of rehearsal for some features; now that the design team knows that those features were well accepted, they can take them to their next level.&lt;/p&gt;

&lt;p&gt;So, without further ado, let’s begin.&lt;/p&gt;

&lt;h2 id=&quot;digit-separators-and-binary-literals&quot;&gt;Digit separators and binary literals&lt;/h2&gt;

&lt;p&gt;Take a look at the code bellow:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/00e899d0f7611e3ca3b54f109f58619b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;What are those underscores for? &lt;strong&gt;Readability&lt;/strong&gt;, that’s what.&lt;/p&gt;

&lt;p&gt;Large numbers can become quite hard to read. To address this issue, C# 7 lets you to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; as a digit separator.&lt;/p&gt;

&lt;p&gt;The separators make no difference on the value. You can place them wherever you like in the number, and in any quantity.&lt;/p&gt;

&lt;p&gt;And in case you’re wondering, you’re not restricted to using them with integers only; they also work with the other numeric types as well.&lt;/p&gt;

&lt;p&gt;The new version of C# also introduces binary literals, as seen in the third line of the example shown above. If you need to write a binary value, just put &lt;code class=&quot;highlighter-rouge&quot;&gt;0b&lt;/code&gt; at the beginning of the number, and that’s it!&lt;/p&gt;

&lt;h2 id=&quot;out-variables&quot;&gt;Out variables&lt;/h2&gt;

&lt;p&gt;In previous versions of C#, working with &lt;em&gt;out&lt;/em&gt; variables has been somewhat inconvenient. You’d have to split their declaration and usage into two steps.&lt;/p&gt;

&lt;p&gt;Now, C# 7 allows you to declare the variable at the argument list:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/fbd60b4e31a09c1e0a4f19b431b10320.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Some important things to bear in mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Even though I’ve explicitly written the type name in the declaration, this is not always required. I could have used &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; and it would’ve worked just the same.&lt;/li&gt;
  &lt;li&gt;You may think that the declared variable will go out of scope after we leave the &lt;code class=&quot;highlighter-rouge&quot;&gt;if/else&lt;/code&gt; block. That is &lt;strong&gt;not&lt;/strong&gt; the case. The variable continues to be accessible until going out of its normal scope.&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/a23411376a6610e0e9081674faf1b0a5.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;more-expression-bodied-members&quot;&gt;(More) Expression-bodied members&lt;/h2&gt;

&lt;p&gt;At the beginning of this post, I said that C# 7 expands some of its predecessor’s features, remember? Well, this is one of those cases.&lt;/p&gt;

&lt;p&gt;In the last post, we’ve seen that &lt;a href=&quot;http://carlosschults.net/en/csharp-6-features/#expression-bodied-methods-and-properties&quot;&gt;C# 6 brought us Expression-bodied members&lt;/a&gt;, which is a nice and shorter way of writing members of the class, using the lambda expression syntax.&lt;/p&gt;

&lt;p&gt;However, you could only use this feature with &lt;strong&gt;methods, read-only properties and indexers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;C# 7 changes the game. Now you can use expression-bodied constructors, destructors, and writable properties.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/50512925b89eb8ee590190793846a724.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;throw-expressions&quot;&gt;throw Expressions&lt;/h2&gt;

&lt;p&gt;This one is very simple. Consider the following code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/8f89e4fff3cf3e6302bc8325d4df5617.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;That is 9 lines of code for just an assignment. And most of those lines are not performing the assignment itself; they’re just a guard clause. Of course, they’re important, but they tend to pollute your code. What if there was a better way?&lt;/p&gt;

&lt;p&gt;Now there is.&lt;/p&gt;

&lt;p&gt;In the previous versions of C#, &lt;code class=&quot;highlighter-rouge&quot;&gt;throw&lt;/code&gt; was a statement. Now, it is an &lt;strong&gt;expression&lt;/strong&gt;, which allows us to throw exceptions in places like the second hand of the Null Coalescing Operator and in conditional expressions.&lt;/p&gt;

&lt;p&gt;Using a &lt;em&gt;throw expression&lt;/em&gt;, the example shown above becomes as simple as this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/a10cfa584d08fda2d3497075926d073d.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Of course, there’s nothing stopping us from turning the constructor into an expression-bodied member:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/02548a3f2d735468518e6c00eea385a8.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this post, we’ve seen some of the new features from the seventh version of C#. This was just the fist part. More parts will come, in which I intend to cover all (or at least most) of the new features.&lt;/p&gt;

&lt;p&gt;As I’ve said earlier, C# 7 kind of continues the path started by C# 6. The design team didn’t just include crazy new features just for the sake of it; instead, they carefully selected the ones that would help all of us to improve the quality of our code.&lt;/p&gt;

&lt;p&gt;That being said, I do consider that this version is a little bit…less shy - for lack of a better word - than its predecessor. Some of the features that I didn’t talk about today show that the language is being pushed to interesting new directions, and I think there is a very exciting ride ahead of us.&lt;/p&gt;

&lt;p&gt;Thanks for reading, and stay tuned for part 2!&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Mar 2017 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/en/csharp-7-features/</link>
        <guid isPermaLink="true">http://carlosschults.net/en/csharp-7-features/</guid>
        
        <category>csharp</category>
        
        <category>beginners</category>
        
        
      </item>
    
      <item>
        <title>It&#39;s about time you start using these C# 6 features</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1487896790/csharp6features_y5czrf.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The 7th version of C# is coming, and it’s expected to bring some new and exciting features to our tool sets. Here’s the thing, though: Are you up to speed with its predecessor’s features?
 &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;A few days ago I was trying to figure out what my next post would be about. It seemed only natural to write about the features of C# 7 since we’re &lt;a href=&quot;(https://blogs.msdn.microsoft.com/visualstudio/2017/02/09/visual-studio-2017-launch-event-and-20th-anniversary/)&quot;&gt;one day(!!!) from the release of Visual Studio 2017.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But then I realized that, even though it’s been almost two years since the release of C# 6, some developers still aren’t comfortable with its features, and have not incorporated them into their code.&lt;/p&gt;

&lt;p&gt;So, I’ve figured I’d take a step back and write about some C# 6 features instead. Not all of them, but those that can make your code cleaner and more expressive and are simple enough for you to use right away.&lt;/p&gt;

&lt;h2 id=&quot;string-interpolation&quot;&gt;String Interpolation&lt;/h2&gt;

&lt;p&gt;Suppose we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt; class, having &lt;code class=&quot;highlighter-rouge&quot;&gt;Name&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Age&lt;/code&gt; as read-only properties. Something like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/84db03cd2a530530b72c4b9eeeb738d4.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Then we have to add a method called &lt;code class=&quot;highlighter-rouge&quot;&gt;Introduce()&lt;/code&gt;, to make our &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt; objects able to introduce themselves. For a person named “Mary” and aged 22, the method should return: “Hi! My name is Mary and I’m 22 years old.”&lt;/p&gt;

&lt;p&gt;There are a few ways we could do that in C# 5, as you can see in the next listing:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/9e30324951420356397c5cc8f50ea51b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Each one of them has their advantages and disadvantages, of course, but C# 6 offers a new way:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/17f501bd6d0ce6f5938edf17ef8e8704.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;You put a dollar sign at the beginning of the string, place your variables inside curly braces - and that’s it!&lt;/p&gt;

&lt;p&gt;String interpolation doesn’t work for all occasions. If you need some special formatting on the values you still have to use &lt;code class=&quot;highlighter-rouge&quot;&gt;string.Format&lt;/code&gt;, for instance.&lt;/p&gt;

&lt;p&gt;But on a day-to-day basis, I use interpolation most of the time when I need to concatenate strings. I find it way nicer and cleaner than the other options.&lt;/p&gt;

&lt;h2 id=&quot;auto-property-initializer&quot;&gt;Auto-Property Initializer&lt;/h2&gt;

&lt;p&gt;Continuing with our previous example. Let’s say that we need to provide a parameterless constructor in our class. Along with that, we need to provide default values for &lt;code class=&quot;highlighter-rouge&quot;&gt;Name&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Age&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Otherwise, &lt;code class=&quot;highlighter-rouge&quot;&gt;Introduce&lt;/code&gt; would return “Hi! My name is  and I’m 0 years old.” And we wouldn’t want that.&lt;/p&gt;

&lt;p&gt;In C# 5, we’d have to initialize the properties inside the constructor:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/d95cade5d8d5f245a1d6bb49ef2feb1f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;C# 6 let us provide default values for our properties when we declare them:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/e7d56c032e723f7c5110a9e3bfa1c744.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;null-conditional-operator&quot;&gt;Null Conditional Operator&lt;/h2&gt;

&lt;p&gt;Consider the following code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/7fb5caff2e73f4130f4db982825adbe6.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Nothing remarkable about it. But there’s a problem waiting to happen here. If &lt;code class=&quot;highlighter-rouge&quot;&gt;customer&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, then this code will throw a &lt;code class=&quot;highlighter-rouge&quot;&gt;NullReferenceException&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is when the new “Null Conditional Operator” can come in handy:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/65bc4372a0e4fc3e8f38c0ee57905beb.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;How does that work? Simple: if &lt;code class=&quot;highlighter-rouge&quot;&gt;customer&lt;/code&gt; is not &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Address&lt;/code&gt; property is accessed, and its value is assigned to our local variable. However, if &lt;code class=&quot;highlighter-rouge&quot;&gt;customer&lt;/code&gt; &lt;em&gt;is&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, then the whole expression evaluates to &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;. And that’s what is assigned to the variable.&lt;/p&gt;

&lt;p&gt;Another nice thing about the Null Conditional Operator is that you can use it along with the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms173224.aspx&quot;&gt;null-coalescing operator&lt;/a&gt; to easily provide a default value, instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/e17d34ba939fb7c472e164010db56377.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;expression-bodied-methods-and-properties&quot;&gt;Expression-bodied methods and properties&lt;/h2&gt;

&lt;p&gt;This one is super easy. It’s just a shorter way of writing methods, using the syntax of lambda expressions.&lt;/p&gt;

&lt;p&gt;For instance, the two methods do the same thing:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/eeae77f3876f9b692ca667281b5401d0.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This feature isn’t restricted to methods, though. It can also be used with properties (only getters) and indexers.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It seems clear that Microsoft’s goal with C# 6 was not to add some radical new capabilities to the language.&lt;/p&gt;

&lt;p&gt;Rather, they had the intention to enable developers to write code in a cleaner and more concise way. And in my opinion, they succeeded.&lt;/p&gt;

&lt;p&gt;You may think that some of the features don’t make that much of a difference, in practice. I beg to differ. C# is often accused of being too verbose. There are situations in which you have to write a decent amount of code to accomplish something that a Ruby programmer or a Python programmer could solve with a one-liner.&lt;/p&gt;

&lt;p&gt;And that’s fair enough. Some (most?) of said verbosity is due to C# being a statically typed language, and let me tell you: &lt;strong&gt;I’m glad for that&lt;/strong&gt;. I can’t count how many times the compiler saved me by catching my dumb mistakes. If a little bit of verbosity is the price I have to pay for this, so be it.&lt;/p&gt;

&lt;p&gt;That being said, the detractors have a point. It is possible to be &lt;em&gt;too&lt;/em&gt; verbose. So, any feature that helps me eliminate some of that verbosity and write more concise code is welcome.&lt;/p&gt;

&lt;h2 id=&quot;see-more&quot;&gt;See more&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://geekswithblogs.net/WinAZ/archive/2015/06/30/whatrsquos-new-in-c-6.0-auto-property-initializers.aspx&quot;&gt;http://geekswithblogs.net/WinAZ/archive/2015/06/30/whatrsquos-new-in-c-6.0-auto-property-initializers.aspx&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/magazine/dn802602.aspx&quot;&gt;https://msdn.microsoft.com/en-us/magazine/dn802602.aspx&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.caelum.com.br/novidades-do-c-6-0/&quot;&gt;http://blog.caelum.com.br/novidades-do-c-6-0/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 06 Mar 2017 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/en/csharp-6-features/</link>
        <guid isPermaLink="true">http://carlosschults.net/en/csharp-6-features/</guid>
        
        <category>csharp</category>
        
        <category>beginners</category>
        
        
      </item>
    
      <item>
        <title>Learn which types of comments should be avoided</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1488499558/comments-1038x437.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Spoiler Alert: You should avoid most of them.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;“To comment or not to comment”. This is a question that tends to spark heated debate. Some people say that comments are an indispensable tool. Others argue that the comments show the developer’s inability to express himself clearly in the code. Who’s right?&lt;/p&gt;

&lt;p&gt;When I was in college, I considered the comments indispensable when writing code. Otherwise, how could you understand what the code should do?&lt;/p&gt;

&lt;p&gt;After getting my degree and finding a job, things started to change. I was being exposed to &lt;em&gt;real code&lt;/em&gt;; I was reading books, articles and blog posts written by influential people in our industry.&lt;/p&gt;

&lt;p&gt;These experiences shaped my current vision.&lt;/p&gt;

&lt;h2 id=&quot;the-dangers-of-bad-documentation&quot;&gt;The dangers of bad documentation&lt;/h2&gt;

&lt;p&gt;Comments are just another form of documentation. And make no mistake: documentation is a good thing - &lt;em&gt;when done correctly and in the right amount&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, it is so often done wrong!&lt;/p&gt;

&lt;p&gt;Many types of documentation can be problematic. It is very common for the documentation to lose synchronization with what it is documenting, which is worse than not having any documentation in the first place.&lt;/p&gt;

&lt;p&gt;This is one of the problems that comments suffer from, but it is far from being the only one.&lt;/p&gt;

&lt;h3 id=&quot;commented-out-code&quot;&gt;Commented-out Code&lt;/h3&gt;

&lt;p&gt;Let’s start with the most obvious one, which is commented-out code. Some developers, when fixing a bug, for example, choose to comment the offending code out, rather than delete it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don’t do this!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Commented-out code does no good to anyone. It’s just waste. Rely on your version control system. It will remember the changes you made if you needed to revert them in the future.&lt;/p&gt;

&lt;h3 id=&quot;changelog-comments&quot;&gt;‘Changelog’ Comments&lt;/h3&gt;

&lt;p&gt;This category of bad comments is similar to the previous category, which is caused by a lack of trust in your version control system.&lt;/p&gt;

&lt;p&gt;What do I mean by “Changelog” comments? Comments that just list the changes made to a file:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/61ffc0459edf71302af6a8140a0e225c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Comments like this are just doing the same work as your VCS already does, but in a clumsy and error-prone way.&lt;/p&gt;

&lt;p&gt;Do not write these types of comments. Use &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; and be happy.&lt;/p&gt;

&lt;h3 id=&quot;redundant-comments&quot;&gt;Redundant Comments&lt;/h3&gt;

&lt;p&gt;This type of bad comment is very easy to detect and very easy to fix. Consider the following code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/d22bf34fcd542e605a31476c46cfb315.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;I think we can all agree that these comments are useless. The code is perfectly clear without them, therefore, they should be removed.&lt;/p&gt;

&lt;h3 id=&quot;comments-at-the-end-of-blocks&quot;&gt;Comments at the end of blocks&lt;/h3&gt;

&lt;p&gt;You’ve probably seen code like this before:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/2d54e29662cd1b35d3c0807138b9e989.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Some people write them so they do not lose control of the brackets.&lt;/p&gt;

&lt;p&gt;If you need a comment for this reason, that indicates that your method is too long and you have too many levels of indentation.&lt;/p&gt;

&lt;p&gt;Remember the Principle of Single Responsibility: each method should do only one thing. Divide your method into small ones and the need for such comments disappears.&lt;/p&gt;

&lt;h3 id=&quot;comments-that-delimit-sections-inside-methods&quot;&gt;Comments that delimit sections inside methods&lt;/h3&gt;

&lt;p&gt;This one is similar to the previous one. If you have several sections inside a method, each one of them with an explaining comment on top, then you’re probably violating the Single Responsibility Principle.&lt;/p&gt;

&lt;p&gt;Remove each section to its own method, use the comment text as the name for the new method, and then delete the comments.&lt;/p&gt;

&lt;h3 id=&quot;out-of-date-comments&quot;&gt;Out of date comments&lt;/h3&gt;

&lt;p&gt;Here’s a common scenario:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bob writes some lines of code. He thinks the code isn’t clear enough and adds some comments to express its intent.&lt;/li&gt;
  &lt;li&gt;Fast forward some weeks. It turns out that the code Bob wrote had a bug. He is on vacation, though, so Alice is made responsible for fixing the bug.&lt;/li&gt;
  &lt;li&gt;Alice fixes the code in a few minutes and checks in her changes. But she forgets to update the comments to reflect the changes she’s made in the code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now what you get? Comments that lie!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Documentation that spread lies is worse than no documentation at all.&lt;/strong&gt; It’s a source of confusion for developers, and a fertile ground for bugs. When you spot an out-of-date comment, don’t think twice: delete it right away, or rewrite it to be accurate. But most of the time you shouldn’t keep the comment. See next topic for why.&lt;/p&gt;

&lt;h3 id=&quot;comments-created-due-to-lack-of-expressiveness-in-the-code&quot;&gt;Comments created due to lack of expressiveness in the code&lt;/h3&gt;

&lt;p&gt;Consider the following code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/0530c4bf5884eb0fc46e63e71908b44d.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Maybe you don’t consider the comment in the sample above to be bad. It is not that terrible, sure. But think of the missed opportunity to extract a useful method or property:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/c914168d48e8d5d567ed79c0d612eafb.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In the new code, we’ve extracted the concept of being eligible for blood donation in a new property. The rules for blood donation eligibility are now consolidated in a single place; should they ever change, the amount of work required to update them will be minimal.&lt;/p&gt;

&lt;p&gt;And we get the nice collateral benefit of readability: the new if statement reads almost like natural language.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As we’ve seen, there are several types of bad comments you should be weary of. They are often signs that there may be something wrong with your code. Maybe your methods are too long. Maybe &lt;a href=&quot;http://carlosschults.net/en/how-to-choose-good-names/&quot;&gt;you didn’t pick good names for your variables&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Every time you feel the need to write a comment, stop and try to think about ways in which you could improve your code to render the comment unnecessary.&lt;/p&gt;

&lt;p&gt;Not all comments are bad, though. In a future post, I’ll write about situations in which comments can be valuable.&lt;/p&gt;

&lt;p&gt;See you later!&lt;/p&gt;

&lt;h2 id=&quot;read-more&quot;&gt;Read More&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://butunclebob.com/ArticleS.TimOttinger.ApologizeIncode&quot;&gt;Apologies In Code, by Robert C. Martin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codeproject.com/tips/467657/write-comments-that-matter&quot;&gt;Write comments that matter, by Sander Rossel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@kentcdodds/please-don-t-commit-commented-out-code-53d0b5b26d5f#.yex54k2sg&quot;&gt;Please, don’t commit commented out code, by Kent C. Dodds&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 02 Mar 2017 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/en/types-of-comments-to-avoid/</link>
        <guid isPermaLink="true">http://carlosschults.net/en/types-of-comments-to-avoid/</guid>
        
        <category>code smell</category>
        
        <category>best practices</category>
        
        <category>beginners</category>
        
        
      </item>
    
      <item>
        <title>Are private methods a code smell?</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1485700794/capa-min_no1cci.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some people believe private methods should be avoided. Are they right?
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;A couple of months ago, &lt;a href=&quot;https://twitter.com/mdbs99&quot;&gt;Marcos Douglas&lt;/a&gt; published a post about &lt;a href=&quot;https://gist.github.com/carlosschults/5f4ba7cfb2453977c8d11424b2926686&quot;&gt;how the use of rules and constraints can help you keep your code clean and maintainable&lt;/a&gt;*. This &lt;a href=&quot;https://medium.com/@cscalfani/why-programmers-need-limits-3d96e1a0a6db#.rptqu89ec&quot;&gt;premise&lt;/a&gt; keeps showing up &lt;a href=&quot;http://blog.ploeh.dk/2015/04/13/less-is-more-language-features/&quot;&gt;again&lt;/a&gt; and &lt;a href=&quot;https://robots.thoughtbot.com/sandi-metz-rules-for-developers&quot;&gt;again&lt;/a&gt; around the web, and I totally agree with it.&lt;/p&gt;

&lt;p&gt;Marcos lays out several useful guidelines such as the ideal number of arguments in a method, the ideal numbers of methods in a class, and so on. The post is very good, and I think you should all &lt;a href=&quot;https://gist.github.com/carlosschults/5f4ba7cfb2453977c8d11424b2926686&quot;&gt;check it out&lt;/a&gt;, but it is not the focus of today’s post.&lt;/p&gt;

&lt;p&gt;Instead, I want to talk about a subject that showed up in the comment’s thread: private methods as a &lt;a href=&quot;https://martinfowler.com/bliki/CodeSmell.html&quot;&gt;code smell&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since I’d never heard something along those lines, I was naturally surprised and decided to do some research.&lt;/p&gt;

&lt;h2 id=&quot;whats-the-matter-with-private-methods&quot;&gt;What’s the matter with private methods?&lt;/h2&gt;

&lt;p&gt;First, let’s try to understand why would private methods be a problem.&lt;/p&gt;

&lt;p&gt;One common argument is that private methods violate the Single Responsibility Principle. The SRP states that each class should do only one thing. If you’re tempted to create private methods, the argument follows, that’s a sign that your class is doing too much.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Private helper methods indicate classes are doing too many things. Moving private helper methods to different classes, including creating new classes if necessary, splits the original responsibilities across multiple classes leading to simpler, better designs.&lt;/p&gt;

  &lt;p&gt;Kent R Spillner, in &lt;a href=&quot;http://kent.spillner.org/blog/work/2009/11/12/private-methods-stink.html&quot;&gt;Private Methods are a Code Smell&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is another similar view:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Private methods are not inherently bad, but they are a sign that you might be missing out on an opportunity to make a useful abstraction. If you have a private method that calls another private method, then there is almost certainly an area of responsibility that remains unidentified.&lt;/p&gt;

  &lt;p&gt;John McDowall, in &lt;a href=&quot;http://blog.stormid.com/2015/03/method-access-modifiers-as-code-smells/&quot;&gt;Break. It. Up! – Private Method Access Modifiers as Code Smells&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another argument is that private methods make unit testing difficult:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Make it public!&lt;/p&gt;

  &lt;p&gt;[…]This is probably the simplest way to overcome the problem of untestability.[…] There’s a reason for that:  testability is a perfectly good reason to make something public.  And you should test most of your code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jason M Baker, in &lt;a href=&quot;https://jasonmbaker.wordpress.com/2009/01/08/enemies-of-test-driven-development-part-i-encapsulation/&quot;&gt;Enemies of Test Driven Development part I: encapsulation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, people also argue that private methods play an important role in messing with internal states in objects, which can get you in real trouble.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Functional programming teaches that state (in the form of member variables) is evil, because it makes your code more complex and harder to test.&lt;/p&gt;

  &lt;p&gt;Ryan Ginstrom, in &lt;a href=&quot;http://ginstrom.com/scribbles/2007/11/12/three-reasons-to-avoid-private-class-members/&quot;&gt;Three reasons to avoid private class members&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve just outlined some of the common arguments against the creation of private methods, so now it’s time to show my opinions on this.&lt;/p&gt;

&lt;h2 id=&quot;private-methods-are-not-necessarily-srp-violations&quot;&gt;Private methods are &lt;em&gt;not&lt;/em&gt; necessarily SRP violations&lt;/h2&gt;

&lt;p&gt;The first argument presented states that private methods violate the Single Responsibility Principle.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Private helper methods indicate classes are doing too many things.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I don’t think that’s the case. At least, not always. It depends on what the private method is doing.&lt;/p&gt;

&lt;p&gt;You probably shouldn’t add a method called &lt;code class=&quot;highlighter-rouge&quot;&gt;ValidateEmailAddress&lt;/code&gt; to your &lt;code class=&quot;highlighter-rouge&quot;&gt;Customer&lt;/code&gt; class, whether private or not. After all, a customer is not the only entity that can have an email address. Instead, create an &lt;code class=&quot;highlighter-rouge&quot;&gt;Email&lt;/code&gt; class and put all the pertinent validations in it.&lt;/p&gt;

&lt;p&gt;On the other hand, let’s say you’re creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;Sort&lt;/code&gt; method for a custom data structure. In this case, it’d make a lot of sense to keep the &lt;code class=&quot;highlighter-rouge&quot;&gt;Sort&lt;/code&gt; method public, and have some auxiliary private methods, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;CompareItems&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Swap&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Moving private helper methods to different classes, including creating new classes if necessary, splits the original responsibilities across multiple classes leading to simpler, better designs.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My main issue with this argument is not that small classes are generally better than large ones, which I agree.&lt;/p&gt;

&lt;p&gt;My problem is that I don’t agree that creating new classes and public methods &lt;strong&gt;just for the sake of avoiding private methods&lt;/strong&gt; will &lt;strong&gt;automatically&lt;/strong&gt; lead to “simpler, better designs”. It sure &lt;em&gt;can&lt;/em&gt;; but it can lead you to worse designs as well. Each situation is unique.&lt;/p&gt;

&lt;h2 id=&quot;i-dont-buy-testability-for-testabilitys-sake&quot;&gt;I don’t buy testability for testability’s sake&lt;/h2&gt;

&lt;p&gt;I really like unit tests (and automated tests in general). I helped evangelize unit testing in my workplace, and I’m currently supervising the team that is adding unit and integration tests to our codebase.&lt;/p&gt;

&lt;p&gt;And one of the first questions that people ask when you’re teaching unit testing to them is: How do I unit test private methods?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1485701114/unicorn_dies-min_epffty.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My answer usually is: &lt;strong&gt;you shouldn’t&lt;/strong&gt;. IMHO, it’s just not that productive to put a lot of effort into testing private methods: since they are called by the public ones, they’re going to be exercised by your tests anyway.&lt;/p&gt;

&lt;p&gt;The goal of a unit test should be to test and document a “unit” (a class) by using its public API. Which leads us to the next point.&lt;/p&gt;

&lt;h2 id=&quot;your-public-api-should-be-stable&quot;&gt;Your public API should be stable!&lt;/h2&gt;

&lt;p&gt;API stands for “Application Programming Interface”. This term can mean a bunch of things, but in this context, think of the API as the set of all public classes and methods that your application exposes to consumers.&lt;/p&gt;

&lt;p&gt;The API acts as a kind of contract between you and your consumers. It’s a deal. If you alter the deal, the other party won’t be happy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1485701325/deal-min_th2zxm.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Your public API should be as stable as possible. This is specially true when you’re writing a web service, a library, or any kind of tool that other parties depend on.&lt;/p&gt;

&lt;p&gt;By the way, this third party doesn’t have to be geographically distant from you. It’s common for a medium to large company to have several teams that depend on code provided by each other. What would happen if each team constantly made drastic changes in their APIs? Chaos.&lt;/p&gt;

&lt;p&gt;When you expose a method publicly, from that moment on you’re “forced” to keep that method working and honoring its contract; otherwise, your consumers will suffer with breaking changes in their code!&lt;/p&gt;

&lt;p&gt;A good usage of private methods can help ensure proper encapsulation in your design.&lt;/p&gt;

&lt;p&gt;Here’s yet another quote from Kent R Spillner:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sometimes, private methods are created just to give pieces of functionality more descriptive names. Although descriptive names are desirable, creating private methods to provide descriptive names for things is still a smell. Moving these methods to collaborators and making them public creates opportunities for future reuse without reducing the clarity of the original code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is one of the points I most vehemently disagree with. I often create private methods for the exact reason Kent R Spillner criticizes here, i.e. giving descriptive names for chunks of code, a habit I developed after reading Robert C. Martin’s book &lt;em&gt;Clean Code&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Mr. Spillner defends that the proper way to deal with this should be to move these methods to other classes and make them public.&lt;/p&gt;

&lt;p&gt;But in doing that, I’ve just added a new public method to the public API of my system! Now it’s one more method to document, test and support, even though it was never &lt;em&gt;meant&lt;/em&gt; to be part of the public API.&lt;/p&gt;

&lt;p&gt;Here we have a definition for access modifiers that I think is spot on:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;public - this method is part of the published API and will not change within major versions of the class&lt;/p&gt;

  &lt;p&gt;[…]&lt;/p&gt;

  &lt;p&gt;private - this method was refactored out of a well tested public or protected method for reasons of clarity or internal re-use. This method may absolutely change, even in patch releases, and should not be relied upon to even exist.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I subscribe to this definition. Thus, in my opinion:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Private methods are not necessarily a bad thing to be avoided at all costs.&lt;/li&gt;
  &lt;li&gt;Making private methods public don’t automatically lead to better design; it can also lead to an unnecessary inflated API, weak encapsulation, and increased maintenance overhead.&lt;/li&gt;
  &lt;li&gt;Testability is a noble goal, but should be pursued pragmatically. Well tested and documented public methods should be enough, for most cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;private-methods-can-be-good-or-bad-learn-to-tell-them-apart&quot;&gt;Private methods can be good or bad; learn to tell them apart&lt;/h2&gt;

&lt;p&gt;All being said, I do think there are cases in which private methods are used in a wrong way. Like any other tool, they can be abused. You should probably watch out for some red flags.&lt;/p&gt;

&lt;p&gt;If a private method is at a &lt;strong&gt;different level of abstraction&lt;/strong&gt; than the public ones in a class, it’s a sign that it belongs in another class. Reading/writing to a file is at a lower level than calculating an employee’s  monthly payment, for instance.&lt;/p&gt;

&lt;p&gt;When a private method is so complex that you really, really wished you could unit test it…then it probably should be made public. (Before you point out my apparent contradiction, I’m not saying that &lt;strong&gt;every&lt;/strong&gt; private method should be made public in order to become testable…just the ones who cross some threshold of complexity).&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;pt&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/pablogl&quot;&gt;@pablogl&lt;/a&gt; i only test public methods. if a private method is complex enough to need testing, it generally needs its own object.&lt;/p&gt;&amp;mdash; Kent Beck (@KentBeck) &lt;a href=&quot;https://twitter.com/KentBeck/status/3579860805&quot;&gt;27 de agosto de 2009&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;What about a private method that contains duplicated code, as in, copied and pasted from another class…? Get rid of the duplication immediately!&lt;/p&gt;

&lt;p&gt;So, here is the thing: two out of the three signs I’ve just outlined are somewhat subjective. At some point, you have to make some choices. How complex is complex enough for a private method to need unit testing? How to properly tell about different levels of abstractions?&lt;/p&gt;

&lt;p&gt;The best tip I can offer is: &lt;strong&gt;Use an extra pair of eyes&lt;/strong&gt;. Always have another person look and examine your code before you check it in. Pair-programming and/or code review are great techniques, not only for improving design and catching bugs, but also for spreading knowledge across a team. Not only technical knowledge, but domain knowledge as well, and that can make the difference when the time comes to make those tough decisions.&lt;/p&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In conclusion&lt;/h2&gt;

&lt;p&gt;Although private methods can be used in bad ways, I think it’s premature to automatically label them as a bad thing and something to be avoided.&lt;/p&gt;

&lt;p&gt;It seems to me that some of the people that claim to be arguing against private methods &lt;strong&gt;are in fact arguing against issues that are orthogonal to private methods&lt;/strong&gt;; you can violate SRP with and without private methods; you can mess with internal mutable state with and without private methods, and so on.&lt;/p&gt;

&lt;p&gt;Software development is an art, full of trade-offs and uncertainty. And while rules-of-thumbs can be useful, they should not be followed blindly.&lt;/p&gt;

&lt;p&gt;This post turned out way longer than I intended. Thanks if you’ve made this far. See you next time!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2620699/why-private-methods-in-the-object-oriented&quot;&gt;http://stackoverflow.com/questions/2620699/why-private-methods-in-the-object-oriented&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kent.spillner.org/blog/work/2009/11/12/private-methods-stink.html&quot;&gt;http://kent.spillner.org/blog/work/2009/11/12/private-methods-stink.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.stormid.com/2015/03/method-access-modifiers-as-code-smells/&quot;&gt;http://blog.stormid.com/2015/03/method-access-modifiers-as-code-smells/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jasonmbaker.wordpress.com/2009/01/08/enemies-of-test-driven-development-part-i-encapsulation/&quot;&gt;https://jasonmbaker.wordpress.com/2009/01/08/enemies-of-test-driven-development-part-i-encapsulation/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/i-m-h-o/private-methods-smelly-ish-435e93ff8c39#.cl06rkgct&quot;&gt;https://medium.com/i-m-h-o/private-methods-smelly-ish-435e93ff8c39#.cl06rkgct&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ginstrom.com/scribbles/2007/11/12/three-reasons-to-avoid-private-class-members/&quot;&gt;http://ginstrom.com/scribbles/2007/11/12/three-reasons-to-avoid-private-class-members/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://rc3.org/2010/01/26/the-argument-against-private-methods/&quot;&gt;http://rc3.org/2010/01/26/the-argument-against-private-methods/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://naildrivin5.com/blog/2010/05/26/is-private-a-code-smell.html&quot;&gt;http://naildrivin5.com/blog/2010/05/26/is-private-a-code-smell.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;* The author has given me permission to translate the article to English. &lt;a href=&quot;http://objectpascalprogramming.com/posts/menos-e-mais/&quot;&gt;Here is the original version, in Portuguese&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 29 Jan 2017 00:00:00 -0200</pubDate>
        <link>http://carlosschults.net/en/are-private-methods-a-code-smell/</link>
        <guid isPermaLink="true">http://carlosschults.net/en/are-private-methods-a-code-smell/</guid>
        
        <category>code smell</category>
        
        <category>best practices</category>
        
        <category>oop</category>
        
        
      </item>
    
      <item>
        <title>Book Review: Soft Skills</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1469301144/soft-skills-1038-437-min_u6ucwf.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What about a software development book that isn’t about software development?
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;More than four months have passed since &lt;a href=&quot;http://carlosschults.net/en/book-review-pragmatic-programmer/&quot;&gt;I reviewed “The Pragmatic Programmer”, by Andy Hunt and Dave Thomas&lt;/a&gt;. So, I figured it was about time I wrote another book review.&lt;/p&gt;

&lt;p&gt;Today’s book is &lt;em&gt;Soft Skills: The software developer’s life manual&lt;/em&gt;, by John Sonmez.&lt;/p&gt;

&lt;p&gt;For those of you who don’t know, John is a software developer best known for his blog Simple Programmer and his YouTube channel. On both of these platforms, he produces content about a broad range of topics, such as finances, negotiation, learning techniques, fitness, entrepreneurship, and so on.&lt;/p&gt;

&lt;p&gt;Think of the content John produces and shares as some kind of “self-help for software developers”, but try not to apply the negative connotation that “self-help” usually carries.&lt;/p&gt;

&lt;h2 id=&quot;so-what-about-the-book&quot;&gt;So, what about the book?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Soft Skills: The software developer’s life manual&lt;/em&gt; was published in late 2014, and it has forewords by Scott Hanselman and Robert C. Martin aka Uncle Bob.&lt;/p&gt;

&lt;p&gt;As its name suggests, this book doesn’t cover any tech-related topics, at least not in a direct way. It is divided into seven sections: Career, Marketing Yourself, Learning, Productivity, Financial, Fitness, Spirit. Each section is meant to cover a specific area of a software developer’s life, and is divided into several short chapters.&lt;/p&gt;

&lt;p&gt;The books is somewhat lengthy - the edition I own is a paperback version which has 470 pages total. It took me a while to finish it, though I admit I read it in a slower pace than usual.&lt;/p&gt;

&lt;h2 id=&quot;the-good&quot;&gt;The Good&lt;/h2&gt;

&lt;p&gt;The book is written in a very conversational and easy-to-follow style. Mind you, I’m from Brazil, my first language is Portuguese, and I can still follow it very easily, which is a good sign.&lt;/p&gt;

&lt;p&gt;The chapters are short, which, for me, it’s a good thing. I usually can’t afford to devote a large chunk of time to reading. What I’ve got instead are several smaller chunks throughout the day, so it’s great when chapters are small enough to fit in those chunks. I’m not sure why, but it feels wrong to leave a chapter unfinished, so I’m always a little bit anxious when I start reading a chapter knowing that I probably won’t be able to finish it in the same session.&lt;/p&gt;

&lt;p&gt;Every chapter of &lt;em&gt;Soft Skills&lt;/em&gt; ends with a “call to action”. John invites you to do a small exercise in order to help you get the most out of the content, and figure out how to apply it to your life. Don’t let the word “exercise” scare you though. The challenges proposed are all very easy to follow and generally involve some amount of thinking and a little bit of writing. And let me tell you, I’m usually the person who would dismiss this sort of thing as “self-help nonsense”. But what I’ve found while reading this book is that this can be really effective.&lt;/p&gt;

&lt;p&gt;The thing is, you may think you know what you want to do with your career and your life. But when you force yourself to stop for a few minutes and actually think about it and write it down…you may be surprised by how little you actually know about your goals, your strengths, your weaknesses, and what you want to accomplish.&lt;/p&gt;

&lt;p&gt;This is specially true when you’re starting your career. Our industry is quite huge. When you’re fresh out of college, young and inexperienced, the sheer amount of options to choose from can be overwhelming. Should I work at a start-up or a large company? Maybe follow the freelancing path? Ruby On Rails or Node.js? So many questions…&lt;/p&gt;

&lt;p&gt;Soft Skills offers some help here. The first section of the book covers, among other things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;employment options (freelancer vs employee vs entrepreneur);&lt;/li&gt;
  &lt;li&gt;kinds of specialties for software developers;&lt;/li&gt;
  &lt;li&gt;kinds of companies you might work for;&lt;/li&gt;
  &lt;li&gt;advice for working remotely.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Section 4 (Productivity) is probably my favorite. The thing is: left to my own devices, I’m not that productive. Shame on me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1470788220/shame_mivvrv.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve been fighting procrastination since college. I tried a lot of to-do apps and productivity techniques. I read &lt;a href=&quot;https://www.amazon.com/Getting-Things-Done-Stress-Free-Productivity-ebook/dp/B000WH7PKY#navbar&quot;&gt;David Allen’s Getting Things Done&lt;/a&gt; every year. I read &lt;a href=&quot;http://lifehacker.com/&quot;&gt;Lifehacker&lt;/a&gt; almost on a daily basis. I even listen to a &lt;a href=&quot;https://www.relay.fm/cortex&quot;&gt;podcast that is mostly about work and productivity&lt;/a&gt;. And yet, I’m still not as productive as I’d like to be, even though I’ve been making progress.&lt;/p&gt;

&lt;p&gt;Those of you who can relate to this feeling will probably find some value in &lt;em&gt;Soft Skills&lt;/em&gt;. John covers a lot here, including the formation of habits, the importance of having a routine, and what are the major time wasters you should try to eliminate from your life. He also covers the &lt;a href=&quot;https://en.wikipedia.org/wiki/Pomodoro_Technique&quot;&gt;Pomodoro technique&lt;/a&gt; and his personal productivity system. He even talks about burnout, which can be a real issue in our industry and you definitely should be prepared to deal with it in your career.&lt;/p&gt;

&lt;p&gt;One common criticism that “Soft Skills” receives - and some people extend this criticism to all of John’s work - is that it has a very market-y vibe. This is kind of true, I’d say. But I don’t necessarily see it as a bad thing.&lt;/p&gt;

&lt;p&gt;A few years ago, back in college, I’ve attended a talk in which the speaker said something along the lines of “it doesn’t matter if you’re the best programmer in the world if no one knows that”.&lt;/p&gt;

&lt;p&gt;For many (most?) developers, the word marketing has a very negative connotation. It’s understandable, since we’ve all seen our share of shady and manipulative marketing tactics in our lives. 
What you need to understand here is that marketing is something that we all do, all the time, even if you don’t call it that. What is a job interview, if not a sales pitch?&lt;/p&gt;

&lt;p&gt;Since marketing is something that you must do, it’s worth doing right and deliberately. &lt;strong&gt;This is where &lt;em&gt;Soft Skills&lt;/em&gt; shines&lt;/strong&gt;, in my opinion. It offers advice about treating your career as a business and your name as a brand. It also explains what exactly a brand is, what is its purpose, its components, and how you can &lt;strong&gt;create and establish your brand by generating value for others&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Sections 3 and 6 (&lt;em&gt;Learning&lt;/em&gt; and &lt;em&gt;Fitness&lt;/em&gt;, respectively) also deserve honorable mentions, but I won’t cover them in detail here for brevity sake. Go read the book!&lt;/p&gt;

&lt;h2 id=&quot;the-bad&quot;&gt;The Bad&lt;/h2&gt;

&lt;p&gt;Now, let’s turn to the not-so-bright side and talk about some of the cons about &lt;em&gt;Soft Skills&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Some of the chapters are really, really short. Yes, I know that not so many paragraphs ago I praised the brevity of the chapters. Now am I speaking the opposite?&lt;/p&gt;

&lt;p&gt;I don’t mind a chapter being short if it provides values and insights. In fact, as I said earlier, I’d rather read a short chapter over a long one, if both of them provides the same value.&lt;/p&gt;

&lt;p&gt;But the thing is: some chapters provide too little value. They would be better off as a paragraph in another section.&lt;/p&gt;

&lt;p&gt;For instance. Chapter 18, “Don’t get religious about technology”, has three pages, in which John tell us not to get too much attached to particular languages, frameworks, operating systems and so on. Great advice, totally agree on that. How many  hours have been wasted on the internet, in endless debates of the “tabs vs spaces” kind? Probably much more than we’d like to know. But this message could easily be summarized in a short paragraph or section in another chapter.&lt;/p&gt;

&lt;p&gt;The book suffers from the opposite problem as well. Some subjects would probably benefit from a little more depth. In chapter 25, “Writing books and articles that attract a following”, John says that, in order to publish a book by traditional means, you should write a proposal, to try to pitch your book to publishers. But he stops there, &lt;strong&gt;without providing an example or template of what such proposal should look like&lt;/strong&gt;, which would be incredible valuable for the wannabe author in his audience.&lt;/p&gt;

&lt;p&gt;Some of the advice in &lt;em&gt;Soft Skill&lt;/em&gt; sound…weird. I particularly disliked John’s advice to hire a professional resume writer. In our field, in the present day, resumes aren’t much more than a formality IMHO.
Provided that your resume it’s not completely awful (i.e. contains a lot of spelling mistakes, it’s designed in a nonsensical way, it lacks essential information, etc) it probably won’t harm you. There are way more important factors that your prospective employer takes into account.&lt;/p&gt;

&lt;h2 id=&quot;the-ugly&quot;&gt;The Ugly&lt;/h2&gt;

&lt;p&gt;Almost every software development book has an ugly and/or weird cover, and &lt;strong&gt;&lt;em&gt;Soft Skills&lt;/em&gt;&lt;/strong&gt; is no exception. But who cares? I just &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Good,_the_Bad_and_the_Ugly&quot;&gt;wanted to make that reference :P&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Soft Skills: The software developer’s life manual&lt;/em&gt; was a fun read. John offers some great insights, specially in regards to learning techniques, career and productivity.&lt;/p&gt;

&lt;p&gt;There are some cons, of course, as I’ve said. Some of the advice offered just don’t make sense to me. I can understand that they probably worked out for John, tough.&lt;/p&gt;

&lt;p&gt;My approach on these types of books is: keep what is valuable, ignore the rest. And I can safely say that I’ve found a good deal of valuable content in &lt;em&gt;Soft Skills&lt;/em&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Aug 2016 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/en/book-review-soft-skills/</link>
        <guid isPermaLink="true">http://carlosschults.net/en/book-review-soft-skills/</guid>
        
        <category>book review</category>
        
        
      </item>
    
      <item>
        <title>Value and reference types in C#, Part 2 - Why can&#39;t a DateTime be null?</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1466341001/csharp-min_buiizq.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“Why is not allowed to assign &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; to a DateTime?” Again and again, this question keeps showing up on StackOverflow and similar sites. Different phrasing, maybe a different type &lt;a href=&quot;http://stackoverflow.com/questions/6191339/why-type-int-is-never-equal-to-null&quot;&gt;(“Why type “int” is never equal to ‘null’?”)&lt;/a&gt;, but the same question, in essence. Which is only natural, considering that probably thousands of developers join the field every year.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;The short answer is: because DateTime/int/float/whatever is a &lt;strong&gt;value type&lt;/strong&gt;, and value types can never be &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;. Only reference types can be &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That’s great but…why???&lt;/p&gt;

&lt;p&gt;I mean, at some point, the C# designers had to make that call. They deliberately decided that &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; can’t be assigned to a value type. Is there something intrinsic to value types that prevent them from being &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;? Maybe it has something to do with the stack and the heap?&lt;/p&gt;

&lt;p&gt;Well, I think before we try to answer those questions, it’d be helpful to get a step back and think about other question.&lt;/p&gt;

&lt;h2 id=&quot;what-exactly-is-null&quot;&gt;What exactly is ‘null’?&lt;/h2&gt;

&lt;p&gt;You probably think of &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; as a way to represent a missing piece of information. Something that is unknown, absent or irrelevant. Maybe a piece of information that isn’t where it’s supposed to be &lt;em&gt;yet&lt;/em&gt;, but it might be in the future.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://carlosschults.net/en/value-reference-types-in-csharp/&quot;&gt;In the previous post about reference and value types&lt;/a&gt;, we learned that a variable of a reference type &lt;strong&gt;contains a reference that points to an instance of that type&lt;/strong&gt;. But when &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; is assigned to the variable, what does the variable contain? Nothing?&lt;/p&gt;

&lt;p&gt;Not exactly. Even though &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; basically means nothing, this “nothing” has to be represented in some way in the machine’s memory.&lt;/p&gt;

&lt;p&gt;In C#, the &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; keyword represents a &lt;strong&gt;null reference&lt;/strong&gt;, which is a reference that doesn’t point to any object. 
In practice, the &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; value is represented as all zero bits.&lt;/p&gt;

&lt;p&gt;Of course, this is just an implementation detail. It could be implemented in different ways, so this isn’t really relevant for us. What you need to understand is, you need something to represent nothing. You need some kind of special value that means “this value is missing” or “this value is unknown”.&lt;/p&gt;

&lt;p&gt;Once you understand this, it becomes easier to see what the problem is with value types.&lt;/p&gt;

&lt;h2 id=&quot;how-would-you-represent-null-for-a-value-type&quot;&gt;How would you represent null for a value type?&lt;/h2&gt;

&lt;p&gt;To understand why would be complicated to represent &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; using a value type, you must bear in mind that value types usually have a range of possible values that they’re able to represent.&lt;/p&gt;

&lt;p&gt;It’s easier to get this with an example. So, consider the &lt;a href=&quot;https://msdn.microsoft.com/pt-br/library/system.byte%28v=vs.110%29.aspx&quot;&gt;byte&lt;/a&gt; value type.&lt;/p&gt;

&lt;p&gt;This type can represent one byte of possible values. Since 2^8 = 256, it can represent 256 values. It is also unsigned, meaning it can only represent values greater than or equals to zero. Thus, the range of possible values that the byte type can represent is &lt;strong&gt;0 to 255.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00000000 =&amp;gt; 0
00000001 =&amp;gt; 1
00000010 =&amp;gt; 2
    .        .
    .        .
    .        .
11111111 =&amp;gt; 255
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now comes the tricky part. If the C# language designers wanted the byte type to be nullable, they’d have to pick a value from the range and elect it as the &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; value. Let’s imagine they picked zero as the &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; value for &lt;code class=&quot;highlighter-rouge&quot;&gt;byte&lt;/code&gt;. If that was the case, &lt;strong&gt;we wouldn’t be able to use zero as a valid value never again!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That’s the whole point: for value types to be nullable, it is necessary to sacrifice one of the possible values of the range to represent the &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;Jon Skeet, author of C# In Depth, puts it better than me:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You’ve got to be able to store the values 0-255 in that variable; otherwise it’s useless for reading arbitrary binary data. With the 256 normal values
and one &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; value, you’d have to cope with a total of 257 values, and there’s no way of squeezing that many values into a single byte.&lt;/p&gt;

  &lt;p&gt;The designers could’ve decided that every value type would have an extra flag bit somewhere determining whether a value was &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; or contained real data, but the memory usage implications 
are horrible, not to mention the fact that you’d have to check the flag every time you wanted the use the value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, there is nothing &lt;strong&gt;in principle&lt;/strong&gt; that prevents value types from being &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;. It’d just be so complicated that  the C# designers considered that the benefits of doing so don’t outweigh the costs.&lt;/p&gt;

&lt;h2 id=&quot;but-i-really-wantneed-a-nullable-value-type-what-can-i-do&quot;&gt;But I really want/need a nullable value type. What can I do?&lt;/h2&gt;

&lt;p&gt;You now hopefully understand the complications involved in representing &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; for a value type, and why the C# developers decided against it. But, what if you really need to do this? One common scenario is when you’re fetching data from a relational database. What should you do?&lt;/p&gt;

&lt;p&gt;Well, thankfully, there’s an easy solution. Even though “normal” value types can’t be &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, C# 2 introduced the Nullable&lt;t&gt; structure, which allows you to assign `null` to pretty much anything.&lt;/t&gt;&lt;/p&gt;

&lt;p&gt;I’ll talk about nullable types in the next article. As a bonus, you’ll learn a bit about another nice feature called &lt;em&gt;generics&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Stay tuned!&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Jun 2016 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/en/value-reference-types-in-csharp-part-2/</link>
        <guid isPermaLink="true">http://carlosschults.net/en/value-reference-types-in-csharp-part-2/</guid>
        
        <category>csharp</category>
        
        <category>beginners</category>
        
        <category>oop</category>
        
        <category>type system</category>
        
        
      </item>
    
  </channel>
</rss>
