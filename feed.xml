<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>carlos schults / blog</title>
    <description>Articles on software development, databases and several tech related subjects.</description>
    <link>http://carlosschults.net/</link>
    <atom:link href="http://carlosschults.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 02 Mar 2017 22:35:34 -0300</pubDate>
    <lastBuildDate>Thu, 02 Mar 2017 22:35:34 -0300</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
    
      <item>
        <title>Learn which types of comments should be avoided</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1488499558/comments-1038x437.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Spoiler Alert: You should avoid most of them.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;“To comment or not to comment”. This is a question that tends to spark heated debate. Some people say that comments are an indispensable tool. Others argue that the comments show the developer’s inability to express himself clearly in the code. Who’s right?&lt;/p&gt;

&lt;p&gt;When I was in college, I considered the comments indispensable when writing code. Otherwise, how could you understand what the code should do?&lt;/p&gt;

&lt;p&gt;After getting my degree and finding a job, things started to change. I was being exposed to * real code *; I was reading books, articles and blog posts written by influential people in our industry.&lt;/p&gt;

&lt;p&gt;These experiences shaped my current vision.&lt;/p&gt;

&lt;h2 id=&quot;the-dangers-of-bad-documentation&quot;&gt;The dangers of bad documentation&lt;/h2&gt;

&lt;p&gt;Comments are just another form of documentation. And make no mistake: documentation is a good thing - &lt;em&gt;when done correctly and in the right amount&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, it is so often done wrong!&lt;/p&gt;

&lt;p&gt;Many types of documentation can be problematic. It is very common for the documentation to lose synchronization with what it is documenting, which is worse than not having any documentation in the first place.&lt;/p&gt;

&lt;p&gt;This is one of the problems that comments suffer from, but it is far from being the only one.&lt;/p&gt;

&lt;h3 id=&quot;commented-out-code&quot;&gt;Commented-out Code&lt;/h3&gt;

&lt;p&gt;Let’s start with the most obvious one, which is commented-out code. Some developers, when fixing a bug, for example, choose to comment the offending code out, rather than delete it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don’t do this!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Commented-out code does no good to anyone. It’s just waste. Rely on your version control system. It will remember the changes you made if you needed to revert them in the future.&lt;/p&gt;

&lt;h3 id=&quot;changelog-comments&quot;&gt;‘Changelog’ Comments&lt;/h3&gt;

&lt;p&gt;This category of bad comments is similar to the previous category, which is caused by a lack of trust in your version control system.&lt;/p&gt;

&lt;p&gt;What do I mean by “Changelog” comments? Comments that just list the changes made to a file:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/61ffc0459edf71302af6a8140a0e225c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Comments like this are just doing the same work as your VCS already does, but in a clumsy and error-prone way.&lt;/p&gt;

&lt;p&gt;Do not write these types of comments. Use [git] (https://git-scm.com/) and be happy.&lt;/p&gt;

&lt;h3 id=&quot;redundant-comments&quot;&gt;Redundant Comments&lt;/h3&gt;

&lt;p&gt;This type of bad comment is very easy to detect and very easy to fix. Consider the following code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/d22bf34fcd542e605a31476c46cfb315.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;I think we can all agree that these comments are useless. The code is perfectly clear without them, therefore, they should be removed.&lt;/p&gt;

&lt;h3 id=&quot;comments-at-the-end-of-blocks&quot;&gt;Comments at the end of blocks&lt;/h3&gt;

&lt;p&gt;You’ve probably seen code like this before:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/2d54e29662cd1b35d3c0807138b9e989.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Some people write them so they do not lose control of the brackets.&lt;/p&gt;

&lt;p&gt;If you need a comment for this reason, that indicates that your method is too long and you have too many levels of indentation.&lt;/p&gt;

&lt;p&gt;Remember the Principle of Single Responsibility: each method should do only one thing. Divide your method into small ones and the need for such comments disappears.&lt;/p&gt;

&lt;h3 id=&quot;comments-that-delimit-sections-inside-methods&quot;&gt;Comments that delimit sections inside methods&lt;/h3&gt;

&lt;p&gt;This one is similar to the previous one. If you have several sections inside a method, each one of them with an explaining comment on top, then you’re probably violating the Single Responsibility Principle.&lt;/p&gt;

&lt;p&gt;Remove each section to its own method, use the comment text as the name for the new method, and then delete the comments.&lt;/p&gt;

&lt;h3 id=&quot;out-of-date-comments&quot;&gt;Out of date comments&lt;/h3&gt;

&lt;p&gt;Here’s a common scenario:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bob writes some lines of code. He thinks the code isn’t clear enough and adds some comments to express its intent.&lt;/li&gt;
  &lt;li&gt;Fast forward some weeks. It turns out that the code Bob wrote had a bug. He is on vacation, though, so Alice is made responsible for fixing the bug.&lt;/li&gt;
  &lt;li&gt;Alice fixes the code in a few minutes and checks in her changes. But she forgets to update the comments to reflect the changes she’s made in the code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now what you get? Comments that lie!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Documentation that spread lies is worse than no documentation at all.&lt;/strong&gt; It’s a source of confusion for developers, and a fertile ground for bugs. When you spot an out-of-date comment, don’t think twice: delete it right away, or rewrite it to be accurate. But most of the time you shouldn’t keep the comment. See next topic for why.&lt;/p&gt;

&lt;h3 id=&quot;comments-created-due-to-lack-of-expressiveness-in-the-code&quot;&gt;Comments created due to lack of expressiveness in the code&lt;/h3&gt;

&lt;p&gt;Consider the following code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/0530c4bf5884eb0fc46e63e71908b44d.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Maybe you don’t consider the comment in the sample above to be bad. It is not that terrible, sure. But think of the missed opportunity to extract a useful method or property:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/c914168d48e8d5d567ed79c0d612eafb.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In the new code, we’ve extracted the concept of being eligible for blood donation in a new property. The rules for blood donation eligibility are now consolidated in a single place; should they ever change, the amount of work required to update them will be minimal.&lt;/p&gt;

&lt;p&gt;And we get the nice collateral benefit of readability: the new if statement reads almost like natural language.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As we’ve seen, there are several types of bad comments you should be weary of. They are often signs that there may be something wrong with your code. Maybe your methods are too long. Maybe &lt;a href=&quot;http://carlosschults.net/en/how-to-choose-good-names/&quot;&gt;you didn’t pick good names for your variables&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Every time you feel the need to write a comment, stop and try to think about ways in which you could improve your code to render the comment unnecessary.&lt;/p&gt;

&lt;p&gt;Not all comments are bad, though. In a future post, I’ll write about situations in which comments can be valuable.&lt;/p&gt;

&lt;p&gt;See you later!&lt;/p&gt;

&lt;h2 id=&quot;read-more&quot;&gt;Read More&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://butunclebob.com/ArticleS.TimOttinger.ApologizeIncode&quot;&gt;Apologies In Code, by Robert C. Martin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codeproject.com/tips/467657/write-comments-that-matter&quot;&gt;Write comments that matter, by Sander Rossel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@kentcdodds/please-don-t-commit-commented-out-code-53d0b5b26d5f#.yex54k2sg&quot;&gt;Please, don’t commit commented out code, by Kent C. Dodds&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 02 Mar 2017 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/en/types-of-comments-to-avoid/</link>
        <guid isPermaLink="true">http://carlosschults.net/en/types-of-comments-to-avoid/</guid>
        
        <category>code smell</category>
        
        <category>best practices</category>
        
        <category>beginners</category>
        
        
      </item>
    
      <item>
        <title>Are private methods a code smell?</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1485700794/capa-min_no1cci.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some people believe private methods should be avoided. Are they right?
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;A couple of months ago, &lt;a href=&quot;https://twitter.com/mdbs99&quot;&gt;Marcos Douglas&lt;/a&gt; published a post about &lt;a href=&quot;https://gist.github.com/carlosschults/5f4ba7cfb2453977c8d11424b2926686&quot;&gt;how the use of rules and constraints can help you keep your code clean and maintainable&lt;/a&gt;*. This &lt;a href=&quot;https://medium.com/@cscalfani/why-programmers-need-limits-3d96e1a0a6db#.rptqu89ec&quot;&gt;premise&lt;/a&gt; keeps showing up &lt;a href=&quot;http://blog.ploeh.dk/2015/04/13/less-is-more-language-features/&quot;&gt;again&lt;/a&gt; and &lt;a href=&quot;https://robots.thoughtbot.com/sandi-metz-rules-for-developers&quot;&gt;again&lt;/a&gt; around the web, and I totally agree with it.&lt;/p&gt;

&lt;p&gt;Marcos lays out several useful guidelines such as the ideal number of arguments in a method, the ideal numbers of methods in a class, and so on. The post is very good, and I think you should all &lt;a href=&quot;https://gist.github.com/carlosschults/5f4ba7cfb2453977c8d11424b2926686&quot;&gt;check it out&lt;/a&gt;, but it is not the focus of today’s post.&lt;/p&gt;

&lt;p&gt;Instead, I want to talk about a subject that showed up in the comment’s thread: private methods as a &lt;a href=&quot;https://martinfowler.com/bliki/CodeSmell.html&quot;&gt;code smell&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since I’d never heard something along those lines, I was naturally surprised and decided to do some research.&lt;/p&gt;

&lt;h2 id=&quot;whats-the-matter-with-private-methods&quot;&gt;What’s the matter with private methods?&lt;/h2&gt;

&lt;p&gt;First, let’s try to understand why would private methods be a problem.&lt;/p&gt;

&lt;p&gt;One common argument is that private methods violate the Single Responsibility Principle. The SRP states that each class should do only one thing. If you’re tempted to create private methods, the argument follows, that’s a sign that your class is doing too much.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Private helper methods indicate classes are doing too many things. Moving private helper methods to different classes, including creating new classes if necessary, splits the original responsibilities across multiple classes leading to simpler, better designs.&lt;/p&gt;

  &lt;p&gt;Kent R Spillner, in &lt;a href=&quot;http://kent.spillner.org/blog/work/2009/11/12/private-methods-stink.html&quot;&gt;Private Methods are a Code Smell&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is another similar view:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Private methods are not inherently bad, but they are a sign that you might be missing out on an opportunity to make a useful abstraction. If you have a private method that calls another private method, then there is almost certainly an area of responsibility that remains unidentified.&lt;/p&gt;

  &lt;p&gt;John McDowall, in &lt;a href=&quot;http://blog.stormid.com/2015/03/method-access-modifiers-as-code-smells/&quot;&gt;Break. It. Up! – Private Method Access Modifiers as Code Smells&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another argument is that private methods make unit testing difficult:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Make it public!&lt;/p&gt;

  &lt;p&gt;[…]This is probably the simplest way to overcome the problem of untestability.[…] There’s a reason for that:  testability is a perfectly good reason to make something public.  And you should test most of your code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jason M Baker, in &lt;a href=&quot;https://jasonmbaker.wordpress.com/2009/01/08/enemies-of-test-driven-development-part-i-encapsulation/&quot;&gt;Enemies of Test Driven Development part I: encapsulation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, people also argue that private methods play an important role in messing with internal states in objects, which can get you in real trouble.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Functional programming teaches that state (in the form of member variables) is evil, because it makes your code more complex and harder to test.&lt;/p&gt;

  &lt;p&gt;Ryan Ginstrom, in &lt;a href=&quot;http://ginstrom.com/scribbles/2007/11/12/three-reasons-to-avoid-private-class-members/&quot;&gt;Three reasons to avoid private class members&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve just outlined some of the common arguments against the creation of private methods, so now it’s time to show my opinions on this.&lt;/p&gt;

&lt;h2 id=&quot;private-methods-are-not-necessarily-srp-violations&quot;&gt;Private methods are &lt;em&gt;not&lt;/em&gt; necessarily SRP violations&lt;/h2&gt;

&lt;p&gt;The first argument presented states that private methods violate the Single Responsibility Principle.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Private helper methods indicate classes are doing too many things.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I don’t think that’s the case. At least, not always. It depends on what the private method is doing.&lt;/p&gt;

&lt;p&gt;You probably shouldn’t add a method called &lt;code class=&quot;highlighter-rouge&quot;&gt;ValidateEmailAddress&lt;/code&gt; to your &lt;code class=&quot;highlighter-rouge&quot;&gt;Customer&lt;/code&gt; class, whether private or not. After all, a customer is not the only entity that can have an email address. Instead, create an &lt;code class=&quot;highlighter-rouge&quot;&gt;Email&lt;/code&gt; class and put all the pertinent validations in it.&lt;/p&gt;

&lt;p&gt;On the other hand, let’s say you’re creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;Sort&lt;/code&gt; method for a custom data structure. In this case, it’d make a lot of sense to keep the &lt;code class=&quot;highlighter-rouge&quot;&gt;Sort&lt;/code&gt; method public, and have some auxiliary private methods, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;CompareItems&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Swap&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Moving private helper methods to different classes, including creating new classes if necessary, splits the original responsibilities across multiple classes leading to simpler, better designs.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My main issue with this argument is not that small classes are generally better than large ones, which I agree.&lt;/p&gt;

&lt;p&gt;My problem is that I don’t agree that creating new classes and public methods &lt;strong&gt;just for the sake of avoiding private methods&lt;/strong&gt; will &lt;strong&gt;automatically&lt;/strong&gt; lead to “simpler, better designs”. It sure &lt;em&gt;can&lt;/em&gt;; but it can lead you to worse designs as well. Each situation is unique.&lt;/p&gt;

&lt;h2 id=&quot;i-dont-buy-testability-for-testabilitys-sake&quot;&gt;I don’t buy testability for testability’s sake&lt;/h2&gt;

&lt;p&gt;I really like unit tests (and automated tests in general). I helped evangelize unit testing in my workplace, and I’m currently supervising the team that is adding unit and integration tests to our codebase.&lt;/p&gt;

&lt;p&gt;And one of the first questions that people ask when you’re teaching unit testing to them is: How do I unit test private methods?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1485701114/unicorn_dies-min_epffty.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My answer usually is: &lt;strong&gt;you shouldn’t&lt;/strong&gt;. IMHO, it’s just not that productive to put a lot of effort into testing private methods: since they are called by the public ones, they’re going to be exercised by your tests anyway.&lt;/p&gt;

&lt;p&gt;The goal of a unit test should be to test and document a “unit” (a class) by using its public API. Which leads us to the next point.&lt;/p&gt;

&lt;h2 id=&quot;your-public-api-should-be-stable&quot;&gt;Your public API should be stable!&lt;/h2&gt;

&lt;p&gt;API stands for “Application Programming Interface”. This term can mean a bunch of things, but in this context, think of the API as the set of all public classes and methods that your application exposes to consumers.&lt;/p&gt;

&lt;p&gt;The API acts as a kind of contract between you and your consumers. It’s a deal. If you alter the deal, the other party won’t be happy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1485701325/deal-min_th2zxm.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Your public API should be as stable as possible. This is specially true when you’re writing a web service, a library, or any kind of tool that other parties depend on.&lt;/p&gt;

&lt;p&gt;By the way, this third party doesn’t have to be geographically distant from you. It’s common for a medium to large company to have several teams that depend on code provided by each other. What would happen if each team constantly made drastic changes in their APIs? Chaos.&lt;/p&gt;

&lt;p&gt;When you expose a method publicly, from that moment on you’re “forced” to keep that method working and honoring its contract; otherwise, your consumers will suffer with breaking changes in their code!&lt;/p&gt;

&lt;p&gt;A good usage of private methods can help ensure proper encapsulation in your design.&lt;/p&gt;

&lt;p&gt;Here’s yet another quote from Kent R Spillner:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sometimes, private methods are created just to give pieces of functionality more descriptive names. Although descriptive names are desirable, creating private methods to provide descriptive names for things is still a smell. Moving these methods to collaborators and making them public creates opportunities for future reuse without reducing the clarity of the original code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is one of the points I most vehemently disagree with. I often create private methods for the exact reason Kent R Spillner criticizes here, i.e. giving descriptive names for chunks of code, a habit I developed after reading Robert C. Martin’s book &lt;em&gt;Clean Code&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Mr. Spillner defends that the proper way to deal with this should be to move these methods to other classes and make them public.&lt;/p&gt;

&lt;p&gt;But in doing that, I’ve just added a new public method to the public API of my system! Now it’s one more method to document, test and support, even though it was never &lt;em&gt;meant&lt;/em&gt; to be part of the public API.&lt;/p&gt;

&lt;p&gt;Here we have a definition for access modifiers that I think is spot on:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;public - this method is part of the published API and will not change within major versions of the class&lt;/p&gt;

  &lt;p&gt;[…]&lt;/p&gt;

  &lt;p&gt;private - this method was refactored out of a well tested public or protected method for reasons of clarity or internal re-use. This method may absolutely change, even in patch releases, and should not be relied upon to even exist.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I subscribe to this definition. Thus, in my opinion:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Private methods are not necessarily a bad thing to be avoided at all costs.&lt;/li&gt;
  &lt;li&gt;Making private methods public don’t automatically lead to better design; it can also lead to an unnecessary inflated API, weak encapsulation, and increased maintenance overhead.&lt;/li&gt;
  &lt;li&gt;Testability is a noble goal, but should be pursued pragmatically. Well tested and documented public methods should be enough, for most cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;private-methods-can-be-good-or-bad-learn-to-tell-them-apart&quot;&gt;Private methods can be good or bad; learn to tell them apart&lt;/h2&gt;

&lt;p&gt;All being said, I do think there are cases in which private methods are used in a wrong way. Like any other tool, they can be abused. You should probably watch out for some red flags.&lt;/p&gt;

&lt;p&gt;If a private method is at a &lt;strong&gt;different level of abstraction&lt;/strong&gt; than the public ones in a class, it’s a sign that it belongs in another class. Reading/writing to a file is at a lower level than calculating an employee’s  monthly payment, for instance.&lt;/p&gt;

&lt;p&gt;When a private method is so complex that you really, really wished you could unit test it…then it probably should be made public. (Before you point out my apparent contradiction, I’m not saying that &lt;strong&gt;every&lt;/strong&gt; private method should be made public in order to become testable…just the ones who cross some threshold of complexity).&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;pt&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/pablogl&quot;&gt;@pablogl&lt;/a&gt; i only test public methods. if a private method is complex enough to need testing, it generally needs its own object.&lt;/p&gt;&amp;mdash; Kent Beck (@KentBeck) &lt;a href=&quot;https://twitter.com/KentBeck/status/3579860805&quot;&gt;27 de agosto de 2009&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;What about a private method that contains duplicated code, as in, copied and pasted from another class…? Get rid of the duplication immediately!&lt;/p&gt;

&lt;p&gt;So, here is the thing: two out of the three signs I’ve just outlined are somewhat subjective. At some point, you have to make some choices. How complex is complex enough for a private method to need unit testing? How to properly tell about different levels of abstractions?&lt;/p&gt;

&lt;p&gt;The best tip I can offer is: &lt;strong&gt;Use an extra pair of eyes&lt;/strong&gt;. Always have another person look and examine your code before you check it in. Pair-programming and/or code review are great techniques, not only for improving design and catching bugs, but also for spreading knowledge across a team. Not only technical knowledge, but domain knowledge as well, and that can make the difference when the time comes to make those tough decisions.&lt;/p&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In conclusion&lt;/h2&gt;

&lt;p&gt;Although private methods can be used in bad ways, I think it’s premature to automatically label them as a bad thing and something to be avoided.&lt;/p&gt;

&lt;p&gt;It seems to me that some of the people that claim to be arguing against private methods &lt;strong&gt;are in fact arguing against issues that are orthogonal to private methods&lt;/strong&gt;; you can violate SRP with and without private methods; you can mess with internal mutable state with and without private methods, and so on.&lt;/p&gt;

&lt;p&gt;Software development is an art, full of trade-offs and uncertainty. And while rules-of-thumbs can be useful, they should not be followed blindly.&lt;/p&gt;

&lt;p&gt;This post turned out way longer than I intended. Thanks if you’ve made this far. See you next time!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2620699/why-private-methods-in-the-object-oriented&quot;&gt;http://stackoverflow.com/questions/2620699/why-private-methods-in-the-object-oriented&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kent.spillner.org/blog/work/2009/11/12/private-methods-stink.html&quot;&gt;http://kent.spillner.org/blog/work/2009/11/12/private-methods-stink.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.stormid.com/2015/03/method-access-modifiers-as-code-smells/&quot;&gt;http://blog.stormid.com/2015/03/method-access-modifiers-as-code-smells/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jasonmbaker.wordpress.com/2009/01/08/enemies-of-test-driven-development-part-i-encapsulation/&quot;&gt;https://jasonmbaker.wordpress.com/2009/01/08/enemies-of-test-driven-development-part-i-encapsulation/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/i-m-h-o/private-methods-smelly-ish-435e93ff8c39#.cl06rkgct&quot;&gt;https://medium.com/i-m-h-o/private-methods-smelly-ish-435e93ff8c39#.cl06rkgct&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ginstrom.com/scribbles/2007/11/12/three-reasons-to-avoid-private-class-members/&quot;&gt;http://ginstrom.com/scribbles/2007/11/12/three-reasons-to-avoid-private-class-members/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://rc3.org/2010/01/26/the-argument-against-private-methods/&quot;&gt;http://rc3.org/2010/01/26/the-argument-against-private-methods/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://naildrivin5.com/blog/2010/05/26/is-private-a-code-smell.html&quot;&gt;http://naildrivin5.com/blog/2010/05/26/is-private-a-code-smell.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;* The author has given me permission to translate the article to English. &lt;a href=&quot;http://objectpascalprogramming.com/posts/menos-e-mais/&quot;&gt;Here is the original version, in Portuguese&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 29 Jan 2017 00:00:00 -0200</pubDate>
        <link>http://carlosschults.net/en/are-private-methods-a-code-smell/</link>
        <guid isPermaLink="true">http://carlosschults.net/en/are-private-methods-a-code-smell/</guid>
        
        <category>code smell</category>
        
        <category>best practices</category>
        
        <category>oop</category>
        
        
      </item>
    
      <item>
        <title>Book Review: Soft Skills</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1469301144/soft-skills-1038-437-min_u6ucwf.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What about a software development book that isn’t about software development?
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;More than four months have passed since &lt;a href=&quot;http://carlosschults.net/en/book-review-pragmatic-programmer/&quot;&gt;I reviewed “The Pragmatic Programmer”, by Andy Hunt and Dave Thomas&lt;/a&gt;. So, I figured it was about time I wrote another book review.&lt;/p&gt;

&lt;p&gt;Today’s book is &lt;em&gt;Soft Skills: The software developer’s life manual&lt;/em&gt;, by John Sonmez.&lt;/p&gt;

&lt;p&gt;For those of you who don’t know, John is a software developer best known for his blog Simple Programmer and his YouTube channel. On both of these platforms, he produces content about a broad range of topics, such as finances, negotiation, learning techniques, fitness, entrepreneurship, and so on.&lt;/p&gt;

&lt;p&gt;Think of the content John produces and shares as some kind of “self-help for software developers”, but try not to apply the negative connotation that “self-help” usually carries.&lt;/p&gt;

&lt;h2 id=&quot;so-what-about-the-book&quot;&gt;So, what about the book?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Soft Skills: The software developer’s life manual&lt;/em&gt; was published in late 2014, and it has forewords by Scott Hanselman and Robert C. Martin aka Uncle Bob.&lt;/p&gt;

&lt;p&gt;As its name suggests, this book doesn’t cover any tech-related topics, at least not in a direct way. It is divided into seven sections: Career, Marketing Yourself, Learning, Productivity, Financial, Fitness, Spirit. Each section is meant to cover a specific area of a software developer’s life, and is divided into several short chapters.&lt;/p&gt;

&lt;p&gt;The books is somewhat lengthy - the edition I own is a paperback version which has 470 pages total. It took me a while to finish it, though I admit I read it in a slower pace than usual.&lt;/p&gt;

&lt;h2 id=&quot;the-good&quot;&gt;The Good&lt;/h2&gt;

&lt;p&gt;The book is written in a very conversational and easy-to-follow style. Mind you, I’m from Brazil, my first language is Portuguese, and I can still follow it very easily, which is a good sign.&lt;/p&gt;

&lt;p&gt;The chapters are short, which, for me, it’s a good thing. I usually can’t afford to devote a large chunk of time to reading. What I’ve got instead are several smaller chunks throughout the day, so it’s great when chapters are small enough to fit in those chunks. I’m not sure why, but it feels wrong to leave a chapter unfinished, so I’m always a little bit anxious when I start reading a chapter knowing that I probably won’t be able to finish it in the same session.&lt;/p&gt;

&lt;p&gt;Every chapter of &lt;em&gt;Soft Skills&lt;/em&gt; ends with a “call to action”. John invites you to do a small exercise in order to help you get the most out of the content, and figure out how to apply it to your life. Don’t let the word “exercise” scare you though. The challenges proposed are all very easy to follow and generally involve some amount of thinking and a little bit of writing. And let me tell you, I’m usually the person who would dismiss this sort of thing as “self-help nonsense”. But what I’ve found while reading this book is that this can be really effective.&lt;/p&gt;

&lt;p&gt;The thing is, you may think you know what you want to do with your career and your life. But when you force yourself to stop for a few minutes and actually think about it and write it down…you may be surprised by how little you actually know about your goals, your strengths, your weaknesses, and what you want to accomplish.&lt;/p&gt;

&lt;p&gt;This is specially true when you’re starting your career. Our industry is quite huge. When you’re fresh out of college, young and inexperienced, the sheer amount of options to choose from can be overwhelming. Should I work at a start-up or a large company? Maybe follow the freelancing path? Ruby On Rails or Node.js? So many questions…&lt;/p&gt;

&lt;p&gt;Soft Skills offers some help here. The first section of the book covers, among other things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;employment options (freelancer vs employee vs entrepreneur);&lt;/li&gt;
  &lt;li&gt;kinds of specialties for software developers;&lt;/li&gt;
  &lt;li&gt;kinds of companies you might work for;&lt;/li&gt;
  &lt;li&gt;advice for working remotely.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Section 4 (Productivity) is probably my favorite. The thing is: left to my own devices, I’m not that productive. Shame on me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1470788220/shame_mivvrv.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve been fighting procrastination since college. I tried a lot of to-do apps and productivity techniques. I read &lt;a href=&quot;https://www.amazon.com/Getting-Things-Done-Stress-Free-Productivity-ebook/dp/B000WH7PKY#navbar&quot;&gt;David Allen’s Getting Things Done&lt;/a&gt; every year. I read &lt;a href=&quot;http://lifehacker.com/&quot;&gt;Lifehacker&lt;/a&gt; almost on a daily basis. I even listen to a &lt;a href=&quot;https://www.relay.fm/cortex&quot;&gt;podcast that is mostly about work and productivity&lt;/a&gt;. And yet, I’m still not as productive as I’d like to be, even though I’ve been making progress.&lt;/p&gt;

&lt;p&gt;Those of you who can relate to this feeling will probably find some value in &lt;em&gt;Soft Skills&lt;/em&gt;. John covers a lot here, including the formation of habits, the importance of having a routine, and what are the major time wasters you should try to eliminate from your life. He also covers the &lt;a href=&quot;https://en.wikipedia.org/wiki/Pomodoro_Technique&quot;&gt;Pomodoro technique&lt;/a&gt; and his personal productivity system. He even talks about burnout, which can be a real issue in our industry and you definitely should be prepared to deal with it in your career.&lt;/p&gt;

&lt;p&gt;One common criticism that “Soft Skills” receives - and some people extend this criticism to all of John’s work - is that it has a very market-y vibe. This is kind of true, I’d say. But I don’t necessarily see it as a bad thing.&lt;/p&gt;

&lt;p&gt;A few years ago, back in college, I’ve attended a talk in which the speaker said something along the lines of “it doesn’t matter if you’re the best programmer in the world if no one knows that”.&lt;/p&gt;

&lt;p&gt;For many (most?) developers, the word marketing has a very negative connotation. It’s understandable, since we’ve all seen our share of shady and manipulative marketing tactics in our lives. 
What you need to understand here is that marketing is something that we all do, all the time, even if you don’t call it that. What is a job interview, if not a sales pitch?&lt;/p&gt;

&lt;p&gt;Since marketing is something that you must do, it’s worth doing right and deliberately. &lt;strong&gt;This is where &lt;em&gt;Soft Skills&lt;/em&gt; shines&lt;/strong&gt;, in my opinion. It offers advice about treating your career as a business and your name as a brand. It also explains what exactly a brand is, what is its purpose, its components, and how you can &lt;strong&gt;create and establish your brand by generating value for others&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Sections 3 and 6 (&lt;em&gt;Learning&lt;/em&gt; and &lt;em&gt;Fitness&lt;/em&gt;, respectively) also deserve honorable mentions, but I won’t cover them in detail here for brevity sake. Go read the book!&lt;/p&gt;

&lt;h2 id=&quot;the-bad&quot;&gt;The Bad&lt;/h2&gt;

&lt;p&gt;Now, let’s turn to the not-so-bright side and talk about some of the cons about &lt;em&gt;Soft Skills&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Some of the chapters are really, really short. Yes, I know that not so many paragraphs ago I praised the brevity of the chapters. Now am I speaking the opposite?&lt;/p&gt;

&lt;p&gt;I don’t mind a chapter being short if it provides values and insights. In fact, as I said earlier, I’d rather read a short chapter over a long one, if both of them provides the same value.&lt;/p&gt;

&lt;p&gt;But the thing is: some chapters provide too little value. They would be better off as a paragraph in another section.&lt;/p&gt;

&lt;p&gt;For instance. Chapter 18, “Don’t get religious about technology”, has three pages, in which John tell us not to get too much attached to particular languages, frameworks, operating systems and so on. Great advice, totally agree on that. How many  hours have been wasted on the internet, in endless debates of the “tabs vs spaces” kind? Probably much more than we’d like to know. But this message could easily be summarized in a short paragraph or section in another chapter.&lt;/p&gt;

&lt;p&gt;The book suffers from the opposite problem as well. Some subjects would probably benefit from a little more depth. In chapter 25, “Writing books and articles that attract a following”, John says that, in order to publish a book by traditional means, you should write a proposal, to try to pitch your book to publishers. But he stops there, &lt;strong&gt;without providing an example or template of what such proposal should look like&lt;/strong&gt;, which would be incredible valuable for the wannabe author in his audience.&lt;/p&gt;

&lt;p&gt;Some of the advice in &lt;em&gt;Soft Skill&lt;/em&gt; sound…weird. I particularly disliked John’s advice to hire a professional resume writer. In our field, in the present day, resumes aren’t much more than a formality IMHO.
Provided that your resume it’s not completely awful (i.e. contains a lot of spelling mistakes, it’s designed in a nonsensical way, it lacks essential information, etc) it probably won’t harm you. There are way more important factors that your prospective employer takes into account.&lt;/p&gt;

&lt;h2 id=&quot;the-ugly&quot;&gt;The Ugly&lt;/h2&gt;

&lt;p&gt;Almost every software development book has an ugly and/or weird cover, and &lt;strong&gt;&lt;em&gt;Soft Skills&lt;/em&gt;&lt;/strong&gt; is no exception. But who cares? I just &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Good,_the_Bad_and_the_Ugly&quot;&gt;wanted to make that reference :P&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Soft Skills: The software developer’s life manual&lt;/em&gt; was a fun read. John offers some great insights, specially in regards to learning techniques, career and productivity.&lt;/p&gt;

&lt;p&gt;There are some cons, of course, as I’ve said. Some of the advice offered just don’t make sense to me. I can understand that they probably worked out for John, tough.&lt;/p&gt;

&lt;p&gt;My approach on these types of books is: keep what is valuable, ignore the rest. And I can safely say that I’ve found a good deal of valuable content in &lt;em&gt;Soft Skills&lt;/em&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Aug 2016 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/en/book-review-soft-skills/</link>
        <guid isPermaLink="true">http://carlosschults.net/en/book-review-soft-skills/</guid>
        
        <category>book review</category>
        
        
      </item>
    
      <item>
        <title>Value and reference types in C#, Part 2 - Why can&#39;t a DateTime be null?</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1466341001/csharp-min_buiizq.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“Why is not allowed to assign &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; to a DateTime?” Again and again, this question keeps showing up on StackOverflow and similar sites. Different phrasing, maybe a different type &lt;a href=&quot;http://stackoverflow.com/questions/6191339/why-type-int-is-never-equal-to-null&quot;&gt;(“Why type “int” is never equal to ‘null’?”)&lt;/a&gt;, but the same question, in essence. Which is only natural, considering that probably thousands of developers join the field every year.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;The short answer is: because DateTime/int/float/whatever is a &lt;strong&gt;value type&lt;/strong&gt;, and value types can never be &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;. Only reference types can be &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That’s great but…why???&lt;/p&gt;

&lt;p&gt;I mean, at some point, the C# designers had to make that call. They deliberately decided that &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; can’t be assigned to a value type. Is there something intrinsic to value types that prevent them from being &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;? Maybe it has something to do with the stack and the heap?&lt;/p&gt;

&lt;p&gt;Well, I think before we try to answer those questions, it’d be helpful to get a step back and think about other question.&lt;/p&gt;

&lt;h2 id=&quot;what-exactly-is-null&quot;&gt;What exactly is ‘null’?&lt;/h2&gt;

&lt;p&gt;You probably think of &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; as a way to represent a missing piece of information. Something that is unknown, absent or irrelevant. Maybe a piece of information that isn’t where it’s supposed to be &lt;em&gt;yet&lt;/em&gt;, but it might be in the future.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://carlosschults.net/en/value-reference-types-in-csharp/&quot;&gt;In the previous post about reference and value types&lt;/a&gt;, we learned that a variable of a reference type &lt;strong&gt;contains a reference that points to an instance of that type&lt;/strong&gt;. But when &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; is assigned to the variable, what does the variable contain? Nothing?&lt;/p&gt;

&lt;p&gt;Not exactly. Even though &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; basically means nothing, this “nothing” has to be represented in some way in the machine’s memory.&lt;/p&gt;

&lt;p&gt;In C#, the &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; keyword represents a &lt;strong&gt;null reference&lt;/strong&gt;, which is a reference that doesn’t point to any object. 
In practice, the &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; value is represented as all zero bits.&lt;/p&gt;

&lt;p&gt;Of course, this is just an implementation detail. It could be implemented in different ways, so this isn’t really relevant for us. What you need to understand is, you need something to represent nothing. You need some kind of special value that means “this value is missing” or “this value is unknown”.&lt;/p&gt;

&lt;p&gt;Once you understand this, it becomes easier to see what the problem is with value types.&lt;/p&gt;

&lt;h2 id=&quot;how-would-you-represent-null-for-a-value-type&quot;&gt;How would you represent null for a value type?&lt;/h2&gt;

&lt;p&gt;To understand why would be complicated to represent &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; using a value type, you must bear in mind that value types usually have a range of possible values that they’re able to represent.&lt;/p&gt;

&lt;p&gt;It’s easier to get this with an example. So, consider the &lt;a href=&quot;https://msdn.microsoft.com/pt-br/library/system.byte%28v=vs.110%29.aspx&quot;&gt;byte&lt;/a&gt; value type.&lt;/p&gt;

&lt;p&gt;This type can represent one byte of possible values. Since 2^8 = 256, it can represent 256 values. It is also unsigned, meaning it can only represent values greater than or equals to zero. Thus, the range of possible values that the byte type can represent is &lt;strong&gt;0 to 255.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00000000 =&amp;gt; 0
00000001 =&amp;gt; 1
00000010 =&amp;gt; 2
    .        .
    .        .
    .        .
11111111 =&amp;gt; 255
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now comes the tricky part. If the C# language designers wanted the byte type to be nullable, they’d have to pick a value from the range and elect it as the &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; value. Let’s imagine they picked zero as the &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; value for &lt;code class=&quot;highlighter-rouge&quot;&gt;byte&lt;/code&gt;. If that was the case, &lt;strong&gt;we wouldn’t be able to use zero as a valid value never again!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That’s the whole point: for value types to be nullable, it is necessary to sacrifice one of the possible values of the range to represent the &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;Jon Skeet, author of C# In Depth, puts it better than me:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You’ve got to be able to store the values 0-255 in that variable; otherwise it’s useless for reading arbitrary binary data. With the 256 normal values
and one &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; value, you’d have to cope with a total of 257 values, and there’s no way of squeezing that many values into a single byte.&lt;/p&gt;

  &lt;p&gt;The designers could’ve decided that every value type would have an extra flag bit somewhere determining whether a value was &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; or contained real data, but the memory usage implications 
are horrible, not to mention the fact that you’d have to check the flag every time you wanted the use the value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, there is nothing &lt;strong&gt;in principle&lt;/strong&gt; that prevents value types from being &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;. It’d just be so complicated that  the C# designers considered that the benefits of doing so don’t outweigh the costs.&lt;/p&gt;

&lt;h2 id=&quot;but-i-really-wantneed-a-nullable-value-type-what-can-i-do&quot;&gt;But I really want/need a nullable value type. What can I do?&lt;/h2&gt;

&lt;p&gt;You now hopefully understand the complications involved in representing &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; for a value type, and why the C# developers decided against it. But, what if you really need to do this? One common scenario is when you’re fetching data from a relational database. What should you do?&lt;/p&gt;

&lt;p&gt;Well, thankfully, there’s an easy solution. Even though “normal” value types can’t be &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, C# 2 introduced the Nullable&lt;t&gt; structure, which allows you to assign `null` to pretty much anything.&lt;/t&gt;&lt;/p&gt;

&lt;p&gt;I’ll talk about nullable types in the next article. As a bonus, you’ll learn a bit about another nice feature called &lt;em&gt;generics&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Stay tuned!&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Jun 2016 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/en/value-reference-types-in-csharp-part-2/</link>
        <guid isPermaLink="true">http://carlosschults.net/en/value-reference-types-in-csharp-part-2/</guid>
        
        <category>csharp</category>
        
        <category>beginners</category>
        
        <category>oop</category>
        
        <category>type system</category>
        
        
      </item>
    
      <item>
        <title>Ten tips to help you choose good names</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1462225938/baby-name-min_nosetz.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are only two hard things in Computer Science: cache invalidation and naming things.&lt;/p&gt;

  &lt;p&gt;Phil Karlton&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Do you want to write great code? Clean, understandable, human-readable code? Well, there are several skills you need to acquire. But I’d say #1 on the list is “Picking Good Names”.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Choosing great names for your classes, methods, variables and the like is essential. Wisely chosen names often are the difference between good and awful code.&lt;/p&gt;

&lt;p&gt;But what exactly is a good name?  Even though there are some generally accepted guidelines, I’m afraid there isn’t a real consensus. (As it is with a lot of topics in our field, I’d say).&lt;/p&gt;

&lt;p&gt;So, today I’m going to talk about naming conventions and principles that I try to use whenever I’m coding. It’s a mix of what I learned in college, studying by my own and working as a professional developer. It’s been useful to me, so I hope it’s going to be useful to you as well.&lt;/p&gt;

&lt;p&gt;Some of the tips I’m going show you here today come from the book “Clean Code”, by Robert C. Martin (Uncle Bob). It’s one of my favorite programming books, and I’ll write a review on it sometime soon. Stay tuned!&lt;/p&gt;

&lt;h2 id=&quot;use-self-explanatory-names&quot;&gt;0. Use self-explanatory names&lt;/h2&gt;

&lt;p&gt;What your variable/class/whatever does? How it’s supposed to be used? Choose a name that answers these questions.&lt;/p&gt;

&lt;p&gt;Some people have the misguided notion that shorter names are always better. I can’t understand this. Are they trying to save keystrokes or something?&lt;/p&gt;

&lt;p&gt;Let’s say you’re browsing a code base and you see some code like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deadline&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You could argue that this code is fine. The variable’s meaning is perfectly expressed in the comment. Great, but remember that the variable will probably be used in other points, away from the declaration and the comment.&lt;/p&gt;

&lt;p&gt;So…why not just drop the comment and use the comment’s text as the variable’s name?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daysUntilDealine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;use-abbreviations-only-when-theyre-widely-known&quot;&gt;1. Use abbreviations only when they’re widely known&lt;/h2&gt;

&lt;p&gt;It would be crazy to name a variable “ServiceUniformResourceLocator” instead of “ServiceUrl”. Every developer knows what a Url is. The same thing with Ftp, UI, IO, and so on. So, it’s ok to use abbreviations to name things, but only if they are widely known and used. It would be counterproductive not to do so.&lt;/p&gt;

&lt;p&gt;By the way. When I say “widely known”, I don’t necessarily mean &lt;em&gt;worldwide known&lt;/em&gt;. Of course you can use abbreviations that are common in your business domain. It is considered a best practice to program as close as possible to the customer’s language. So, if your fellow developers and the business people are comfortable with the abbreviations, there’s no problem at all in using them.&lt;/p&gt;

&lt;h2 id=&quot;choose-clarity-over-brevity&quot;&gt;2. Choose clarity over brevity&lt;/h2&gt;

&lt;p&gt;This is somewhat related to the first point. All else being equal, shorter names are better. But one day you’ll have to choose between clarity and brevity. When that day comes, always pick clarity. Six months down the road, when you have to revisit that code, you’re going to thank yourself.&lt;/p&gt;

&lt;h2 id=&quot;use-widely-accepted-conventions-most-of-the-time&quot;&gt;3. Use widely accepted conventions (most of the time)&lt;/h2&gt;

&lt;p&gt;There are very few points in the book “Clean Code” that I disagree with. One of them is Uncle Bob’s recommendation to not start interface names with a capital “I”.  He argues that this practice is reminiscent of Hungarian notation, and thus should die. Even though I understand why he thinks like this, I’m still starting my interface names with an “I”.&lt;/p&gt;

&lt;p&gt;Why? One simple reason: starting interface names with an “I” is a very widespread and accepted convention in the .Net community. When you go against an established convention, you risk alienating developers who are used to that convention, like potential new team members or open-source projects contributors.&lt;/p&gt;

&lt;p&gt;I think you should abandon a widely accepted convention only when the benefit of doing so greatly outweighs the costs. And I don’t think that’s the case here.&lt;/p&gt;

&lt;h2 id=&quot;dont-use-hungarian-notation&quot;&gt;4. Don’t use Hungarian notation&lt;/h2&gt;

&lt;p&gt;Maybe you’ve heard about Hungarian Notation, maybe you haven’t. But I bet you’ve seen it, or even used it yourself, even if the name doesn’t ring a bell immediately.&lt;/p&gt;

&lt;p&gt;So, what is this Hungarian thing? Our friend Wikipedia comes to our rescue:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hungarian notation is an identifier naming convention in computer programming, in which the name of a variable 
 or function indicates its type or intended use.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Hungarian_notation&quot;&gt;Wikipedia: Hungarian Notation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, in a nutshell, Hungarian notation is encoding the type of the variable in its name. So, if I have an int variable meant to store the age of a student, I’d call it &lt;code class=&quot;highlighter-rouge&quot;&gt;iStudentAge&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;intStudentAge&lt;/code&gt;. Similarly, a string variable supposed to store a product’s description would be called &lt;code class=&quot;highlighter-rouge&quot;&gt;sProductDescription&lt;/code&gt;, or even &lt;code class=&quot;highlighter-rouge&quot;&gt;strProductDescription&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And why is this bad? Here are a few reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First of all, it’s useless. If your variable has a self-explaining name (see item #0), it will give you a decent clue about its type. If you spot a variable called &lt;code class=&quot;highlighter-rouge&quot;&gt;productName&lt;/code&gt;, would you think it’s a floating-point number? Besides, most modern IDEs can tell you not only the variable’s type, but also if it’s a local variable,instance member or a method parameter, and even how many times it’s been referenced.&lt;/li&gt;
  &lt;li&gt;It can be misleading. People make mistakes, and it’s perfectly possible to change the variable’s type but forget to also change its name to reflect the new type. So now you have a variable prefixed with “int” but it’s actually a long.&lt;/li&gt;
  &lt;li&gt;It makes the names more difficult to pronounce, and this may complicate discussion about the code and the architecture of your application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stick-to-the-languageframeworkprojects-coding-style&quot;&gt;5. Stick to the language/framework/project’s coding style&lt;/h2&gt;

&lt;p&gt;Most C# developers tend to use CamelCase to name local variables, instance variables and methods parameters, as in &lt;code class=&quot;highlighter-rouge&quot;&gt;productName&lt;/code&gt;. In Ruby, for instance, the recommended style is &lt;code class=&quot;highlighter-rouge&quot;&gt;snake_case&lt;/code&gt;, as in &lt;code class=&quot;highlighter-rouge&quot;&gt;product_name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Development frameworks and open-source projects might have their own guidelines and standards as well.&lt;/p&gt;

&lt;p&gt;It would be pointless to fight against established standards, due to a matter of taste and preference. If you’re writing Ruby code, write the way the Ruby community expects. The same with Java, C#, PHP, what have you.&lt;/p&gt;

&lt;p&gt;It’s like they say: “When in Rome, do as the Romans do”.&lt;/p&gt;

&lt;h2 id=&quot;method-names-should-start-with-a-verb&quot;&gt;6. Method names should start with a verb&lt;/h2&gt;

&lt;p&gt;This one is really short. Methods are usually actions that an object can perform. As such, their names should start with a verb that indicates the action to be performed, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;PrintReport()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DrawShape(IShape shape)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;class-names-should-be-nouns&quot;&gt;7. Class names should be nouns&lt;/h2&gt;

&lt;p&gt;Likewise, class names should be nouns, like &lt;code class=&quot;highlighter-rouge&quot;&gt;Product&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Customer&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Student&lt;/code&gt;. Avoid using the words like &lt;code class=&quot;highlighter-rouge&quot;&gt;Manager&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Data&lt;/code&gt;, because they add little or no value.&lt;/p&gt;

&lt;h2 id=&quot;property-names-should-be-nouns-or-adjective-phrases-c-specific&quot;&gt;8. Property names should be nouns or adjective phrases (C# specific)&lt;/h2&gt;

&lt;p&gt;Properties should be names with nouns, noun phrases or adjectives. When naming boolean properties, you may add the prefixes &lt;code class=&quot;highlighter-rouge&quot;&gt;Can&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Is&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Has&lt;/code&gt;, when doing so provides value to the caller.&lt;/p&gt;

&lt;h2 id=&quot;use-pronounceablesearchable-names&quot;&gt;9. Use pronounceable/searchable names&lt;/h2&gt;

&lt;p&gt;Work hard to choose names that are pronounceable. When you pick a name that is hard or impossible to pronounce, you discourage discussion about your code, which is never a good thing.&lt;/p&gt;

&lt;p&gt;Likewise, try to avoid names with a single letter. Among other reasons, they may give you a very hard time when you have to search for them! They make good names only for loop control variables or in lambda expressions. But even then, only when the scope is super short.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Choosing names is really hard. A name should express purpose, intention, meaning. It doesn’t necessarily need to be clever – but there are certain tricky situations that will require a little bit of cleverness.&lt;/p&gt;

&lt;p&gt;A name should clearly express the purpose of the entity being named. But there are a lot of things that are very complex by their own nature, and it’s not so easy to come up with a perfect name for a very complex concept.&lt;/p&gt;

&lt;p&gt;Sometimes, the difficulty you experience while choosing a name is a symptom of another problem, like a messy   architecture, for instance. If you can’t decide between five options when naming a class, maybe the class is violating the Single Responsibility Principle (it’s trying to do more than one thing).&lt;/p&gt;

&lt;p&gt;On the other hand, if you feel like calling a dozen classes the same thing…maybe they belong together as a single class.&lt;/p&gt;

&lt;p&gt;Choosing names is ultimately about communication. And I think that’s why it’s such a hard task. Because we, developers, are not necessarily famous for our communication skills.&lt;/p&gt;

&lt;p&gt;In “Clean Code”, at the end of the chapter about choosing good names, Uncle Bob writes:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The hardest thing about choosing good names is that it requires good descriptive skills and a shared cultural background. This is a teaching issue rather than a technical, business, or management issue. As a result, many people in this field do not do it very well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don’t be like most people in our field. Do the hard work and learn how to name things. You’ll thank yourself in the future.&lt;/p&gt;
</description>
        <pubDate>Sun, 22 May 2016 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/en/how-to-choose-good-names/</link>
        <guid isPermaLink="true">http://carlosschults.net/en/how-to-choose-good-names/</guid>
        
        <category>best practices</category>
        
        
      </item>
    
      <item>
        <title>Unit testing for beginners - Part 1</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1459979937/testes-unitarios-iniciantes-min_povcse.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Maybe, some time in your career, you might have worked on an incredibly complex application, with an enormous, poorly-documented code base, full of hacks, unnecessary couplings, with a confused architecture and no specifications at all. That kind of app you’d call a miracle if it even works. Maybe I’ve just described your current project!
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;In this type of project, it’s very common for the developers to get afraid of touching the code, cause they know that if they do, something is going to break for sure. And worse: it’s going to break in production, most likely.&lt;/p&gt;

&lt;p&gt;Now, imagine that your application is completely covered by an alarm system. Every time a feature stops working, the alarm goes off. The developers are immediately notified, and someone can take action and solve the problem as soon as possible.&lt;/p&gt;

&lt;p&gt;Imagine yet that this alarm system consists of hundreds of smaller systems. Each subsystem must watch a very specific part of your application. In order for the main system to function properly, each subsystem must be totally independent from the others.&lt;/p&gt;

&lt;p&gt;The adoption of such a system would bring several benefits. First of all, developers would lose the fear of touching the code. Code refactoring would become easier to do, and it would be done more often. As a consequence, the quality of the code would improve.&lt;/p&gt;

&lt;p&gt;The development process itself would be simplified. The alarm system would dramatically reduce the need for slow manual tests, thus speeding the release to the users.&lt;/p&gt;

&lt;p&gt;Finally, the need for independence between the subsystems would promote the reduction of coupling between modules of the application.&lt;/p&gt;

&lt;p&gt;It sounds too good to be true? Well, it isn’t. This “alarm system” is exactly the benefit you get after adding a suite of unit tests to your application.&lt;/p&gt;

&lt;h2 id=&quot;what-are-unit-tests&quot;&gt;What are unit tests?&lt;/h2&gt;

&lt;p&gt;Let’s see what Wikipedia tells us:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In computer programming, unit testing is a software testing method by which individual units of source code, […] are tested to determine whether they are fit for use. Intuitively, one can view a unit as the smallest testable part of an application.  […]
 Unit tests are typically written and run by software developers to ensure that code meets its design and behaves as intended.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first thing worth mentioning is that unit tests &lt;strong&gt;don’t have the goal of testing the system as a whole&lt;/strong&gt;. On the contrary, they test small pieces of the application - the units. And what is a unit? There are several conflicting points of view on this, several “schools of thought”. But it’s safe to say that, in a context of Object Oriented Programming, most people would consider the class as being a unit.&lt;/p&gt;

&lt;p&gt;Right after this, we see that unit tests are usually written and run by programmers. This is interesting for two reasons: first, it apparently goes against the idea that programmers don’t make good testers (I’m going back to this point later). And more importantly than that, it shows the principal feature of unit tests: they are &lt;strong&gt;automated&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Bear in mind that there are a lot of types of automated tests, but here we’re only talking about unit tests (which, according to several authors, such as &lt;a href=&quot;http://martinfowler.com/bliki/TestPyramid.html&quot;&gt;Martin Fowler&lt;/a&gt;, are the ones who benefits the application the most).&lt;/p&gt;

&lt;p&gt;In practice, unit tests are classes that contains methods who test small and isolated pieces of functionality. These classes are created with the aid of a test framework (such as JUnit in Java, NUnit or Microsoft Test in .Net). Then, the tests can be run via command line, by your IDE or even by an automated build service.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1460211309/teste00_bnsbfl.png&quot; alt=&quot;Example of test case in C#&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the tests are run, you get an immediate feedback about which tests failed and which ones succeeded, along with the run time of each one of them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1459979476/teste01_ciglca.png&quot; alt=&quot;Windows displaying the result of a test run&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With this feedback, you can decide on your best course of action. Ideally, a failing test should signal something wrong in the production code. The production code should then be fixed so the test can pass.&lt;/p&gt;

&lt;h2 id=&quot;benefits-of-unit-tests&quot;&gt;Benefits of unit tests&lt;/h2&gt;

&lt;p&gt;In the beginning of the post, while using the alarm system metaphor, I’ve talked about some of the benefits that unit tests can provide, for instance:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;they promote and facilitate code refactoring;&lt;/li&gt;
  &lt;li&gt;they promote architectural improvement of the system;&lt;/li&gt;
  &lt;li&gt;they can simplify and accelerate the release of the product to the final users;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another benefit worth mention is that unit tests &lt;strong&gt;document the code&lt;/strong&gt;. Think of it: for each production class in your system, there are several test cases, that exercise every possible use of this class. A good test suite could help a recent hire to quickly gain familiarity with the code base.&lt;/p&gt;

&lt;p&gt;That is, the best type of documentation: the one that is alive, executable, always up-to-date, and never lies.&lt;/p&gt;

&lt;p&gt;We must also mention that a good and comprehensive test suite helps to prevent bug regression. It’s a best practice to create a new test every time a new bug is found. That way, if the bug ever comes back due to a change, the test is going to show you.&lt;/p&gt;

&lt;p&gt;Finally, one of the more important benefits that test automation can provide is cost reduction. Oddly enough, I don’t see this benefit being talked about too much - maybe because it’s more related to the business side of things. Let’s say that your team tests the whole application, every time your about to release. You use four testers, working full-time, during two weeks. Just do the math and you’ll see that &lt;strong&gt;manual tests are freaking expensive!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Worse yet: they are expensive twice. First, there’s the cost itself, that you can calculate with the formula &lt;em&gt;hourly rate of tester x number of testers x hours spent in testing&lt;/em&gt;. Pretty straightforward, no surprises here.&lt;/p&gt;

&lt;p&gt;But, besides that, there is also an &lt;a href=&quot;https://en.wikipedia.org/wiki/Opportunity_cost&quot;&gt;opportunity cost&lt;/a&gt;: if professionals are spending time doing manual tests that could be automated, then they are &lt;em&gt;NOT&lt;/em&gt; doing other tasks that could have a greater ROI to the company.&lt;/p&gt;

&lt;h2 id=&quot;common-misconceptions&quot;&gt;Common misconceptions&lt;/h2&gt;

&lt;p&gt;In this section, I’m going to try to clarify some of the myths and misconceptions that some people have about unit testing.&lt;/p&gt;

&lt;h3 id=&quot;programmers-shouldnt-write-tests-because-they-are-bad-testers&quot;&gt;Programmers shouldn’t write tests, because they are bad testers&lt;/h3&gt;

&lt;p&gt;There is a widespread notion that programmers shouldn’t test their own code. The rationale for this is that the developers would unconsciously avoid to use the app in a way that would break it. And from experience I can say that this indeed happens. I’ve lost count of how many times a coworker found bugs in an app I made after literally &lt;strong&gt;seconds&lt;/strong&gt; of using it, in spite of the fact that I had already tested it a lot without making it fail.&lt;/p&gt;

&lt;p&gt;The important point here is: &lt;strong&gt;there are tests and tests&lt;/strong&gt;. Often, when people say that developers shouldn’t test, they’re talking about system tests, also called end-to-end tests. Such tests mean to test the system as a whole, which is not the goal of unit tests, as I said before.&lt;/p&gt;

&lt;p&gt;Maybe, it’s just lack of information: the person probably doesn’t know the nature and purpose of unit tests, and mistake them for end-to-end tests.&lt;/p&gt;

&lt;h2 id=&quot;writing-unit-tests-is-a-waste-of-time-its-like-coding-the-same-thing-twice&quot;&gt;Writing unit tests is a waste of time; it’s like coding the same thing twice&lt;/h2&gt;

&lt;p&gt;When you try to convince management that unit tests are worth it, it would be wise to focus on cost reduction. But, what about the developers? How to convince them to spend time writing test code, when they’re already in tight deadlines and under a lot of pressure?&lt;/p&gt;

&lt;p&gt;So, don’t be so surprised if you try to sell unit testing to your fellow developers, and they just say to you: “Wast of time. We’re not going to do that”.&lt;/p&gt;

&lt;p&gt;What these people don’t grasp is that &lt;em&gt;they’re already testing their own code all the time, even if they don’t call it that way&lt;/em&gt;. Not convinced? Well, I bet your development work-flow looks something like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write a bit of code&lt;/li&gt;
  &lt;li&gt;Compile&lt;/li&gt;
  &lt;li&gt;Run the app, test the new feature
    &lt;ul&gt;
      &lt;li&gt;If it works, start to code next functionality;&lt;/li&gt;
      &lt;li&gt;If if doesn’t, debug until you find what’s wrong, then fix it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Repeat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What we propose is just to swap the “write production code -&amp;gt; compile -&amp;gt; test manually -&amp;gt; debug -&amp;gt; repeat” cycle for the “write production code -&amp;gt; write test code -&amp;gt; run tests -&amp;gt; fix production code if necessary”.&lt;/p&gt;

&lt;p&gt;You could argue that the cycles are the same - they kind of are. But the big advantage of unit tests is that, once written, they are easily repeatable until the end of the project’s life. You “waste time” only once. Or better, you &lt;strong&gt;invest&lt;/strong&gt; time and effort in the beginning, in order to create the tests, and seize the benefits for indefinite time.&lt;/p&gt;

&lt;h3 id=&quot;unit-tests-replace-all-manual-tests&quot;&gt;Unit tests replace all manual tests&lt;/h3&gt;

&lt;p&gt;Unit tests are not the only types of tests that can be beneficial to a project. We can also use several other types of automated tests such as &lt;strong&gt;integration tests&lt;/strong&gt; and &lt;em&gt;acceptance tests&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1460217453/testing_triangle-300x233_nzq8kx.jpg&quot; alt=&quot;Testing pyramid, showing the ideal ratio of different types of software testing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That doesn’t mean that manual testing should be extinct. On the contrary, manual tests still have an important role in quality assurance processes. Ideally, manual tests should focus on the areas that can’t be automated, like usability testing.&lt;/p&gt;

&lt;p&gt;In regards to agile methodologies, it is key that the Product Owner/Client/Business Person approves and accepts the user stories before they are included in a release.&lt;/p&gt;

&lt;p&gt;Exploratory manual tests, that doesn’t follow a script, can be useful to detect certain kinds of bugs. Most automated test cases tend to focus on the “Happy Path”, that is, the scenario in which everything went right.
In real life, is very common for the users to use the application in…hm…“creative” ways. So, when you put the system under stress, using it in ways that the developers never intended, nasty bugs that would otherwise keep hidden, can show up.&lt;/p&gt;

&lt;p&gt;Of course, once the bug is found, you should immediately write a test that exposes it. That way, if the bug ever comes back, it’ll be easily detected.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Unit testing - and automated software testing, in general - is a huge subject. There are a lot of books about it, there are master’s theses about it. So, of course I can’t do justice to this subject with a mere blog post.&lt;/p&gt;

&lt;p&gt;But I sincerely hope that I had made a proper introduction to unit tests and clarified some of the questions that beginners usually have. If you have a question, suggestion or criticism, the comment are is all yours.&lt;/p&gt;

&lt;p&gt;This post is the first one in a series dedicated to unit testing.
Next post: time to get your hands dirty! I’m going to show how to create your first unit test!&lt;/p&gt;

&lt;p&gt;See you there!&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Apr 2016 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/en/unit-testing-for-beginners-part1/</link>
        <guid isPermaLink="true">http://carlosschults.net/en/unit-testing-for-beginners-part1/</guid>
        
        <category>software testing</category>
        
        <category>unit testing</category>
        
        <category>automated tests</category>
        
        <category>agile</category>
        
        
      </item>
    
      <item>
        <title>Book Review: The Pragmatic Programmer</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1457998345/the-pragmatic-programmer-review-min_tulprt.png&quot; alt=&quot;&quot; /&gt;
If I had to choose one book, just one book, to elect as the number one must-read to every programmer, I’d choose “The Pragmatic Programmer”. It’s a no-brainer. It’s just that good. 
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;The Pragmatic Programmer: From Journeyman to Master&lt;/em&gt;&lt;/strong&gt; is a book about software engineering by Andrew Hunt and David Thomas, published in October 1999. The book is organized in short, self-contained chapters, that you can read in any order you’d like. Each chapter features tips (there are 70 in total) that offer advice on several subjects, like estimating, testing, debugging, how to prototype, how to communicate effectively, best practices about exception handling, and a whole lot more.&lt;/p&gt;

&lt;p&gt;Each chapter also has exercises and/or challenges. What’s the difference? All the exercises have answers, and you can find them in the appendix in the end of the book. The challenges, on the other hand, are not supposed to have clear answers. They are designed to make you think, reflect and (guess what!) challenge yourself and the way you currently do things.&lt;/p&gt;

&lt;p&gt;One thing I really like about this book is that it is very practical. Of course theory has its value and its place, and I personally believe that a lot of programmers lack knowledge in the fundamentals of Computer Science and that really hurts our industry. That said, I think it’s awesome that two programmers took the time to translate their years of experience and knowledge into a book that goes straight to the point with very practical advice that you can put in use right away!&lt;/p&gt;

&lt;p&gt;Another point I’d like to highlight is how easy and fun it is to read this book. Its chapters and sections are short, providing a very comfortable pace. It also has a great sense of humor. Not the type that makes you laugh hysterically, but the type that makes you feel at ease, as if the book was a conversation. But I think the number one thing I love about “The Pragmatic Programmer” is that it isn’t really focused on code, or tied to a particular technology, or to particular tools. Sure, it has its fair share of code samples (mostly Java and C/C++). Yeah, it mentions some particular tools and applications. But for the most part, &lt;strong&gt;this book is about a mindset&lt;/strong&gt;. A certain way of thinking, a way of approaching problems and challenges. Once this mindset, this “
Pragmatic Philosophy” is really ingrained in your way of thinking, you’ll be able to apply it to a lot of areas in your professional life, not just coding. And I think this is the real strength of this book. Had it been focused on tools or a specific language, I probably wouldn’t be writing about it now, almost 17 year later.&lt;/p&gt;

&lt;h2 id=&quot;a-little-bit-of-cons&quot;&gt;A little bit of cons&lt;/h2&gt;

&lt;p&gt;Of course, now that I have sang the many praises of this book, let me talk about some bad things in it. And, to be honest, it’s not that easy to find something bad to say about it.But if there’s one thing that I think most readers would agree, is that some parts of it are somewhat outdated.&lt;/p&gt;

&lt;p&gt;I mean, come on! It’s been almost two decades! It’s amazing for a software development book to remain influential for this long. Of course at least some parts &lt;em&gt;must&lt;/em&gt; be outdated. For example, one of the tips is to always use version control. Nowadays, version control is something that we take for granted, every developer worth his/her salt knows what Github is, so it’s almost funny to read that recommendation. It is like when you watch Steve Jobs giving the first iPhone presentation, and the audience is mesmerized about its capabilities, that are weak by today’s standards, but were amazing for them at the time. (Yeah, I know there are companies out there in which developers don’t even know about version control. My tip is: if you work in a place like this, try to evangelize version control to them. If you succeed, great! If you don’t, get out as soon as possible.)&lt;/p&gt;

&lt;p&gt;In another point of the book, they explain a technique called “tracer-bullet development”. The name may be a little strange, but when they start to explain it, you may find that it sounds a lot like the “minimum viable product” concept, that you may be familiar with from the agile methodologies.&lt;/p&gt;

&lt;p&gt;Which shouldn’t be a surprise at all, since Andy Thomas and Dave Hunt were among the signatories of the now legendary &lt;a href=&quot;http://agilemanifesto.org/&quot;&gt;Manifesto For Agile Software Development&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s why is so hard to find anything wrong with this book. You see, it may seem a little outdated &lt;strong&gt;today&lt;/strong&gt;, but that’s just because the authors were way ahead of their time. Some things that are commonplace and obvious today, we’re totally non-obvious and even counter-intuitive almost 20 years ago. It took a lot of vision to write this book, and for this, and all of the above, I think it’s a very worth read.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Mar 2016 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/en/book-review-pragmatic-programmer/</link>
        <guid isPermaLink="true">http://carlosschults.net/en/book-review-pragmatic-programmer/</guid>
        
        <category>book review</category>
        
        <category>agile</category>
        
        
      </item>
    
      <item>
        <title>Value and reference types in C#</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1466341001/csharp-min_buiizq.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is my first “real” post here on my blog, and I decided to talk about value types and reference types. This is somewhat of a basic subject, in the sense that it is something that you should already know if you write C# code for a living.But at the same time, it can be a little non-intuitive if you’re not an experienced developer.
&lt;!--more--&gt;
I’ll try to make this as simple and short as possible, so I won’t talk about string immutability, boxing, unboxing, and some other things with fancy names.
I’ll write about those in the future, but for today let’s focus on the basics.&lt;/p&gt;

&lt;p&gt;So, take a look at the following piece of code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The value of x is {x}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Outputs &quot;The value of x is 10&quot;
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The value of y is {y}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Outputs&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The value of y is 11&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;No surprises here, cause this is the exact behaviour you’d expect.&lt;br /&gt;
Now, suppose we have a class like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Profession&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Profession&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello! My name is {Name} and I&#39;m a {Profession}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, you do this:&lt;code&gt; &lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;   
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;programmer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// outputs &quot;Hello! My name is Mary and I&#39;m a programmer&quot;
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;person2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;person2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Profession&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;musician&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;person2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// outputs &quot;Hello! My name is John and I&#39;m a musician &quot;  
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello! My name is John and I&#39;m a musician &quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now is the time when beginners sometimes get confused. “This doesn’t make sense”, they say. “I’ve changed the value of one of the variables, and the other also changed.”&lt;/p&gt;

&lt;p&gt;Well, that is the wrong way to look at it. As it turns out,&lt;strong&gt;you didn’t really change the value of the variable&lt;/strong&gt;, in this case. And that’s the point.&lt;/p&gt;

&lt;p&gt;Remember the first example? Let’s take a look at it again, this time step by step:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;The figure show a sample of C# soure code, in which a variable is being declared and assigned the value 10&quot; src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1454161625/fig1_czxki5.png&quot; style=&quot;height:158px; width:250px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We declare the first variable and assign the value 10 to it. Now, somewhere inside the computer’s memory, there is a “box” labeled “x” which holds the value 10.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;&lt;img alt=&quot;The image show a sample of C# code, in which a variable y is being declared, and the value of x is assigned to it.&quot; src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1454161628/fig2_m1gxsd.png&quot; style=&quot;height:179px; width:250px&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We declare the second variable and assign the value of the first variable to it. Notice that the value is copied from x to y. Now we have two boxes, one labeled x, the other labeled y, and both of them hold the value 10.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;&lt;img alt=&quot;The image show a sample of C# code, in which a variable y gets incremented by 1.&quot; src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1454161625/fig3_esck9i.png&quot; style=&quot;height:172px; width:250px&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we increment the value of the variable y by 1. Notice that the value of x remained unchanged. Of course, because &lt;strong&gt;they have nothing to do with each other! &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On the other hand, something very different happens when you’re dealing with reference types. To understand that, let’s review the second example, step by step:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;&lt;img alt=&quot;The image show a sample of C# code, in which a variable is assigned a new instance of the Person class&quot; src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1454161628/fig4_kxmmuk.png&quot; style=&quot;height:257px; width:600px&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, we create a variable called person and assign to it a new instance of the Person class. Now, somewhere inside the computer’s memory, we have a box called “person”. Notice, however, that our variable person stores &lt;strong&gt;a reference that points to the instance of Person, instead of storing the instance itself!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;&lt;img alt=&quot;The image show a sample of C# code, in which a variable person2 is created and receives the value of the variable person.&quot; src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1454161623/fig5_aznix0.png&quot; style=&quot;height:340px; width:600px&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the second step, we create a variable called person2 and assign the value of the variable person to it. As in the previous example, the value from one variable is copied to the other. In this case, &lt;strong&gt;the value that is copied is the reference that points to the instance&lt;/strong&gt;. So now we have two variables whose values are references that point to the same instance of Person.&lt;/p&gt;

&lt;p&gt;Now, of course when you change the object’s data (e.g. alter the person’s name and/or profession), it seems that the two variables were altered. In fact, the variables’s values remain exactly the same: what was really changed was the object to which they point to.&lt;/p&gt;

&lt;p&gt;So, we could summarize that way: value types store data. When you assign the value of a value type variable to another, what gets copied is the data itself (like an integer, for example).&lt;br /&gt;
This is similar to when you copy a file from one folder and paste it somewhere else. You made a copy, but from now on, they are independent files and have nothing to do with each other.&lt;/p&gt;

&lt;p&gt;Reference types store a reference, that points to the data, which lives somewhere else in the machine’s memory. When you assign the value of a reference type variable to another, what gets copied is the reference.It can be useful to think of them as shortcuts to files. If you have one or more shortcuts that point to a particular file, when you make changes in the original file, those changes will be visible through the shortcuts. Because they’re just that, shortcuts.&lt;/p&gt;

&lt;h2 id=&quot;which-types-are-value-types&quot;&gt;Which types are value types?&lt;/h2&gt;

&lt;p&gt;According to MSDN, the value types are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All numeric data types&lt;/li&gt;
  &lt;li&gt;Boolean, Char, and Date&lt;/li&gt;
  &lt;li&gt;All structures&lt;/li&gt;
  &lt;li&gt;Enumerations&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;which-types-are-reference-types&quot;&gt;Which types are reference types?&lt;/h2&gt;

&lt;p&gt;Again, acording to MSDN:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;String&lt;/li&gt;
  &lt;li&gt;All arrays&lt;/li&gt;
  &lt;li&gt;Classes&lt;/li&gt;
  &lt;li&gt;Delegates&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wait-a-minute-string-is-a-reference-type&quot;&gt;Wait a minute! String is a reference type?!&lt;/h2&gt;

&lt;p&gt;Maybe you’re surprised to see String listed as a reference type. After all, it seems to behave as a value type. 
Well, the reason for this is because String is an &lt;strong&gt;immutable type&lt;/strong&gt;. As I said, I won’t talk about this today, but soon we’ll have a post all about System.String.&lt;/p&gt;

&lt;p&gt;OK, that’s it for today. I hope you guys enjoyed this post, and I’d love to hear your feedback.Have I expressed myself clearly enough? Have I said something innacurate - or even flat-out wrong?
Let me know in the comments, or &lt;a href=&quot;http://twitter.com/carlosschults&quot;&gt;reach me on twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://jonskeet.uk/csharp/references.html&quot;&gt;http://jonskeet.uk/csharp/references.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/t63sy5hs.aspx&quot;&gt;https://msdn.microsoft.com/en-us/library/t63sy5hs.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 30 Jan 2016 00:00:00 -0200</pubDate>
        <link>http://carlosschults.net/en/value-reference-types-in-csharp/</link>
        <guid isPermaLink="true">http://carlosschults.net/en/value-reference-types-in-csharp/</guid>
        
        <category>csharp</category>
        
        <category>beginners</category>
        
        <category>oop</category>
        
        <category>type system</category>
        
        
      </item>
    
      <item>
        <title>Share what you learn</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1440517439/share1038x437_mshqwf.jpg&quot; alt=&quot;&quot; /&gt;
Share what you learn. Write a blog post. Answer a question on Stack Overflow. Open-source your code. Create content! In our industry, this advice shows up very often, in all colours and shapes. And rightly so, I’d say. How many hours have you saved thanks to someone else’s post on their blog? Or to a well-crafted answer on Stack Overflow?&lt;/p&gt;

&lt;p&gt;How many times an open-source tool/library/whatever spared you from having to code it’s functionality from scratch? If I had to guess the answer to these questions, I’d say: a lot. 
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.akitaonrails.com/2014/08/29/milesimo-1000-post-no-blog#.VdzH9peC7lc&quot;&gt;Brazilian developer Rafael Rosa Fu talks about some of the benefits of content creation on this post&lt;/a&gt;, originally written in Portuguese:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Learning - in order to fix new skills you must practice them, when we write about what we learn we are reinforcing and expanding our knowledge by being “forced” to explain it in a way that other people can  understand&lt;/li&gt;
    &lt;li&gt;Memory - I don’t know about you, but my memory is not that great, and I’m sure I’m no exception here. Write about that complex concept or write down the recipe to a sporadic procedure and when you need to remember it just open your blog, or even google it and you’re going to find your own words to remind you.&lt;/li&gt;
    &lt;li&gt;Portfolio - specially useful to those who are starting their careers, blog posts are useful as part of a knowledge portfolio that can be found by a prospective employer or used as reference during an interview, acting as a complement to career time,  besides being an excellent starting point to a conversation.  […]&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jeff Atwood (co-founder of Stack Overflow and Discourse) even said that starting his blog “was the the most important thing I’ve ever done in my entire career.” So, it seems reasonable that we if encourage more and more people to share their knowledge and experiences, the whole community wins, right?&lt;/p&gt;

&lt;p&gt;In this 2012 Smashing Magazine post, Louis Lazaris gives advice on how to start publishing: just publish what you learn, don’t be afraid of making mistakes, welcome your reader’s collaborations.&lt;/p&gt;

&lt;p&gt;It sounds easy, doesn’t it?&lt;/p&gt;

&lt;h2 id=&quot;when-doubt-arrives&quot;&gt;When Doubt Arrives&lt;/h2&gt;

&lt;p&gt;I had a lot of self-doubt before starting this blog. I mean, how could it be any different? All those established bloggers, they have years or even decades of experience. They give talks in several countries. They are published authors, they host podcasts, they created successful companies, or maybe a piece of technology used by millions.\r\n\r\nIn short, they have a very impressive “About Me” page. Heck, some of them may even have an wikipedia article about themselves! They’re the rockstars.&lt;/p&gt;

&lt;p&gt;What about me? I’m just a dude, a couple years out of college, trying to learn and make my career. Do I really have something valuable to offer? Will I be able to really help somebody? Or I’ll be just adding to the noise?&lt;/p&gt;

&lt;p&gt;I think these are all important questions. The web is a ridiculously big place. You could share content for years, or maybe even your whole life, without being noticed and without receiving any feedback.&lt;/p&gt;

&lt;p&gt;Every now and then when I google something, I land on some blog with a cool design and very well written posts. I start to browse the posts, and I notice that most of them (sometimes, all of them) have no comments. Sometimes, I also notice that the last post is from 2 or 3 years ago. They gave up.&lt;/p&gt;

&lt;p&gt;While this is sad and quite disencouraging, it’s just a fact of life. Maybe your blog will reach a large audience, maybe it will not.&lt;/p&gt;

&lt;h2 id=&quot;why-i-created-this-blog-after-all&quot;&gt;Why I created this blog, after all?&lt;/h2&gt;

&lt;p&gt;Maybe the previous section has given you the impression that I am skeptical about the benefits of creating content. And maybe I am, just a little bit. But I’m not going to let that stop me. I believe in the importance of giving back to the community.&lt;/p&gt;

&lt;p&gt;Remember that stackoverflow answer that saved your job? Well, guess what: somebody took the time to write that answer, for free, and posted it online, for free, for the whole internet to see, forever. Isn’t that amazing? I think part of the beauty of our profession is that there are so many people willing to share knowledge for free. To sacrifice their own free time in order to build something. Miracles like GitHub, StackOverflow, Wikipedia, are only possible thanks to those people. And I want to be a part of that.&lt;/p&gt;

&lt;p&gt;Sure, you could argue that these people are moved by their own selfish reasons. Yeah, they probably are, but the point is: at the end of the day, it doesn’t really matter. Results matter. If the user JaneDoe123 wrote that answer on StackOverflow just to earn a few points of reputation, that’s fine by me! I just want to have my problem solved.&lt;/p&gt;

&lt;p&gt;So, that’s it. To use a torrent metaphor, I’m tired of being only a leecher. It’s time to seed a little bit.&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Aug 2015 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/en/share-what-you-learn/</link>
        <guid isPermaLink="true">http://carlosschults.net/en/share-what-you-learn/</guid>
        
        <category>blogging</category>
        
        <category>sharing</category>
        
        <category>first post</category>
        
        
      </item>
    
  </channel>
</rss>
