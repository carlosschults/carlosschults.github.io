<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>carlos schults / blog</title>
    <description>Artigos sobre desenvolvimento de software, banco de dados e vários assuntos ligados à tecnologia.</description>
    <link>http://carlosschults.net/</link>
    <atom:link href="http://carlosschults.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 02 Jul 2020 16:37:42 -0300</pubDate>
    <lastBuildDate>Thu, 02 Jul 2020 16:37:42 -0300</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
    
      <item>
        <title>Null É Ruim. Qual A Melhor Alternativa? Null.</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1593715153/null-evill-1068x437_ztikwf.jpg&quot; alt=&quot;&quot; /&gt;
&lt;span&gt;Foto por &lt;a href=&quot;https://unsplash.com/@benhershey?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Ben Hershey&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/null?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota editorial: Eu escrevi originalmente este post para o blog da NDepend. Você pode &lt;a href=&quot;https://blog.ndepend.com/null-evil/&quot;&gt;conferir o original aqui, em inglês, no site deles&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;“Null é maligno”. Se você tem sido um desenvolvedor de software por qualquer período de tempo razoável, aposto que já se deparou com essa afirmação várias vezes.&lt;/p&gt;

&lt;p&gt;Eu diria também que é muito provável que você concorde com o sentimento, ou seja, que a referência nula é uma característica sem a qual nossas linguagens de programação ficariam melhor. Até mesmo seu criador expressou seu pesar pela referência nula, &lt;a href=&quot;https://en.wikipedia.org/wiki/Tony_Hoare#Apologies_and_retractions&quot;&gt;chamando-a de seu “erro de um bilhão de dólares”&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Criticar null tende a ficar chato rapidamente, portanto, os autores não fazem só isso. Eles também oferecem alternativas. E embora eu acredite que muitas das alternativas apresentadas têm seus méritos, também acho que talvez tenhamos negligenciado a melhor solução para tudo isso.&lt;/p&gt;

&lt;p&gt;Neste post, vamos examinar algumas das alternativas comuns para o retorno nulo antes de fazer o argumento de que a melhor alternativa é a própria nulidade. Vamos começar!&lt;/p&gt;

&lt;h2 id=&quot;null-é-tóxico&quot;&gt;Null é Tóxico…&lt;/h2&gt;

&lt;p&gt;Não vou me deter muito em toda essa coisa do “nulo é mal”, já que muito já foi escrito sobre isso. Alguns exemplos (em inglês):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&amp;quot;https://sidburn.github.io/blog/2016/03/20/null-is-evil&amp;quot;&amp;gt;Null is Evil&quot;&gt;Null Is Evil&lt;/a&gt;
&lt;a href=&quot;&amp;quot;http://blog.ploeh.dk/2015/11/13/null-has-no-type-but-maybe-has/&amp;quot;&amp;gt;&quot;&gt;Null has no type, but Maybe has&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/12777/are-null-references-really-a-bad-thing&quot;&gt;Esta resposta de Stack Overflow&lt;/a&gt; também tem algumas informações valiosas.&lt;/p&gt;

&lt;h2 id=&quot;mas-útil-quais-são-as-alternativas&quot;&gt;…Mas útil. Quais são as Alternativas?&lt;/h2&gt;

&lt;p&gt;Agora, espero que estejamos na mesma página no que diz respeito ao status de nulo como um recurso de linguagem problemática. Mas tóxico ou não, o nulo serve a alguns propósitos. As pessoas o usam para representar um dado ausente, inválido ou desconhecido, ou mesmo para indicar que ocorreu um erro.&lt;/p&gt;

&lt;p&gt;O que deveriam estar fazendo ao invés disso?&lt;/p&gt;

&lt;h3 id=&quot;lançar-uma-exceção&quot;&gt;Lançar uma Exceção&lt;/h3&gt;

&lt;p&gt;Em algumas situações em que as pessoas retornam null, a coisa razoável a fazer é lançar uma exceção. Pense desta maneira: se um método promete realizar algo e não o faz, ele deve lançar uma exceção. Em outras palavras: quando um método não cumpre seu contrato, então é razoável disparar uma exceção.&lt;/p&gt;

&lt;p&gt;É claro que você deve reservar exceções para cenários que sejam verdadeiramente excepcionais. Se uma determinada situação acontece com freqüência, então uma exceção não é a melhor solução.&lt;/p&gt;

&lt;h3 id=&quot;padrão-de-objeto-null&quot;&gt;Padrão de Objeto Null&lt;/h3&gt;

&lt;p&gt;Considere as seguintes linhas de código:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;O que deveria acontecer se não houvesse um contrato com ID igual a 42? Se o método “Find” retornar null, então você vai ganhar uma desagradável &lt;code class=&quot;highlighter-rouge&quot;&gt;NullReferenceException&lt;/code&gt;. Como eu disse anteriormente, a nulidade faz seu código mentir. Se fossemos realmente pedantes sobre isso, o método “Find” deveria ser renomeado para “FindOrReturnNull”. Muito verboso, mas mais honesto.&lt;/p&gt;

&lt;p&gt;De qualquer forma, o &lt;a href=&quot;https://en.wikipedia.org/wiki/Null_object_pattern&quot;&gt;padrão de objeto nulo&lt;/a&gt; é uma tentativa de resolver este problema. E como ele faz isso? Criando seu próprio tipo de nulo.&lt;/p&gt;

&lt;p&gt;Para implementar o padrão, criamos uma nova classe (vamos chamá-la de “NullContract”) que representa o caso quando um contrato está faltando. Fazemos esta nova classe cumprir o mesmo contrato que a classe original, mas não fazemos nada nos métodos. Assim, se imaginarmos que “Contrato” implementa &lt;code class=&quot;highlighter-rouge&quot;&gt;IContract&lt;/code&gt;, nossa classe NullContract poderia ser algo parecido com isto:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NullContract&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IContract&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// construtor, propriedades, etc &lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;months&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// não faz nada aqui, propositalmente&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ao empregar o padrão de objeto nulo você poderia - teoricamente, pelo menos - ter a certeza de que sempre receberá um objeto que cumpre o contrato que você espera que ele honre sem explodir na sua cara.&lt;/p&gt;

&lt;h3 id=&quot;maybeoption&quot;&gt;Maybe/Option&lt;/h3&gt;

&lt;p&gt;Finalmente, temos uma alternativa muito interessante que muitas vezes é encontrada na &lt;a href=&quot;https://blog.ndepend.com/functional-programming-makes-code-not-oo/&quot;&gt;programação funcional&lt;/a&gt; linguagens. Esta alternativa é o uso de um tipo dedicado, destinado a representar o caso de uso de um valor potencialmente ausente. Por exemplo, &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/options&quot;&gt;em F# isto é chamado de tipo de option&lt;/a&gt;; Haskell a chama de &lt;a href=&quot;https://hackage.haskell.org/package/base-4.11.0.0/docs/Data-Maybe.html&quot;&gt;Maybe&lt;/a&gt;. A partir da versão 8, Java introduziu a classe &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html&quot;&gt;Optional&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Neste momento, o C# não oferece algo parecido com este tipo nativamente.&lt;/p&gt;

&lt;h2 id=&quot;alternativas-ao-null-elas-são-boas&quot;&gt;Alternativas ao Null: Elas são boas?&lt;/h2&gt;

&lt;p&gt;Tendo apresentado as alternativas mais comumente usadas para nulo, é hora do veredicto final. Vamos começar com a opção “lançar exceção”.&lt;/p&gt;

&lt;h3 id=&quot;exceções&quot;&gt;Exceções&lt;/h3&gt;

&lt;p&gt;Se o chamador não fornecer os argumentos corretos para a função que está chamando, então poderíamos dizer que ele está quebrando o contrato da função. Lançar uma exceção é a coisa correta a fazer nesta situação.&lt;/p&gt;

&lt;p&gt;O código a seguir é um bom exemplo do que &lt;strong&gt;não&lt;/strong&gt;* deve ser feito:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// tá tudo certo: vamos fazer o que precisa ser feito e retornar&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// um novo objeto!&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Tem coisa errada com os parâmetros recebidos. Já sei! Vamos retornar null!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Eu vejo códigos como este o tempo todo em produção. Os ifs aninhados são horríveis. Eles deveriam pelo menos ter usado um “and” para encaixar tudo em apenas um “if”. Mas o que realmente deveria acontecer é algo assim:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentOutOfRangeException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;O valor deve estar no intervalo de 1 a 100, inclusive.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
             &lt;span class=&quot;s&quot;&gt;&quot;O valor deve ser uma string válida.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// tá tudo certo: vamos fazer o que precisa ser feito e retornar&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// um novo objeto!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Além disso, &lt;a href=&quot;https://blogs.msdn.microsoft.com/ericlippert/2008/09/10/vexing-exceptions/&quot;&gt;não capture exceções exógenas&lt;/a&gt; que possam acontecer dentro de seu método e retorne nulo; em vez disso, deixe-as subir, pois este tipo de exceções representam problemas fora de seu controle. Problemas como uma falha na rede são problemas que você não poderia ter evitado de qualquer forma, em código.&lt;/p&gt;

&lt;h3 id=&quot;padrão-null-object&quot;&gt;Padrão Null Object&lt;/h3&gt;

&lt;p&gt;Vamos considerar o padrão de objeto nulo, do qual certamente não sou um grande fã. Um problema com este padrão é que você só deve usá-lo quando o código de chamada não se importa com o resultado do que quer que ele esteja tentando realizar. Considere novamente nosso exemplo de contrato:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Esta linha de código não é “consciente” (nem se importa) se a variável “Contrato” se refere a um contrato válido ou a uma instância da NullContract. Se for um contrato válido, ele será prorrogado por 12 meses. Se não for, então nada acontecerá. Às vezes, é exatamente isso que você quer, mas nem sempre. Neste exemplo, se um contrato com ID equivale a 42 realmente deveria existir, mas não… talvez lançar uma exceção funcionaria melhor.&lt;/p&gt;

&lt;p&gt;Tudo o que eu disse até agora é que o padrão de objeto nulo não é bem adequado para cada cenário. Isto não é um problema tão ruim assim; você poderia dizer o mesmo sobre praticamente qualquer coisa.&lt;/p&gt;

&lt;p&gt;Meu principal problema com o padrão de objeto nulo é que ele equivale a pouco mais do que criar um novo tipo de objeto nulo sem realmente resolver o problema. Veja, &lt;strong&gt;utilizar o padrão não impede que você retorne nulo&lt;/strong&gt;. Se eu consumir algum método escrito por um terceiro que afirma usar o padrão, devo ser capaz de assumir que o que quer que seja que ele retorne é seguro. Mas eu não posso ter certeza. Eu tenho três opções:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Confiar no autor do código;&lt;/li&gt;
  &lt;li&gt;Inspecionar o código-fonte, se possível; ou&lt;/li&gt;
  &lt;li&gt;Continuar a verificar a nulidade, o que derrota completamente o propósito de usar o padrão.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pode-se argumentar que estes problemas não são relevantes no contexto de uma única equipe que trabalha com a mesma base de código. Os desenvolvedores poderiam concordar em usar o padrão corretamente. Mas se tudo equivale a confiança e convenção no final do dia, você poderia muito bem concordar em nunca retornar nulo e teria o mesmo resultado.&lt;/p&gt;

&lt;h4 id=&quot;maybeoption-1&quot;&gt;Maybe/Option&lt;/h4&gt;

&lt;p&gt;Por último, mas não menos importante, e quanto aos tipos Maybe/Option? Esta é uma alternativa ao mesmo tempo elegante e robusta, especialmente em linguagens como o F#, onde você é forçado, de certa forma, a lidar com ambos os casos usando &lt;em&gt;pattern matching.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Mas a triste realidade é a seguinte: embora &lt;code class=&quot;highlighter-rouge&quot;&gt;Maybe/Option&lt;/code&gt; sejam abordagens surpreendentes, elas não podem mudar o fato de que o nulo existe e continuará a existir. Você não pode realmente impedir as pessoas de usá-lo, nem pode removê-lo de todas as linhas de código que as pessoas têm escrito desde o início da história do C#.&lt;/p&gt;

&lt;p&gt;Portanto, mesmo sendo grandes abordagens, elas ainda sofrem com o problema de serem mais um tipo de nulo para os desenvolvedores lidarem.&lt;/p&gt;

&lt;h2 id=&quot;a-solução-para-null-o-próprio-null&quot;&gt;A solução para Null: O próprio Null&lt;/h2&gt;

&lt;p&gt;Você conhece o velho ditado “Quando em um buraco, pare de cavar”? Para o melhor ou para o pior, existe o nulo. Tóxico ou não, é uma característica que as pessoas usam. Portanto, talvez a solução para tudo isso seja apenas consertar o nulo.&lt;/p&gt;

&lt;p&gt;A linguagem &lt;a href=&quot;https://kotlinlang.org/&quot;&gt;kotlin&lt;/a&gt; acertou ao ter diferentes tipos de nulos e não nulos e adicionar todos os tipos de verificações para evitar que o desenvolvedor faça coisas que acabariam mal, como desreferenciar um tipo nulo sem verificá-lo ou atribuir um valor nulo a uma variável não nula.&lt;/p&gt;

&lt;p&gt;O C# nos deu o primeiro passo na direção certa há muitos anos com &lt;a href=&quot;https://docs.microsoft.com/pt-br/dotnet/csharp/programming-guide/nullable-types/&quot;&gt;tipos de valor nulo&lt;/a&gt;. Após uma longa espera, &lt;a href=&quot;https://blog.ndepend.com/c-8-0-features-glimpse-future/&quot;&gt;tipos de referência finalmente obterão o mesmo benefício com C# 8.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A alternativa para o nulo é o próprio nulo… &lt;strong&gt;quando feito corretamente&lt;/strong&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Jul 2020 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/pt/null-problematico</link>
        <guid isPermaLink="true">http://carlosschults.net/pt/null-problematico</guid>
        
        <category>engenharia-de-software</category>
        
        <category>boas-praticas</category>
        
        <category>programacao</category>
        
        <category>csharp</category>
        
        
      </item>
    
      <item>
        <title>Afiando a Serra: 4 Dicas Rápidas Para Sua Equipe</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1592314350/sharpen-the-saw-1038x437_z9ermr.jpg&quot; alt=&quot;&quot; /&gt;
Photo de Sven Brandsma no Unsplash&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTA: Eu escrevi este post originalmente para o blog da SubMain. Caso lhe interesse, você pode &lt;a href=&quot;https://blog.submain.com/sharpen-saw/&quot;&gt;ler o post original no site deles, em inglês&lt;/a&gt;. Enquanto estiver por lá, aproveite para dar uma olhada no CodeIt.Right, uma ferramenta para automatizar revisões de código.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Você está familiarizado com a expressão “afiar a serra” no contexto de aprendizagem e melhoria contínua? Se você leu o livro de Stephen Covey chamado &lt;a href=&quot;https://pt.wikipedia.org/wiki/Os_Sete_H%C3%A1bitos_das_Pessoas_Altamente_Eficazes&quot; title=&quot;Os Sete Hábitos das Pessoas Altamente Eficazes&quot;&gt;“Os Sete Hábitos das Pessoas Altamente Eficazes”&lt;/a&gt;, então tenho certeza que você está. Para quem não está familiarizado com o termo, significa basicamente se engajar em práticas que o tornarão melhor em sua profissão ou arte.&lt;/p&gt;

&lt;p&gt;O que você como líder técnico, desenvolvedor líder ou arquiteto de software pode fazer para incentivar os desenvolvedores de sua equipe a “afiar suas serra”? Isso é o que vamos responder com este post. Vamos mostrar a você quatro maneiras rápidas e fáceis de sua equipe melhorar suas habilidades e agregar mais valor.&lt;/p&gt;

&lt;h2 id=&quot;1-afiando-a-serra-pela-leitura-criar-um-clube-do-livro-técnico&quot;&gt;1. Afiando a Serra pela Leitura: Criar um Clube do Livro Técnico&lt;/h2&gt;

&lt;p&gt;Não seria fantástico ter uma equipe formada por pessoas incrivelmente bem informadas, atualizadas com as novidades relevantes, e com sólidos conhecimentos sobre os fundamentos da nossa indústria? Sim, eu pensei que sim. E não há melhor maneira de conseguir isso do que lendo.&lt;/p&gt;

&lt;p&gt;O que eu sugiro aqui é algo muito simples. Todos os meses, você e sua equipe escolhem uma leitura designada para a equipe de desenvolvimento. Sobre que assunto, você pergunta? Padrões de design, concorrência, refatoração, teste unitário - eu diria que praticamente tudo é jogo justo, desde que os próprios desenvolvedores estejam interessados.&lt;/p&gt;

&lt;p&gt;Ah, e antes que eu esqueça: isso provavelmente não precisa ser mencionado, mas sua empresa deve &lt;em&gt;comprar&lt;/em&gt; aos desenvolvedores cópias dos livros escolhidos. Se você sente que não pode pagar isso, bem, eu não acredito que você vai ter uma empresa por muito tempo, pra ser sincero.&lt;/p&gt;

&lt;p&gt;Uma solução menos ideal seria comprar uma cópia do livro para um desenvolvedor. Peça que estudem o livro em seu tempo livre e depois apresentem suas descobertas para o resto da equipe, dando uma ou mais palestras internas. Em seguida, selecione outro livro e outro membro da equipe, e peça a esse desenvolvedor que dê a palestra interna no próximo mês.&lt;/p&gt;

&lt;p&gt;Agora, falando em conversas internas…&lt;/p&gt;

&lt;h2 id=&quot;2-afiando-a-serra-através-de-palestras-apresentações-internas&quot;&gt;2. Afiando a Serra Através de Palestras: Apresentações Internas&lt;/h2&gt;

&lt;p&gt;Fazer com que os desenvolvedores façam palestras internas uns com os outros é uma ótima maneira de disseminar o conhecimento por toda a empresa. Para os desenvolvedores que dão a palestra, é a oportunidade perfeita para praticar várias habilidades, tais como:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Aprender um assunto e fazer as pesquisas necessárias.&lt;/li&gt;
  &lt;li&gt;Criar slides bem feitos.&lt;/li&gt;
  &lt;li&gt;Falar em público, o que pode ser uma experiência difícil para muitos de nós.&lt;/li&gt;
  &lt;li&gt;Responder perguntas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eu poderia continuar, mas em resumo, eles estarão praticando a habilidade geral de comunicação. Isso simplesmente não tem preço. Dar palestras internas pode ser uma ótima prática para falar em conferências, por exemplo.&lt;/p&gt;

&lt;p&gt;E qual a vantagem para quem assiste a palestra? Obviamente, a oportunidade de aprendizado. Mas vou acrescentar que, no caso das conversas internas da empresa, a probabilidade de realmente colocar em uso esse conhecimento que você adquiriu é muito maior. Como os palestrantes são na verdade seus colegas de trabalho - pessoas que compartilham o contexto com você todos os dias e estão cientes dos problemas e desafios que sua empresa está enfrentando - eu diria que é muito provável que eles escolham um tópico que se relacione com a empresa.&lt;/p&gt;

&lt;h2 id=&quot;3-afiando-a-serra-com-a-escrita-criar-e-manter-um-blog-de-tecnologia&quot;&gt;3. Afiando a Serra Com a Escrita: Criar e Manter um Blog de Tecnologia&lt;/h2&gt;

&lt;p&gt;Quando seus desenvolvedores dão palestras internas, eles estão ensinando uns aos outros, o que é fantástico. Mas e se eles pudessem disseminar esse conhecimento para além da sua empersa, ao mesmo tempo em que melhoram a sua capacidade de escrita e de articular um argumento? E se eles pudessem fazer isso enquanto aprendem sobre coisas como marketing de conteúdo e SEO? Melhor ainda, e se eles pudessem demonstrar o know-how técnico de sua empresa, posicionando-a como especialista em sua área de domínio?&lt;/p&gt;

&lt;p&gt;Há uma maneira de fazer exatamente isso, e chama-se blogging.&lt;/p&gt;

&lt;p&gt;Inicie um blog de engenharia de software. Decida sobre as especificidades, como por exemplo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Quais tópicos devem ser abordados?&lt;/li&gt;
  &lt;li&gt;Com que freqüência você vai publicar?&lt;/li&gt;
  &lt;li&gt;Quem serão os autores?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Faria sentido se, pelo menos no início, os desenvolvedores que são naturalmente melhores escritores fossem os autores do blog. Mas como o objetivo aqui é aprender a afiar a serra - o cenário ideal é aquele em que todo desenvolvedor tem a chance de afiar suas costeletas de escrita.&lt;/p&gt;

&lt;h2 id=&quot;4-afiação-da-serra-por-programação-coding-dojos-na-empresa&quot;&gt;4. Afiação da Serra por Programação: Coding Dojos Na Empresa&lt;/h2&gt;

&lt;p&gt;Um &lt;a href=&quot;http://codingdojo.org/&quot;&gt;coding dojo&lt;/a&gt; é uma espécie de sessão de treinamento na qual as pessoas revezam em pares, trabalhando de forma colaborativa sobre o mesmo problema. A inspiração para o nome vem das artes marciais. O objetivo de um dojo não é necessariamente resolver o problema… mas desenvolver tanto habilidades de engenharia, como testes unitários/TDD, quanto habilidades sociais, como &lt;a href=&quot;https://carlosschults.net/pt/revisao-codigo-vs-programacao-em-par/&quot;&gt;programação em pares&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para realizar um dojo de codificação, você vai precisar do seguinte:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Espaço.&lt;/strong&gt; Você precisa de um lugar grande o suficiente para acomodar de 5 a 15 pessoas. (Algumas pessoas dizem que 20 pessoas para um dojo codificador é aceitável, mas IMHO, isso é demais). Já que estamos falando em afiar as serras da sua equipe, um escritório ou sala de reuniões na sua empresa provavelmente serve.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Um computador&lt;/em&gt;**. Pode ser um computador desktop ou laptop; não importa, desde que seja colocado em uma mesa com duas cadeiras, onde duas pessoas possam sentar-se e colaborar confortavelmente juntas.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Um projetor ou um monitor grande&lt;/em&gt;**. Todos os participantes precisam observar o que está acontecendo em um determinado momento.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Lanches!&lt;/em&gt; Um dojo codificador deve ser uma experiência de união, e os seres humanos adoram se conectar sobre a comida e a bebida. E &lt;a href=&quot;https://www.artima.com/weblogs/viewpost.jsp?thread=4414&quot;&gt;os programadores são seres humanos&lt;/a&gt;, da última vez que verifiquei. Basta ser atencioso com aqueles com restrições alimentares e tudo vai dar certo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Então, você resolveu fazer isso. Você montou o equipamento necessário, e as pessoas apareceram no local combinado. E agora?&lt;/p&gt;

&lt;p&gt;Bem, começando do começo. Você precisa de um problema! Mas nem todos os desafios de programação são um bom problema de codificação do dojo. Como eu disse anteriormente, resolver o problema não é necessariamente o objetivo, mas sim praticar habilidades de engenharia como TDD e programação em pares. Então, escrever um compilador a partir do zero não rola. Mas implementar um conversor para numerais romanos pode funcionar muito bem.&lt;/p&gt;

&lt;p&gt;Quais são as características de um bom problema para um coding dojo?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;É pequeno, então é viável resolvê-lo em um tempo relativamente curto.&lt;/li&gt;
  &lt;li&gt;Empresta-se bem à TDD.&lt;/li&gt;
  &lt;li&gt;É finito e bem definido. Desafios vagos e em aberto não servem.&lt;/li&gt;
  &lt;li&gt;É baseado em um problema do mundo real, não um problema abstrato.&lt;/li&gt;
  &lt;li&gt;É diferente dos desafios que você resolve no seu trabalho diário.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Você não precisa se preocupar em encontrar bons problemas, no entanto. A &lt;a href=&quot;http://codingdojo.org/KataCatalogue/&quot;&gt;web resolve seu problema&lt;/a&gt;Ela &lt;a href=&quot;http://codekata.pragprog.com/&quot;&gt;está cheia&lt;/a&gt; de &lt;a href=&quot;https://sites.google.com/site/tddproblems/&quot;&gt;fontes&lt;/a&gt; para &lt;a href=&quot;https://code.joejag.com/coding-dojo/example-katas/&quot;&gt;problemas&lt;/a&gt; lá fora.&lt;/p&gt;

&lt;p&gt;Com a escolha do problema fora do caminho, é hora de escolher uma linguagem de programação. Você não precisa usar a mesma linguagem que você usa todos os dias em seu trabalho. Na verdade, é bom usar o dojo como uma oportunidade para experimentar diferentes linguagens. Isso pode ajudar a tornar as coisas novas e mais desafiadoras. Só não se esqueça de ter por perto uma pessoa que conheça bem essa linguagem para que ela possa ajudar quando o grupo tiver dúvidas.&lt;/p&gt;

&lt;p&gt;Agora, para começar, você vai precisar de dois voluntários: um para ser o motorista e outro para ser o co-piloto. Estes termos vêm da programação em pares. O motorista é a pessoa que está digitando, e o co-piloto dá conselhos e feedback. As demais pessoas são o público, pelo menos por enquanto. O ideal seria que todos em uma sessão de dojo escrevessem código.&lt;/p&gt;

&lt;p&gt;Então, com todos em seus lugares, a diversão começa. O motorista começa a codificar, usando o ciclo vermelho-verde-refatorar da TDD:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Primeiro, a pessoa que está na posição de motorista escreve um teste que falha.&lt;/li&gt;
  &lt;li&gt;Então, ela escreve apenas a menor quantidade possível de código que vai fazer o teste passar.&lt;/li&gt;
  &lt;li&gt;Quando o teste está passando, é hora de refatorar. Somente nesta fase as pessoas na platéia têm permissão para falar, dando conselhos e feedback para ajudar o motorista a refatorar melhor o código.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ao final de um período de tempo previamente estabelecido (cinco a dez minutos), o motorista pára de codificar e retorna à audiência. O co-piloto torna-se o motorista, e um novo membro da audiência torna-se o co-piloto.&lt;/p&gt;

&lt;p&gt;Este ciclo continua até que todos na sala tenham escrito o código ou até que o tempo previsto para a sessão expire - o que vier primeiro.&lt;/p&gt;

&lt;h3 id=&quot;retrospectiva&quot;&gt;Retrospectiva&lt;/h3&gt;

&lt;p&gt;Assim que a sessão de codificação propriamente dita estiver concluída, dedique algum tempo para fazer uma retrospectiva. Pergunte aos participantes sobre as coisas que eles gostaram e não gostaram da sessão, e escreva tudo isso. Estas duas listas servirão como uma diretriz para o que fazer e não fazer em seus futuros dojos de codificação.&lt;/p&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;O desenvolvimento de software é uma profissão de prática. Requer aprendizagem contínua - ou melhor, afiação contínua da serra. Além das dicas que acabei de lhe dar, há muitas outras maneiras de afiar sua serra. Na verdade, você está fazendo um deles agora mesmo. Você está lendo um blog técnico!&lt;/p&gt;

&lt;p&gt;Desde &lt;a href=&quot;https://blog.submain.com/category/rulesexplained/&quot;&gt;tutoriais aprofundados sobre ferramentas como CodeIt.Right&lt;/a&gt; que podem ajudar sua equipe a escrever melhor código?até &lt;a href=&quot;https://blog.submain.com/coding-best-practices-short-time/&quot;&gt;insights sobre melhores práticas&lt;/a&gt;?até mesmo dicas sobre coisas &lt;a href=&quot;https://blog.submain.com/4-common-datetime-mistakes-c-avoid/&quot;&gt;você pode ter tomado como certo&lt;/a&gt;, não faltam tópicos interessantes e úteis que você pode aprender lendo um bom blog sobre tecnologia.&lt;/p&gt;

&lt;p&gt;Obrigado pela leitura!&lt;/p&gt;

</description>
        <pubDate>Tue, 16 Jun 2020 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/pt/afiando-a-serra/</link>
        <guid isPermaLink="true">http://carlosschults.net/pt/afiando-a-serra/</guid>
        
        <category>engenharia-de-software</category>
        
        <category>boas-práticas</category>
        
        <category>programação</category>
        
        <category>carreira</category>
        
        
      </item>
    
      <item>
        <title>Programação Funcional em C#: Mapeando, Filtrando e Reduzindo Em Busca de Código Limpo</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1548200356/Untitled_xfahmy.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTA: Este post foi originalmente publicado no blog da SubMain. Você pode &lt;a href=&quot;https://blog.submain.com/csharp-functional-programming/&quot;&gt;ler o original aqui, em inglês&lt;/a&gt;. Aproveite para conferir o CodeIt.Right, um produto que pode ajudar a melhorar seu código.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Você provavelmente pensa no C# como uma linguagem orientada a objeto. Mas é possível que você, ao programar em C#, tenha usado conceitos de programação funcional sem sequer ter notado.&lt;/p&gt;

&lt;p&gt;O post de hoje trata desse tema. Vou começar abordando as vantagens da programação funcional, mostrando a justificativa se aplicá-la mesmo usando uma assim chamada linguagem orientada a objetos. Depois vou explicar como você já está usando um pouco do estilo funcional em seu código C#, mesmo sem estar ciente disso. Finalmente, vou demonstrar como aplicar um pouco de pensamento funcional ao seu código pode torná-lo mais limpo, seguro e mais expressivo.&lt;/p&gt;

&lt;h2 id=&quot;programação-funcional-em-c-por-quê&quot;&gt;Programação Funcional em C#: Por quê?&lt;/h2&gt;

&lt;p&gt;Nós sabemos que o .NET framework oferece algumas capacidades funcionais na forma dos métodos de extensão do LINQ, mas qual seria a vantagem de usá-las?&lt;/p&gt;

&lt;p&gt;Para responder bem essa pergunta, precisamos voltar um passo e entender os atrativos da programação funcional em si. Na minha opinião, para começar a entender os benefícios da programação funcional você precisa primeiro entender dois tópicos: &lt;strong&gt;funções puras&lt;/strong&gt; e &lt;strong&gt;imutabilidade&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Funções puras&lt;/strong&gt; são funções que apenas podem acessar os valores que receberam por argumentos e, como consequência, não podem ter nenhum efeito colateral. &lt;strong&gt;Imutabilidade&lt;/strong&gt; se refere a objetos ou estruturas de dados que, uma vez inicializados, não podem sofrer nenhuma mudança em seus valores. Isso os torna mais fáceis de entender e seguros para serem usados em código com múltiplas threads.&lt;/p&gt;

&lt;h2 id=&quot;operações-fundamentais-da-programação-funcional-e-como-executá-las-usando-c&quot;&gt;Operações Fundamentais da Programação Funcional e Como Executá-las Usando C#&lt;/h2&gt;

&lt;p&gt;Como já cobrimos o &lt;em&gt;o quê&lt;/em&gt; e o &lt;em&gt;porquê&lt;/em&gt; da programação funcional, está na hora de vermos o &lt;em&gt;como&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Eu vou abordar três operações: &lt;strong&gt;map&lt;/strong&gt;, &lt;strong&gt;filter&lt;/strong&gt; e &lt;strong&gt;reduce&lt;/strong&gt;. Vou começar mostrando alguns problemas, usando uma abordagem procedural tradicional para resolvê-los. Em seguida, vou apresentar a alternativa usando o estilo funcional.&lt;/p&gt;

&lt;h2 id=&quot;map&quot;&gt;Map&lt;/h2&gt;

&lt;p&gt;Em termos simples, a operação “map” recebe uma sequência de valores, aplica alguma transformação em cada um dos itens, e retorna uma nova sequência contendo os valores resultantes. Vamos ver alguns exemplos:&lt;/p&gt;

&lt;p&gt;Imagine que você escreveu o código a seguir, devido à requisição de algum cliente:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AddThreeToEachElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	       &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;É uma função que adiciona três a cada elemento do &lt;a href=&quot;https://blog.submain.com/c-array/&quot;&gt;array&lt;/a&gt; de inteiros especificado. Bem tranquilo.&lt;/p&gt;

&lt;p&gt;Então aparece o pedido de uma nova função. Dessa vez, é para adicionar cinco a cada elemento do vetor. Ignorando a &lt;a href=&quot;https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)&quot;&gt;regra de três,&lt;/a&gt; você pula direto para uma versão generalizada, parametrizando o número a ser adicionado:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AddNumberToEachElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
	   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Então aparece um novo pedido. Agora você tem que escrever uma função para multiplicar cada elemento do array especificado por três. Não vou me dar ao trabalho de adicionar o código de exemplo, porque seria bem trivial. A esse ponto, você já sabe o suficiente para evitar fixar o número no código, então você provavelmente vai pular direto para uma versão generalizada. Mesmo assim, alguma duplicação ainda vai permanecer: o laço de repetição em si. E se você pudesse manter o loop e parametrizar a ação a ser aplicada nos itens?&lt;/p&gt;

&lt;h3 id=&quot;a-maneira-funcional&quot;&gt;A Maneira Funcional&lt;/h3&gt;

&lt;p&gt;Leve em consideração o que você acabou de ler sobre funções puras—e também seu conhecimento prévio de &lt;a href=&quot;https://blog.submain.com/coding-best-practices-short-time/&quot;&gt;boas práticas de programação&lt;/a&gt; em geral—e pense em maneiras nas quais o código do exemplo poderia ser melhorado.&lt;/p&gt;

&lt;p&gt;No meu ponto de vista, os problemas principais são:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;O código é muito específico&lt;/strong&gt;. Não é fácil modificá-lo para acomodar outras transformações a serem aplicadas nos elementos do array. O código só faz uma soma, e é só.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Muito código boilerplate&lt;/strong&gt;. Olhe novamente o exemplo anterior. Conte as linhas. Há sete, das quais apenas uma realmente tem algo a ver com a regra de negócio do método.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Como que o estilo funcional pode melhorar isso? O código a seguir mostra como eu reescreveria o exemplo em F#, por exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aqui, “numbers” represente uma sequência de números que eu consegui de alguma forma. Então eu uso a função &lt;strong&gt;map&lt;/strong&gt; que pertence ao módulo &lt;strong&gt;Seq&lt;/strong&gt;, passando a sequência como um dos parâmetros, junto com uma função que recebe um número inteiro e adiciona três a ele.&lt;/p&gt;

&lt;h3 id=&quot;o-jeito-funcional-sabor-c&quot;&gt;O Jeito Funcional, sabor C#&lt;/h3&gt;

&lt;p&gt;O .NET implementa a operação map na forma do método de extensão do LINQ chamado “Select.” Então, para converter o código em F# acima para C#, você faria assim:&lt;/p&gt;

&lt;p&gt;var result = numbers.Select(x =&amp;gt; x + 3);&lt;/p&gt;

&lt;p&gt;É importante salientar o que o tipo da sequência resultante não precisa ser o mesmo da sequência de entrada. Você tem uma lista de objetos do tipo “Employee” e precisa recuperar os seus ids, na forma de uma sequência de ints? Fácil:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmployeeRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;All&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;filter&quot;&gt;Filter&lt;/h2&gt;

&lt;p&gt;A operação filter é, sem dúvida, a mais fácil das três. Ela tem um nome bastante intuitivo, e a necessidade de se filtrar coisas é algo tão comum na programação que eu tenho certeza de que você adivinhou o que ela faz só pelo nome (caso já não soubesse antes).&lt;/p&gt;

&lt;p&gt;Mesmo assim, vamos defini-la. A operação filter filtra uma sequência, retornando uma nova sequência contendo apenas os itens aprovados por um ou mais critérios especificados.&lt;/p&gt;

&lt;h3 id=&quot;o-jeito-imperativo&quot;&gt;O Jeito Imperativo&lt;/h3&gt;

&lt;p&gt;Já que nós usamos o exemplo de “employees” na seção anterior, vamos continuar dentro do mesmo tema. Digamos que você precise recuperar uma lista com os funcionários que tenham tirado pelo menos três dias de atestado médico.&lt;/p&gt;

&lt;p&gt;Em um estilo mais procedura, você provavelmente escreveria algo assim:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetEmployeesWithAtLeastNSickdays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
	
	    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sickdays&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Eu não acho que o código acima esteja errado. O nome do método é um pouco longo, porém bastante descritivo. O código faz o que promete. E a legibilidade está boa.&lt;/p&gt;

&lt;p&gt;Mas da mesma forma que no exemplo anterior, nós poderíamos fazer o argumento de que o código está poluído demais Podemos dizer quem, na prática, a única linha que faz algo relacionado à lógica do problema é o teste do if. Todas as outras linhas são código boilerplate. Será que a abordagem funcional consegue melhorar a situação?&lt;/p&gt;

&lt;h3 id=&quot;a-maneira-funcional-1&quot;&gt;A Maneira Funcional&lt;/h3&gt;

&lt;p&gt;Vamos reescrever o código acima usando LINQ:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetEmployeesWithAtLeastNSickdays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SickDays&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we use the “Where” extension method, passing the filtering criterium as a delegate. To be honest, the outer method became not very useful since it just delegates the work. In real life, I’d get rid of it.&lt;/p&gt;

&lt;p&gt;Aqui nós usamos o método “Here”, passando o critério de filtragem como parâmetro. Para ser honesto, o método de fora não é tão útil, já que ele só delega o trabalho para o método do LINQ. Na vida real, em código de produção, eu jogaria ele fora.&lt;/p&gt;

&lt;h2 id=&quot;reduce&quot;&gt;Reduce&lt;/h2&gt;

&lt;p&gt;Geralmente, a operação reduce é a que algumas pessoas costumam ter dificuldade entendendo. Mas não tem nada de difícil. Pense dessa forma: você tem uma sequência de alguma coisa, e também tem uma função que recebe duas dessas coisas e retorna uma.&lt;/p&gt;

&lt;p&gt;Então você começa a aplicar a função. Você a aplica nos dois primeiros elementos na sequência e guarda o resultado. Então aplica de novo, com o resultado e o terceiro elemento. Depois faz a mesma coisa, aplicando a função ao resultado da última etapa e o quarto elemento, e assim sucessivamente.&lt;/p&gt;

&lt;p&gt;O exemplo clássico do reduce é a soma de uma lista de números, então é exatamente isso que vamos fazer.&lt;/p&gt;

&lt;h3 id=&quot;o-modo-imperativo&quot;&gt;O Modo Imperativo&lt;/h3&gt;

&lt;p&gt;Suponha que temos que somar um punhado de números inteiros. Poderíamos fazer assim:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A essa altura do campeonato você já pode até prever o que eu tenho a dizer a respeito desse código: não está necessariamente errado, mas é pouco flexível e cheio de ruído. Mas a programação funcional pode nos salvar.&lt;/p&gt;

&lt;h3 id=&quot;o-modo-funcional&quot;&gt;O Modo Funcional&lt;/h3&gt;

&lt;p&gt;No .NET framework, a operação “reduce” toma a forma do método de extensão “Aggregate”. Dessa vez, vou me livrar do método externo e escrever a solução usando LINQ de uma vez:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Aggregate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A aparência disso é um pouco mais complexa, mas não se assuste. Nesse caso, nós estamos apenas passando uma função que recebe dois parâmetros ao invés de um só, como nos exemplos anteriores. Precisa ser assim, já que a função precisa ser aplicada a dois elementos da sequência cada vez.&lt;/p&gt;

&lt;p&gt;But as it turns out, there’s an even easier way of solving this particular problem (adding a bunch of numbers). Since summing a sequence of numbers is such a common use case, there’s a dedicated method to do just that. It’s called, not surprisingly, “Sum”:&lt;/p&gt;

&lt;p&gt;Mas na verdade tem uma maneira ainda mais fácil de resolver esse problema em particular (somar vários números).
Sendo esse um caso de uso tão comum, o framework disponibiliza um método dedicado para fazer só isso. O qual, surpreendendo a um total de zero pessoas, é chamado de “Sum”:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Para que serve o “Aggregate”, então? Adicionar uma lista de números é apenas uma das muitas aplicações do reduce, mas você pode usá-lo com qualquer operação binária, como concatenação de strings ou a soma de tipos customizados.&lt;/p&gt;

&lt;h2 id=&quot;o-veredito-a-abordagem-funcional-é-melhor&quot;&gt;O Veredito: A Abordagem Funcional é Melhor?&lt;/h2&gt;

&lt;p&gt;Após esses exemplos, você talvez esteja em dúvida se o jeito funcional de fazer as coisas é realmente melhor. Seria extremamente difícil definir o que “melhor” significa, então nem vou tentar. Vamos considerar outro critério: legibilidade.&lt;/p&gt;

&lt;p&gt;Apesar de sabermos que legibilidade de código &lt;a href=&quot;https://blog.submain.com/evaluate-code-readability/&quot;&gt;também pode ser bastante subjetiva,&lt;/a&gt; eu diria que sim, os exemplos funcionais são mais legíveis. Imagine que nós recuperar e somar todos os salários dos funcionários com mais de cinco anos de casa. Nós poderíamos facilmente fazer isso usando um loop, dentro do qual nós testaríamos a condição e acumularíamos o salário em uma variável, caso o teste tenha retornado verdadeiro.&lt;/p&gt;

&lt;p&gt;Ou poderíamos escrever isso:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompanyTimeInYears&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Salary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Eu honestamente acredito que essa versão é mais legível (e melhor, em geral) que a abordagem procedural. É mais declarativa. Ela demonstra a intenção do &lt;strong&gt;que&lt;/strong&gt; estamos tentando fazer sem se preocupar tanto com o &lt;strong&gt;como&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It almost reads like natural language: “The list of employees where their time in the company is greater than five years, select their salary and sum them”.&lt;/p&gt;

&lt;p&gt;Para quem entende inglês, quase parece linguagem natural: “Da lista de todos os funcionários, onde o tempo de empresa é mais de cinco anos, selecione o salário e some.”&lt;/p&gt;

&lt;h2 id=&quot;uso-um-pouco-de-tempero-funcional-e-deixe-seu-código-mais-saboroso&quot;&gt;Uso Um Pouco de Tempero Funcional e Deixe Seu Código Mais Saboroso&lt;/h2&gt;

&lt;p&gt;Muitas pessoas usam LINQ por anos sem nem perceber que estão usando conceitos de programação funcional. Eu enxergo isso como prova de que a programação funcional não está além das capacidades do típico desenvolvedor enterprise que não tem uma sólida formação matemática.&lt;/p&gt;

&lt;p&gt;Alguns dos conceitos apresentados aqui não são novos nem restritos à programação funcional. Os benefícios de distinguir entre funções que causam efeitos colaterais e as que não causam é a base de princípios como &lt;a href=&quot;https://en.wikipedia.org/wiki/Command%E2%80%93query_separation&quot;&gt;command-query separation (CQS)&lt;/a&gt;, por exemplo.&lt;/p&gt;

&lt;p&gt;O objetivo desse post não é ensinar programação funcional para ninguém. Isso está além das minhas capacidades, já que eu ainda estou aprendendo. E além disso, &lt;a href=&quot;https://fsharpforfunandprofit.com&quot;&gt;existem ótimos recursos para aprender programação funcional, para aqueles que se interessarem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ao contrário, o que eu queria fazer aqui era mostrar um pouco do que um estilo funcional pode fazer com seu código: torná-lo mais expressivo, conciso e declarativo. Agora depende de você aplicar o estilo funcional ao código que você escreve.&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Jan 2019 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/pt/programacao-funcional-csharp/</link>
        <guid isPermaLink="true">http://carlosschults.net/pt/programacao-funcional-csharp/</guid>
        
        <category>csharp</category>
        
        <category>boas praticas</category>
        
        <category>programacao funcional</category>
        
        
      </item>
    
      <item>
        <title>Value Objects: Uma Técnica Para Código Auto-Documentado E Menos Erros</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1540385528/value-object-tool/value-object-tool-1038x437.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTA: Eu escrevi este post originalmente para o blog da NDepend. Você pode &lt;a href=&quot;https://blog.ndepend.com/value-objects-tool-self-documented-code-fewer-errors/&quot;&gt;conferir o artigo original, em inglês, no site deles&lt;/a&gt;. Aproveite que está lá e faça o download do NDepend.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Você já ouviu falar de &lt;em&gt;value objects&lt;/em&gt;? Eu imagino que sim. Apesar de não se falar tanto a respeito deles como eu gostaria, eles ainda são mencionados o bastante para que muitos desenvolvedores tenham no mínimo alguma familiaridade com o termo.&lt;/p&gt;

&lt;p&gt;Porém, “alguma familiaridade” não é bom o bastante. Então é isso que vamos consertar com esse post. Hoje vamos aprender o que &lt;em&gt;value objects&lt;/em&gt; são e como você, por meio do C#, pode usar todo o poder deles para tornar seu código mais claro, auto-documentável e menos propenso a erros.&lt;/p&gt;

&lt;h2 id=&quot;o-que-sãovalue-objects&quot;&gt;O que são Value Objects?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Value objects&lt;/em&gt; são um dos blocos fundamentais do DDD (Domain Driven Design, ou Projeto Guiado por Domínio, em tradução livre), conforme proposto por Eric Evans em seu livro &lt;a href=&quot;https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215&quot;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Da maneira mais simples possível, um value object é um objeto que representa um valor. E sim, eu estou ciente de que isso soa óbvio e tedioso quando dito dessa forma. Então, por que tanto barulho por causa desse conceito?&lt;/p&gt;

&lt;h2 id=&quot;algumas-propriedades&quot;&gt;Algumas Propriedades&lt;/h2&gt;

&lt;p&gt;Eu acho que é mais fácil de entender value objects se eu parar de tentar explicar o que eles são e, ao invés disso, falar sobre as suas características.&lt;/p&gt;

&lt;h3 id=&quot;value-objects-não-têm-identidade&quot;&gt;Value Objects Não Têm Identidade&lt;/h3&gt;

&lt;p&gt;Eu acho que é justo dizer que a principal característica dos value objects é que eles não possuem &lt;em&gt;identidade&lt;/em&gt;. Mas o que isso realmente quer dizer na prática?&lt;/p&gt;

&lt;p&gt;Digamos que você vá até o caixa eletrônico mais próximo e deposite uma nota de 50 reais em sua conta. Então você dirige umas duas horas até outra cidade, entra em uma agência bancária, e saca 50 reais.&lt;/p&gt;

&lt;p&gt;Pergunta: faz alguma diferença para você o fato de que a nota que você tem em mãos não é a mesma que você depositou antes? É claro que não! Quando se trata de dinheiro o que as pessoas geralmente se importam é com seu valor, não com o veículo daquele valor.&lt;/p&gt;

&lt;p&gt;Em outras palavras, nós não damos a mínima para a &lt;em&gt;identidade&lt;/em&gt; daquela cédula em particular. A única coisa com a qual nós nos importamos é o seu valor.&lt;/p&gt;

&lt;p&gt;Não é coincidência o fato de que dinheiro é um exemplo clássico de value object na literatura.&lt;/p&gt;

&lt;h3 id=&quot;value-objects-são-imutáveis&quot;&gt;Value Objects São Imutáveis&lt;/h3&gt;

&lt;p&gt;Você consegue mudar o número cinco? Não. Não há nada que você (ou qualquer outra pessoa) possa fazer para mudar o valor do número 5. Se você adicionar 1, ele não muda. Você tem agora 6, que é um &lt;em&gt;outro&lt;/em&gt; número.&lt;/p&gt;

&lt;p&gt;É possível alterar uma data? Não, também não dá para fazer isso. Se você inicia com “2018-01-09” e adiciona um dia, você chega em “2018-01-10.” O valor original não é alterado de forma alguma. Na verdade, a imutabilidade de um value object é uma consequência direta do ponto anterior; como um value object não possui identidade, podemos dizer que o value object &lt;em&gt;é&lt;/em&gt; o seu valor. Portanto, nem sequer faz sentido falar sobre mudá-lo.&lt;/p&gt;

&lt;p&gt;A implicação disso no desenvolvimento é que value objects são intrinsecamente mais seguros e mais fáceis de serem compreendidos. Não tem perigo de mudar por acidente aquilo que você não pode mudar de jeito nenhum.&lt;/p&gt;

&lt;h3 id=&quot;value-objects-têm-igualdade-estrutural&quot;&gt;Value Objects Têm Igualdade Estrutural&lt;/h3&gt;
&lt;p&gt;Imagine que você pudesse magicamente transportar pessoas para qualquer lugar que você quisesse e, por alguma razão bizarra, você tenha decidido trocar dois homens chamados “João da Silva” durante a noite. Como você acha que as suas respectivas famílias reagiriam ao encontrar um estranho em casa na manhã seguinte?&lt;/p&gt;

&lt;p&gt;Obviamente, pessoas não são intercambiáveis, mesmo que compartilhem uma ou mais características. Mesmo se nossos dois “Joães” (Joões?) tivessem não apenas o mesmo nome, mas também a mesma altura, peso, cor de pele e cabelo, eles ainda seriam duas pessoas completamente diferentes. Mesmo gêmeos idênticos (ou clones, caso você esteja numa onda meio Black Mirror) continuam sendo pessoas completamente diferentes, apesar de serem tão iguais um ao outro quanto é possível ser.&lt;/p&gt;

&lt;p&gt;Por outro lado, as pessoas mudam constantemente durante a vida, mas continuam sendo as mesmas pessoas. Pelo menos (enquanto a gente não resolver filosofar com “&lt;a href=&quot;https://www.brainyquote.com/quotes/heraclitus_107157&quot;&gt;um homem não entra no mesmo rio duas vezes&lt;/a&gt;” e coisas do tipo).&lt;/p&gt;

&lt;p&gt;Você talvez esteja se perguntando se eu divaguei demais aqui, mas é tudo de propósito. Tudo isso serve apenas para ilustrar a diferença crucial entre entidades e value objects. Com as entidades, nós nos importamos com a  sua identidade, não com o valor de seus atributos. Com value objects, é exatamente o oposto.&lt;/p&gt;

&lt;p&gt;A implicação disso, em termos de programação, é que value objects tipicamente apresentam igualidade estrutural. Faz sentido compará-los pelos seus valores, não suas referências ou identidades. Então, quando for implementar um value object, sempre faça &lt;em&gt;override&lt;/em&gt; dos métodos &lt;code class=&quot;highlighter-rouge&quot;&gt;Equals&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;GetHashCode&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;o-que-você-ganha-com-isso&quot;&gt;O que Você Ganha Com Isso?&lt;/h2&gt;
&lt;p&gt;A essa altura você já deve ter uma boa ideia do que value objects são. O que ainda não está claro é: por que você deveria usá-los? Para responder isso, vamos dar uma olhada na linha de código a seguir:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;4.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Tem algo errado com a linha acima? Bom, eu poderia dar uma de &lt;em&gt;&lt;a href=&quot;https://starwars.wikia.com/wiki/Wookieepedia:Quote_of_the_Day/Archive/Obi-Wan_Kenobi&quot;&gt;Ben Kenobi&lt;/a&gt; &lt;/em&gt;e dizer que está errada “de um certo ponto de vista.” Mas eu não vou. Ao invés disso, vou dizer que está definitivamente, sem sombra de dúvidas, errada. Não importa que compila corretamente. Também não importa que funciona um pouco (ou até na maioria) do tempo.&lt;/p&gt;

&lt;p&gt;O problema aqui é o &lt;em&gt;code smell&lt;/em&gt; conhecido como “obsessão primitiva”, isto é, a modelagem de conceitos de domínio usando tipos primitivos. As próximas seções vão explicar melhor porque isso é um problema tão sério e como o uso de &lt;em&gt;value objects&lt;/em&gt; podem ajudar.&lt;/p&gt;

&lt;h3 id=&quot;value-objects-proporcionam-contexto&quot;&gt;Value Objects Proporcionam Contexto&lt;/h3&gt;

&lt;p&gt;Por que &lt;a href=&quot;https://blog.ndepend.com/easy-miss-code-smells/&quot;&gt;obsessão primitiva é algo ruim&lt;/a&gt;? Há várias razões, mas um dos principais problemas com a linha de código que você viu na seção anterior é que há uma informação extremamente importante faltando. Como você pode ver, o código atribui o valor 4.5 à variável. Mas 4.5 o que? Metros? Quilômetros? Milhas? Parsecs? Em outras palavras, falta uma &lt;strong&gt;unidade de medida&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Isso pode ser uma receita para o desastre. Tudo o que você precisa é alguém recuperar um valor do banco de dados ou de um arquivo, pensando que representa metros mas na verdade são quilômetros. Quando a pessoa resolve usar o valor em um cálculo, adicionando quilômetros com metros…silêncio. Você agora tem um programa que, no lugar de falhar rápido como deveria, se comporta de maneira errada silenciosamente enquanto corrompe dados e gera resultados inconsistentes. Ainda bem que você usa &lt;a href=&quot;https://blog.ndepend.com/unit-testing-affect-codebases/&quot;&gt;testes unitários&lt;/a&gt;…certo?&lt;/p&gt;

&lt;p&gt;Tudo bem, nada impede você de colocar essa informação no próprio nome da variável:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;distanceInKilometers&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;4.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Certo, isso é um pouco melhor do que a versão anterior, mas ainda é uma solução muito frágil. A qualquer momento o valor pode ser atribuído a outra variável ou passado como argumento para uma função, e aí a unidade de medida é perdida.&lt;/p&gt;

&lt;p&gt;Usando value objects, você pode eliminar esse problema facilmente. Você teria apenas que escolher uma unidade para ser a representação interna do tipo - para distância, faz sentido usar o metro, por ser uma unidade do Sistema Internacional de Medidas. E aí você pode implementar diversos métodos estáticos para fabricar valores para cada unidade necessária:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromMeters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;distance2&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromKilometers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;distance2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Você poderia ainda sobrecarregar o operador “+” (ou criar um método &lt;code class=&quot;highlighter-rouge&quot;&gt;Plus&lt;/code&gt;). Dessa forma seria possível somar duas distâncias que se originaram de diferentes unidades de medida já que a representação interna é a mesma.&lt;/p&gt;

&lt;h3 id=&quot;value-objects-apresentam-segurança-de-tipo&quot;&gt;Value Objects Apresentam Segurança de Tipo&lt;/h3&gt;

&lt;p&gt;Digamos que você tem um método com a seguinte assinatura:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;PerformSomeImportantCalculation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;O que aconteceria se você cometesse um erro e invertesse os valores ao chamar o método? O programa iria silenciosamente se comportar erro, e você nem ficaria sabendo. Com sorte, a sua empresa teria um bom processo de garantia de qualidade que poderia pegar esse erro antes de chegar no ambiente de produção. Mas ficar dependendo de sorte não é lá uma grande estratégia, concorda?&lt;/p&gt;

&lt;p&gt;Pois acontece que esse é o tipo de problema que value objects são ótimos em evitar. Você teria apenas que usar topos customizados para cada conceito em vez de tipos primitivos:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;PerformSomeImportantCalculation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Distance&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Temperature&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Dessa forma, se torna impossível passar os parâmetros na ordem errada: o compilador simplesmente não deixa!&lt;/p&gt;

&lt;h3 id=&quot;value-objects-evitam-duplicação-de-lógica-de-domínio&quot;&gt;Value Objects Evitam Duplicação de Lógica de Domínio&lt;/h3&gt;

&lt;p&gt;Quando você usa tipos primitivos para modelar conceitos de domínio, a tendência é você ter um monte de código relacionado a esses conceitos espalhados por toda a aplicação. Imagine que você está criando um programa que tem o conceito de uma placa de carro, e você está usando &lt;code class=&quot;highlighter-rouge&quot;&gt;strings&lt;/code&gt; para representá-las. É claro que nem todas as strings válidas são placas válidas. Então o seu código acaba entupido de validações de placas de carro por todo lugar.&lt;/p&gt;

&lt;p&gt;Isso seria evitado criando uma classe chamada &lt;code class=&quot;highlighter-rouge&quot;&gt;LicensePlate&lt;/code&gt; e fazendo todas as validações necessárias em seu construtor. Dessa forma você consolidaria todo o código de validação em apenas um lugar; se esse código precisar mudar no futuro, você tem que mudar em apenas um lugar.&lt;/p&gt;

&lt;h2 id=&quot;value-objects-e-tipos-de-valor-não-são-sinônimos&quot;&gt;Value Objects e Tipos de Valor Não São Sinônimos&lt;/h2&gt;

&lt;p&gt;Essa seção é necessária para clarificar um erro comum, que é confundir  value objects com o conceito de value types (tipos de valor) que existe no C#. É assim: na linguagem C# nós temos &lt;a href=&quot;https://carlosschults.net/pt/tipos-valor-referencia-em-csharp/&quot;&gt;duas categorias de tipos: tipos de referência e tipos de valor.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sim, não há nada que impeça você de usar structs (tipos de valor) para implementar value objects - exemplos na Base Class Library (BCL) seriam o tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; ou os tipos numéricos primitivos. Mas você também pode usar classes tranquilamente.&lt;/p&gt;

&lt;p&gt;Por outro lado, structs não podem ser considerados value objects automaticamente. Por exemplo, embora manter structs imutáveis seja uma prática recomendada, eles não são imutáveis por padrão.&lt;/p&gt;

&lt;p&gt;Resumidamente, “tipo de valor” é um detalhe de implementação em C#/.NET e “value object” é um padrão de projeto. Mantenha isso em mente e consulte &lt;a href=&quot;https://docs.microsoft.com/pt-br/dotnet/standard/design-guidelines/choosing-between-class-and-struct&quot;&gt;as diretrizes de design da Microsoft&lt;/a&gt; e tudo vai ficar bem.&lt;/p&gt;

&lt;h2 id=&quot;value-objects-valem-a-pena&quot;&gt;Value Objects Valem a Pena!&lt;/h2&gt;

&lt;p&gt;O uso de value objects é uma técnica com um custo relativamente baixo que pode aumentar bastante a manutenibilidade e claridade do seu código. Colocando value objects em prática, você pode tornar seu código mais fácil de ser compreendido, criando interfaces que são auto-documentáveis, difíceis de serem usadas da maneira errada, e intrinsecamente &lt;em&gt;type-safe&lt;/em&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Oct 2018 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/pt/value-objects-ferramenta/</link>
        <guid isPermaLink="true">http://carlosschults.net/pt/value-objects-ferramenta/</guid>
        
        <category>csharp</category>
        
        <category>boas praticas</category>
        
        
      </item>
    
      <item>
        <title>Boas Práticas De Programação Para Os Apressados</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1539703469/coding-best-practices-1038x437_ugnhab.jpg&quot; alt=&quot;&quot; /&gt;
Photo by Ales Nesetril on Unsplash&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTA: Este post foi originalmente escrito para o blog da the SubMain.  Você pode &lt;a href=&quot;https://blog.submain.com/coding-best-practices-short-time/&quot;&gt;ler o artigo original no site deles, em inglês&lt;/a&gt;. Quando estiver por lá, baixe e experimente o CodeIt.Right.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Um dos tópicos em desenvolvimento de software que me interessa muito são boas práticas de codificação. Eu estou sempre pesquisando e buscando maneiras de aperfeiçoar meu trabalho e entregar valor de forma rápida e consistente.&lt;/p&gt;

&lt;p&gt;Pode ser meio espinhoso definir o que “&lt;a href=&quot;https://www.daedtech.com/what-is-a-best-practice-in-software-development/&quot;&gt;é realmente uma boa prática”&lt;/a&gt;. Há pessoas que inclusive sugerem &lt;a href=&quot;https://dzone.com/articles/death-best-practices&quot;&gt;aposentar o termo!&lt;/a&gt; Mas um ponto em que praticamente todos concordam é: descobrir e implementar estratégias - não importa o nome que você coloca nelas - para melhorar o resultado do seu trabalho é algo que qualquer programadora ou programador que faz jus a esse nome deveria fazer continuamente.&lt;/p&gt;

&lt;p&gt;Claro, não existe almoço grátis. A adoção de uma boa prática leva tempo, o que você provavelmente não tem muito sobrando para começo de conversa. Isso sem mencionar a gerência, nem sempre muito animados a tentarem coisas novas.&lt;/p&gt;

&lt;p&gt;Então, o que fazer se a sua equipe de desenvolvimento está sofrendo com a baixa qualidade de uma base de código, mas não tem tempo para implementar as boas práticas que remediariam a situação?&lt;/p&gt;

&lt;p&gt;A resposta que eu ofereço é o que eu vou chamar de “pacote emergencial de boas práticas”: uma pequena lista de boas práticas de programação que você pode adotar em relativamente pouco tempo para levar sua equipe e sua aplicação do completo caos para um estado mais gerenciável.&lt;/p&gt;

&lt;p&gt;Sim, eu sei que há tantos conselhos sobre boas práticas por aí que é até difícil não se sentir sobrecarregado. Por causa disso, eu restringi a minha lista de boas práticas a itens que atendam aos seguintes critérios:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;As boas práticas precisam ser fundamentais, no sentido de que elas são blocos básicos a partir dos quais você pode implementar práticas mais sofisticadas depois.&lt;/li&gt;
  &lt;li&gt;Você pode adotá-las em relativamente pouco tempo. (Eu diria que uma semana é praticável.)&lt;/li&gt;
  &lt;li&gt;O seu custo é zero ou perto disso.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As práticas a seguir atendem os critérios listados. E sem mais enrolação, aqui está: meu pacote emergencial de boas práticas de codificação, com itens listados na ordem que eles deveriam ser adotados, começando pelo mais crítico.&lt;/p&gt;

&lt;h2 id=&quot;sistema-de-controle-de-versão&quot;&gt;Sistema de Controle de Versão&lt;/h2&gt;

&lt;p&gt;Eu trabalhei uma vez em uma empresa de desenvolvimento de software na qual nenhum sistema de controle de versão era usado. Os arquivos de código fonte ficavam em uma pasta compartilhada que qualquer desenvolvedor podia acessar. Qual era o processo usado para poder editar um arquivo? Você provavelmente adivinhou: nós criávamos uma cópia do arquivo e adicionávamos “_OLD” ao final do nome.&lt;/p&gt;

&lt;p&gt;Isso aconteceu há oito ou nove anos, o que significa que as coisas devem ter melhorado, certo? Bom, provavelmente melhoraram, um pouco, mas não totalmente. Ainda tem &lt;a href=&quot;https://twitter.com/_m_b_j_/status/938785388268806146&quot;&gt;empresas por aí que não usam controle de versão&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;como-proceder&quot;&gt;Como proceder?&lt;/h3&gt;

&lt;p&gt;De agora em diante, eu vou assumir que você concorda que versionamento é uma boa prática fundamental. Caso esse não seja o caso, há muitos recursos pela web afora explicando &lt;a href=&quot;https://www.git-tower.com/learn/git/ebook/en/desktop-gui/basics/what-is-version-control#start&quot;&gt;o que um versionador é&lt;/a&gt; e &lt;a href=&quot;https://www.atlassian.com/git/tutorials/what-is-version-control#benefits-of-version-control&quot;&gt;porque você deveria usar um.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com isso resolvido, é hora de sermos mais específicos. Qual ferramenta usar? Como proceder com a sua adoção?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; é uma escolha sólida. E apesar de ter uma curva de aprendizado mais acentuada para&lt;a href=&quot;https://carlosschults.net/en/git-basics-for-tfs-users&quot;&gt;quem já está mais acostumado com sistemas de controle de versão centralizados, como Subversion ou TFVC&lt;/a&gt;, Git é o padrão &lt;em&gt;de facto&lt;/em&gt; da indústria. Então, sem sombra de dúvidas, você deve aprender git. Não fazê-lo pode prejudicar a sua carreira no futuro.&lt;/p&gt;

&lt;p&gt;Mas é possível que o Git não seja a melhor escolha para o seu time &lt;strong&gt;agora&lt;/strong&gt;. Lembre-se, você não tem muito tempo. Nós precisamos que a sua equipe adote as boas práticas o mais rápido possível.&lt;/p&gt;

&lt;p&gt;Como nós podemos fazer isso? Suponha que você tenha experiência com &lt;a href=&quot;https://subversion.apache.org/&quot;&gt;Subversion&lt;/a&gt;, pois esse era o versionador usado na empresa que você trabalhou anteriormente. Sua experiência com Git, porém, é nenhuma. Se esse é o caso, eu diria que Subversion é a melhor escolha para você. Ter que aprender um novo sistema e ensiná-lo para seus colegas ao mesmo tempo que o coloca em vigor na empresa seria demais: você iria apenas se sobrecarregar.&lt;/p&gt;

&lt;h2 id=&quot;revisão-de-código&quot;&gt;Revisão de Código&lt;/h2&gt;

&lt;p&gt;Eu não vou mentir: eu sou um grande fã de revisão de código. E &lt;a href=&quot;https://www.codinghorror.com/blog/archives/000495.html&quot;&gt;eu não estou sozinho nisso.&lt;/a&gt;. Eu já testemunhei em primeira mão como um bom processo de revisão de código pode reduzir o número de problemas em uma aplicação, tornar o código mais consistente e, mais importante ainda, espalhar conhecimento por todo o time de desenvolvimento.&lt;/p&gt;

&lt;p&gt;E aqui vai uma ótima vantagem dessa prática: revisão de código é algo relativamente fácil de ser implementado. Comece da maneira mais simples possível, e então faça adaptações na sua abordagem conforme as necessidades aparecerem.&lt;/p&gt;

&lt;h3 id=&quot;minha-definição-de-revisão-de-código&quot;&gt;Minha Definição de Revisão de Código&lt;/h3&gt;

&lt;p&gt;Falar de revisão de código pode ser complicado. As pessoas às vezes tem ideias totalmente diferentes sobre o que a expressão significa. Então eu acho que uma clarificação se faz necessária.&lt;/p&gt;

&lt;p&gt;Eu &lt;strong&gt;não&lt;/strong&gt; sou a favor de um processo de revisão de código altamente burocrático e estressante, no qual o seu código é esmiuçado, em público, durante horas. Eu não acredito que envergonhar as pessoas em público é uma forma eficaz de aumentar a qualidade de um projeto. Ao contrário, &lt;a href=&quot;https://carlosschults.net/pt/revisao-codigo-vs-programacao-em-par/&quot;&gt;o tipo de revisão de código que eu defendo&lt;/a&gt; é um processo simples, geralmente iniciado ao submeter um pull request ou usando sua IDE favorita.&lt;/p&gt;

&lt;h3 id=&quot;como-proceder-1&quot;&gt;Como Proceder&lt;/h3&gt;

&lt;p&gt;Agora que nós estamos sintonizados em relação ao significado de “revisão de código”, a próxima pergunta é: “como implementar isso na prática?” Da maneira mais simples possível que funcione.&lt;/p&gt;

&lt;p&gt;Por exemplo, se a sua empresa desenvolve em .NET e usa TFS/TFVC, você pode começar &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ColinD.ColinsALMCheckinPoliciesVS2017&quot;&gt;instalando uma política de check-in&lt;/a&gt; que exige uma revisão de código para cada check-in. Se a sua equipe usa GitHub, vocês podem usar &lt;a href=&quot;https://help.github.com/articles/about-pull-requests/&quot;&gt;pull requests&lt;/a&gt;. Apenas comece a realizar revisões de código. Então, com o tempo, vá fazendo os ajustes e adaptações necessários.&lt;/p&gt;

&lt;p&gt;Estas são algumas das questões que podem surgir ao refinar o seu processo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Qual é o objetivo da revisão de código?&lt;/strong&gt; Estamos procurando por bugs? Tentando melhorar a legibilidade?Checando se o código adere ao padrão de codificação da empresa?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Como separamos “sugestões” de “impedimentos”?&lt;/strong&gt; É OK recusar a alteração de alguém por causa de uma indentação ruim ou um nome de variável ligeiramente equivocado?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;O que fazer se revisor e revisado não conseguem chegar a um consenso?&lt;/strong&gt; Trazer um mediador para dar a palavra final? E quem seria essa pessoa?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A resposta para todas as perguntas acima podem ser encontradas na &lt;strong&gt;automação&lt;/strong&gt;. Uma boa parte do desconforto das revisões de códigos pode ser eliminada quando você emprega um &lt;a href=&quot;https://blog.submain.com/different-styles-code-analyzer/&quot;&gt;analisador de código&lt;/a&gt; para lidar com as partes automatizáveis do processo.&lt;/p&gt;

&lt;p&gt;Por exemplo, &lt;a href=&quot;https://submain.com/codeit.right/features&quot;&gt;SubMain possui um produto chamado CodeIt.Right&lt;/a&gt; que oferece feedback em tempo real de dentro do Visual Studio, lhe alertando de possíveis problemas de codificação, inclusive corrigindo problemas quando possível.&lt;/p&gt;

&lt;p&gt;Ao abraçar a automação, você deixa as pessoas da equipe livres para se preocuparem com questões de mais alto nível durante as revisões, como claridade do código ou decisões arquiteturais.&lt;/p&gt;

&lt;h2 id=&quot;builds-automatizados&quot;&gt;Builds Automatizados&lt;/h2&gt;

&lt;p&gt;Talvez você esteja pensando que eu me equivoquei nessa seção. Afinal de contas, sequer faz sentido falar de builds automatizados sem mencionar testes automatizados?&lt;/p&gt;

&lt;p&gt;Eu vou argumentar que sim, faz sentido, por uma razão muito simples: builds automatizados eliminam o famoso problema de “&lt;a href=&quot;https://blog.codinghorror.com/the-works-on-my-machine-certification-program/&quot;&gt;na minha máquina funciona&lt;/a&gt;”. &lt;/p&gt;

&lt;p&gt;Ter um local central onde os builds são feitos joga luz em vários tipos de problemas, de mal gerenciamento de dependências a falta de disciplina em testes.&lt;/p&gt;

&lt;h3 id=&quot;como-proceder-2&quot;&gt;Como Proceder&lt;/h3&gt;

&lt;p&gt;Meu conselho aqui é o mesmo que na seção anterior: faça a coisa mais simples possível que funcione.&lt;/p&gt;

&lt;p&gt;Se sua equipe já usa TFS, aprenda como &lt;a href=&quot;https://docs.microsoft.com/en-us/vsts/build-release/actions/ci-cd-part-1&quot;&gt;criar uma definição de build&lt;/a&gt;. Se os seus projetos estão no GitHub, dê uma olhada no &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com o tempo, você vai melhorando a sua estratégia. Lembra dos analisadores de código que eu mencionei anteriormente? É possível integrá-los no seu processo de build. &lt;a href=&quot;https://carlosschults.net/pt/testes-unitarios-iniciantes-parte1&quot;&gt;Testes unitários&lt;/a&gt; e outros tipos de testes automatizados também são uma valiosa adição.&lt;/p&gt;

&lt;p&gt;E por falar nisso…&lt;/p&gt;

&lt;h2 id=&quot;ausências-notáveis&quot;&gt;Ausências Notáveis&lt;/h2&gt;

&lt;p&gt;Você talvez tenha se surpreendido por minha lista de boas práticas não incluir testes unitários, mesmo eu sendo um defensor da importância de testes automatizados para a qualidade de uma aplicação. Qual é a razão disso?&lt;/p&gt;

&lt;p&gt;Infelizmente, adicionar testes unitários a uma aplicação legada é muito difícil, ao ponto de existir até &lt;a href=&quot;https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052/ref=sr_1_1?ie=UTF8&amp;amp;qid=1515443597&amp;amp;sr=8-1&amp;amp;keywords=working+effectively+with+legacy+code&quot;&gt;um livro famoso&lt;/a&gt; que foca apenas nisso. Não é uma tarefa fácil de se fazer em pouco tempo.&lt;/p&gt;

&lt;p&gt;Também é possível que muitos de vocês esperavam que eu falasse sobre código limpo ou os princípios &lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&quot;&gt;SOLID&lt;/a&gt;. Eu encorajo vocês a lerem e pesquisarem sobre esses tópicos, mas eu não acredito que eles encaixam no propósito do post de hoje. Como o próprio nome deixa claro, eles são &lt;em&gt;princípios&lt;/em&gt;. Pense neles como diretrizes filosóficas. Úteis? Claro. Mas não tão fáceis de decompor em conselhos pequenos, simples e acionáveis.&lt;/p&gt;

&lt;h2 id=&quot;implemente-essas-práticas-para-ontem&quot;&gt;Implemente Essas Práticas Para Ontem!&lt;/h2&gt;

&lt;p&gt;É possível que vários de vocês tenha achado essas práticas extremamente básicas e não dignas de um post. “Quem é que não usa controle de versão em 2018???”&lt;/p&gt;

&lt;p&gt;Bom, não é tão difícil assim encontrar evidência (anedótica, mas ainda assim) que &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/65931/are-there-serious-companies-that-dont-use-version-control-and-continuous-integr&quot;&gt;as coisas ainda não são tão perfeitas&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Acreditar que mesmo práticas tão fundamentais como versionamento de código ou testes automatizados são aplicadas universalmente é mais ingenuidade do que talvez queremos admitir.&lt;/p&gt;

&lt;p&gt;Para o restante de vocês, eu espero que essa lista seja útil.&lt;/p&gt;

&lt;p&gt;Você já deve ter ouvido o ditado. “Quando estiver em um buraco, para de cavar.” E é exatamente esse o tipo de ajuda que eu quis oferecer com esse post: correções rápidas e fáceis, para que você e as demais pessoas em seu tipo possam recuperar o suficiente de sanidade para poderem focar e recuperar o controle de sua aplicação, garantido sua saúde a longo prazo.&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Oct 2018 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/pt/boas-praticas-sem-tempo/</link>
        <guid isPermaLink="true">http://carlosschults.net/pt/boas-praticas-sem-tempo/</guid>
        
        <category>csharp</category>
        
        <category>boas praticas</category>
        
        
      </item>
    
      <item>
        <title>4 Erros Comuns Com Data e Hora no C# — E como evitá-los</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1531165684/4-datetime-mistakes-1038x437_nm6csc.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTA: Eu escrevi este post originalmente para o blog da SubMain.  Você pode &lt;a href=&quot;https://blog.submain.com/4-common-datetime-mistakes-c-avoid/&quot;&gt;conferir o original no site deles, em inglês&lt;/a&gt;. Enquanto estiver por lá, dê uma conferida no CodeIt.Right, uma ferramenta que pode lhe ajudar com problemas relacionados a tempo e muitos outros.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Você se lembra daqueles posts no estilo “inverdades que programadores acreditam sobre &lt;em&gt;X&lt;/em&gt;” que ficaram bastante populares em blogs de software há alguns anos? O primeiro foi sobre &lt;a href=&quot;https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/&quot;&gt;nomes&lt;/a&gt;, mas logo apareceram vários outros, cobrindo tópicos como &lt;a href=&quot;https://www.mjt.me.uk/posts/falsehoods-programmers-believe-about-addresses/&quot;&gt;endereços&lt;/a&gt;, &lt;a href=&quot;https://wiesmann.codiferes.net/wordpress/?p=15187&amp;amp;lang=en&quot;&gt;geografia&lt;/a&gt; e &lt;a href=&quot;https://wiesmann.codiferes.net/wordpress/?p=22201&quot;&gt;compras online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O meu favorito era &lt;a href=&quot;https://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time&quot;&gt;o post sobre tempo&lt;/a&gt;. Até esse ponto, eu não havia pensado profundamente sobre tempo e e suas intricacies, e eu fiquei intrigado em saber que um domínio tão fundamental pudesse ser um terreno tão fértil para bugs e confusões.&lt;/p&gt;

&lt;p&gt;Agora, mesmo eu tendo gostado do post, eu vejo um problema com ele: o post lista vários suposições erradas, e basicamente para por aí. Quem lê o artigo provavelmente termina se perguntando:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Por que essas suposições são falsas?&lt;/li&gt;
  &lt;li&gt;Qual é a probabilidade de eu me dar mal por causa dessas inverdades?&lt;/li&gt;
  &lt;li&gt;Qual é a maneira adequada de lidar com esses problemas?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O artigo é interessante, mas eu acho que faria sentido oferecer informações um pouco mais acionáveis.&lt;/p&gt;

&lt;p&gt;E é exatamente esse é o objetivo do post de hoje. Eu vou mostrar 4 erros comuns que as pessoas cometem ao lidar com tempo em C#/.NET. E não para por aí. Eu também vou mostrar o que você deve fazer para evitar esses erros e tornar seu código mais seguro e mais fácil de ser compreendido.&lt;/p&gt;

&lt;h2 id=&quot;1-calculando-durações-de-maneira-ingênua&quot;&gt;1. Calculando Durações de Maneira Ingênua&lt;/h2&gt;

&lt;p&gt;Considere o código abaixo:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/3e18612b9a9238382b6d4fa3c574a231.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Ele funciona corretamente? Depende de onde e quando ele será executado.&lt;/p&gt;

&lt;p&gt;Quando você usa &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime.Now&lt;/code&gt;, o valor que você obtém representa a data e hora locais em relação à máquina atual (ou seja, a propriedade &lt;code class=&quot;highlighter-rouge&quot;&gt;Kind&lt;/code&gt; está configurada para &lt;code class=&quot;highlighter-rouge&quot;&gt;Local&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Se o lugar que você mora observa Horário de Verão, então você sabe que existe um dia do ano no qual você deve adiantar os relógios em uma certa medida (geralmente 1 hora, embora existam lugares que ajustam por outras quantidades). E é claro, existe também um dia no qual o oposto acontece.&lt;/p&gt;

&lt;p&gt;Agora imagine o que seguinte: hoje é 12 de março de 2017, e você more na cidade de Nova York. Você começa a usar o programa acima. O método &lt;code class=&quot;highlighter-rouge&quot;&gt;StartMatch()&lt;/code&gt; é executado exatamente às 13h. Uma hora e quinze minutos mais tarde, o método &lt;code class=&quot;highlighter-rouge&quot;&gt;EndMatch&lt;/code&gt; é executado. O cálculo é realizado e o texto abaixo é exibido:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Duration of the match: 00:02:15&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Eu imagino que você compreendeu o que aconteceu aqui: quando os relógios estavam prestes a marcar 14h, o Horário de Verão entrou em efeito, movendo-os diretamente para 15h. Então o método &lt;code class=&quot;highlighter-rouge&quot;&gt;EndMatch&lt;/code&gt; recuperou o horário atual, somando uma hora adicional ao cálculo. Se o experimento tivesse acontecido no fim do Horário de Verão, o resultado seria apenas 15 minutos!&lt;/p&gt;

&lt;p&gt;Sim, o código mostrado é apenas um exemplo, uma brincadeira. Mas e se fosse algo mais sério? Uma aplicação de folha de pagamento, digamos. Você gostaria de pagar o valor errado a um funcionário?&lt;/p&gt;

&lt;h3 id=&quot;o-que-fazer&quot;&gt;O que fazer?&lt;/h3&gt;

&lt;p&gt;Quando precisar calcular a duração de atividades humanas, use UTC para os tempos de início e fim. Dessa forma, você será capaz de &lt;strong&gt;referenciar de maneira não ambígua um ponto específico no tempo&lt;/strong&gt;. Ao invés de usar a propriedade &lt;code class=&quot;highlighter-rouge&quot;&gt;Now&lt;/code&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;UtcNow&lt;/code&gt; para recuperar a data e hora já em formato UTC para realizar os cálculos:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/82492845edaa8f8fc16c646ed2bbcf2a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Mas e se os valores &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; que você tem já são do tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;Local&lt;/code&gt;? Nesse caso, você deve usar o método &lt;code class=&quot;highlighter-rouge&quot;&gt;ToUniversalTime()&lt;/code&gt; para convertê-los para UTC:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/58837695af07386836753ef6541233aa.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;uma-rápida-advertência-sobre-touniversaltime&quot;&gt;Uma Rápida Advertência Sobre &lt;code class=&quot;highlighter-rouge&quot;&gt;ToUniversalTime()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;O uso do método &lt;code class=&quot;highlighter-rouge&quot;&gt;ToUniversalTime()&lt;/code&gt; - e seu irmão, &lt;code class=&quot;highlighter-rouge&quot;&gt;ToLocalTime()&lt;/code&gt; - pode ser um pouco chato. O problema é que esses métodos fazem suposições sobre o que você quer baseados no valor da propriedade &lt;code class=&quot;highlighter-rouge&quot;&gt;Kind&lt;/code&gt; do objeto datetime que você tem, o que pode trazer resultados inesperados.&lt;/p&gt;

&lt;p&gt;Ao chamar &lt;code class=&quot;highlighter-rouge&quot;&gt;ToUniversalTime()&lt;/code&gt;, uma das seguintes coisas vai acontecer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Se &lt;code class=&quot;highlighter-rouge&quot;&gt;Kind&lt;/code&gt; estiver configurado como UTC, o mesmo valor é retornado.&lt;/li&gt;
  &lt;li&gt;Por outro lado, se estiver configurado como &lt;code class=&quot;highlighter-rouge&quot;&gt;Local&lt;/code&gt;, então o valor correspondente em UTC é retornado.&lt;/li&gt;
  &lt;li&gt;Finalmente, se &lt;code class=&quot;highlighter-rouge&quot;&gt;Kind&lt;/code&gt; estiver como &lt;code class=&quot;highlighter-rouge&quot;&gt;Unspecified&lt;/code&gt;, &lt;strong&gt;então é assumido que o objeto sempre teve a intenção de ser local,&lt;/strong&gt;, e você recebe o valor correspondente à conversão para UTC.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O problema aqui é que &lt;a href=&quot;https://codeofmatt.com/2013/04/25/the-case-against-datetime-now/#localkindsdontroundtrip&quot;&gt;valores de data/hora locais não não “transportáveis”&lt;/a&gt;. Como assim? Eles são locais enquanto eles permanecerem no contexto da máquina atual. Se você salva um datetime local para um banco de dados e depois o recupera de lá, a informação de que ele é local se perde: agora ele é &lt;code class=&quot;highlighter-rouge&quot;&gt;Unspecified&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Assim, o seguinte cenário pode acontecer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Você recupera a data e hora atuais usando &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime.UtcNow&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Você salva esse valor no banco de dados.&lt;/li&gt;
  &lt;li&gt;Outra parte do código recupera esse valor. Sem estar ciente de que o valor já está em UTC, chama o método &lt;code class=&quot;highlighter-rouge&quot;&gt;ToUniversalTime()&lt;/code&gt; na instância.&lt;/li&gt;
  &lt;li&gt;Como o valor recuperado do banco possui o tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;Unspecified&lt;/code&gt;, o método vai tratá-lo como local e realizar uma conversão desnecessária, gerando um valor errado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Como evitar que isso aconteça? Uma prática recomendada é usar UTC para armazenar o tempo em que um evento aconteceu. Minha sugestão é seguir esse conselho e também esse fato bem explícito. Coloque o sufixo “UTC” em cada coluna de tabela no banco de dados e também em nomes de propriedades que se referem a um valor em UTC. Ao invés de “Inclusao”, use “InclusaoUTC” e assim por diante. Não é tão bonito, mas com certeza é mais claro.&lt;/p&gt;

&lt;h2 id=&quot;2-não-usar-utc-quando-deveria-e-vice-versa&quot;&gt;2. Não Usar UTC Quando Deveria (e vice-versa)&lt;/h2&gt;

&lt;p&gt;Nós podemos definir isso como uma regra universal: use UTC para registrar quando eventos aconteceram. Ao logar, auditar, e registrar todo tipo de &lt;em&gt;timestamps&lt;/em&gt; na sua aplicação, UTC é a resposta.&lt;/p&gt;

&lt;p&gt;Então, é só usar UTC em todo lugar! Certo? Não, não tão rápido.&lt;/p&gt;

&lt;p&gt;Digamos que você precisa ser capaz de reconstruir o tempo local - na perspectiva do usuário - de quando algo aconteceu, e a única informação que você tem é um &lt;em&gt;timestamp&lt;/em&gt; em UTC. Mal dia.&lt;/p&gt;

&lt;p&gt;Em casos assim, faria mais sentido (a) registrar o momento em UTC e gravar também o fuso horário do usuário ou (b) usar o tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTimeOffset&lt;/code&gt;, que armazena a data/hora local junto com o deslocamento, ou &lt;em&gt;offset&lt;/em&gt;, para UTC, permitindo que você reconstrua o valor em UTC quando precisar.&lt;/p&gt;

&lt;p&gt;Outro caso de uso comum para o qual UTC não é a solução correta é  &lt;a href=&quot;https://stackoverflow.com/questions/19626177/how-to-store-repeating-dates-keeping-in-mind-daylight-savings-time?noredirect=1&amp;amp;lq=1&quot;&gt;o agendamento de eventos locais no futuro&lt;/a&gt;. Você não quer que seu alarme acorde você uma hora mais cedo ou uma hora mais tarde nos dias de transição do Horário de Verão, certo? Pois é exatamente isso que aconteceria se você configurasse o seu alarme pelo horário UTC.&lt;/p&gt;

&lt;h2 id=&quot;3-não-validar-entrada-dos-usuários&quot;&gt;3. Não Validar Entrada dos Usuários&lt;/h2&gt;

&lt;p&gt;Imagine que você criou uma aplicação desktop simples que permite que usuários configurem lembretes. A pessoa informa a data e hora que quer receber o lembrete, clica em um botão, e pronto.&lt;/p&gt;

&lt;p&gt;Tudo parece estar funcionando direito até que alguém do Brasil envia um e-mail para você, reclamando que o lembrete que ela configurou para 15 de outubro às 0h15 não funcionou. O que será que aconteceu?&lt;/p&gt;

&lt;h3 id=&quot;o-horário-de-verão-contra-ataca&quot;&gt;O Horário de Verão Contra Ataca&lt;/h3&gt;

&lt;p&gt;O vilão aqui é o bom e velho Horário de Verão novamente. Em 2017, o Horário de Verão no Brasil começou à meia-noite do dia 15 de outubro. Então, a combinação de data e hora que a usuária informou &lt;strong&gt;simplesmente não existe em seu fuso-horário!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;É claro que o problema oposto também é possível. Quando o Horário de Verão chega ao fim e os relógios são atrasados, isso &lt;strong&gt;gera horas ambíguas&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;qual-é-a-solução&quot;&gt;Qual É A Solução?&lt;/h3&gt;

&lt;p&gt;Como lidar com esse tipo de problema no C#? A classe &lt;code class=&quot;highlighter-rouge&quot;&gt;TimeZoneInfo&lt;/code&gt; pode lhe salvar. Ela serve para representar um fuso horário e também oferece métodos para verificar se um determinado objeto &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; é válido:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/2b94d57390b3518294730c01003f159c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Mas o que fazer então? O que deveria substituir os comentários “do something” nos trechos acima?&lt;/p&gt;

&lt;p&gt;Você poderia mostrar uma mensagem dizendo que a data informada é inválida. Ou você poderia escolher outra data para a pessoa automaticamente.&lt;/p&gt;

&lt;p&gt;Vamos abordar o caso das horas inválidas primeiro. Suas opções são: mover para frente ou para trás. É uma decisão meio arbitrária, então qual você deve escolher? Por exemplo, o app do Google Calendar no Android move para frente. E até que faz sentido se você parar pra pensar. Isso é exatamente o que seus relógios fizeram devido ao horário de verão. Por que sua aplicação não pode fazer o mesmo?&lt;/p&gt;

&lt;p&gt;E no caso das horas ambíguas? Você também tem duas opções: escolher entre a primeira e segunda ocorrências. Novamente, é meio arbitrário, mas eu aconselho você a escolher a primeira ocorrência, pelo simples fato de tornar as coisas mais simples.&lt;/p&gt;

&lt;h2 id=&quot;4-confundir-um-offset--com-um-fuso-horário&quot;&gt;4. Confundir um &lt;em&gt;Offset&lt;/em&gt;  com um Fuso Horário&lt;/h2&gt;

&lt;p&gt;Considere o timestamp a seguir: 1995-07-14T13:05:00.0000000-03:00. Quando alguém pergunta o que o “-03:00” no final é chamado, muita gente responde “o fuso horário”.&lt;/p&gt;

&lt;p&gt;A questão é essa. Essas pessoas provavelmente assumem corretamente que o número representa o offset, ou deslocamento, em relação a UTC. Também é provável que elas sabem que podem reconstruir a hora correspondente em UTC por meio desse offset. (Muitos desenvolvedores não entendem que, em uma string assim, o offset já está aplicado: para obter o tempo em UTC, você deve inverter o sinal do offset. E só depois, aplicá-lo ao valor da hora).&lt;/p&gt;

&lt;p&gt;O erro está em achar que o offset é a única informação que um fuso horário representa. Mas não é. Um fuso horário é uma área geográfica, e contém muitas informações, tais como:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Um ou mais offsets. (Horário de verão existe, afinal de contas.)&lt;/li&gt;
  &lt;li&gt;As datas nas quais as transições do horário de verão acontecem. (As quais podem mudar e mudam, sempre que os políticos resolvem).&lt;/li&gt;
  &lt;li&gt;A quantidade de tempo pelo qual os relógios são atrasados ou adiantados na transição. (Não é uma hora em todo lugar.)&lt;/li&gt;
  &lt;li&gt;O registro histórico das mudanças nas regras acima.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Em resumo: não tente adivinhar um fuso horário pelo offset. Você vai errar a maioria das vezes.&lt;/p&gt;

&lt;h2 id=&quot;quer-aprender-sobre-tempo-já-não-era-sem-tempo&quot;&gt;Quer aprender sobre tempo? Já não era sem tempo!&lt;/h2&gt;

&lt;p&gt;Esta lista não é de forma alguma exausitiva. Eu apenas quis oferecer a vocês uma introdução ao fascinante e meio bizarro mundo dos problemas com hora e data em programação. Há muitos recursos valiosos por aí, como&lt;a href=&quot;https://stackoverflow.com/tags/timezone/info&quot;&gt;a tag time zone no Stack Overflow&lt;/a&gt; ou blogs como &lt;a href=&quot;https://codeblog.jonskeet.uk/&quot;&gt;o de Jon Skeet&lt;/a&gt; e &lt;a href=&quot;https://codeofmatt.com/&quot;&gt;o de Matt Johnson&lt;/a&gt; que são autores da popular biblioteca NodaTime.&lt;/p&gt;

&lt;p&gt;E finalmente, sempre use as ferramentas que estão à sua disposição. Por exemplo, &lt;a href=&quot;https://blog.submain.com/codeit-right-rules-explained-part-2/&quot;&gt;o produto da SubMain chamado CodeIt.Right&lt;/a&gt; tem uma regra que você a especificar um &lt;code class=&quot;highlighter-rouge&quot;&gt;IFormatProvider&lt;/code&gt; em situações nas quais é opcional, o que pode acabar salvando você de bugs difíceis ao fazer tratamento de datas.&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Jul 2018 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/pt/4-erros-comuns-datetime-csharp/</link>
        <guid isPermaLink="true">http://carlosschults.net/pt/4-erros-comuns-datetime-csharp/</guid>
        
        <category>csharp</category>
        
        <category>boas praticas</category>
        
        <category>tempo</category>
        
        
      </item>
    
      <item>
        <title>Revisão de Código vs Programação em Par: Qual a sua equipe deve escolher?</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1516470435/code-review-vs-pair-programming1038x437_w99q2t.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTA: Eu escrevi este post originalmente para o blog da SubMain. Você pode &lt;a href=&quot;https://blog.submain.com/code-review-vs-pair-programming-2/&quot;&gt;conferir o artigo original no site deles, em inglês&lt;/a&gt;. Enquanto estiver por lá, dê uma conferida no CodeIt.Right, uma ferramenta que pode lhe ajudar com automação de revisões de código.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Algumas semanas atrás, eu estava olhando o Twitter quando vi isso:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Pair Programming &amp;gt; Code Review&lt;/p&gt;&amp;mdash; Rafael Ponte (@rponte) &lt;a href=&quot;https://twitter.com/rponte/status/932390250848178176?ref_src=twsrc%5Etfw&quot;&gt;November 19, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;O que se seguiu foi uma breve discussão entre o autor e eu. Ele apresentou bons argumentos, mas eu continuei não convencido de que programação em par (&lt;em&gt;pair programming&lt;/em&gt;) era um vencedor tão óbvio.&lt;/p&gt;

&lt;p&gt;Como eu já havia implementado práticas de revisão de código (&lt;em&gt;code review&lt;/em&gt;) com sucesso e também pareado até certo ponto, eu não tinha dificuldades em ver como as duas práticas podem ser valiosas. Mas será que uma deles é claramente &lt;em&gt;melhor&lt;/em&gt; que a outra? Revisão de código e programação em par são intercambiáveis, ou há cenários em que um ou outro claramente se destaca?&lt;/p&gt;

&lt;p&gt;É o que vou responder hoje. Vamos lá.&lt;/p&gt;

&lt;h2 id=&quot;o-que-quero-dizer-por-revisão-de-código&quot;&gt;O que quero dizer por “Revisão de Código”&lt;/h2&gt;

&lt;p&gt;Imagine a seguinte cena: você é um(a) jovem programador(a) em seu primeiro trabalho com desenvolvimento de software. Após terminar sua primeira tarefa, você é convocado(a) a uma sala de reunião; lá você encontra o desenvolvedor líder e três desenvolvedores seniores. Um monitor enorme está ligado exibindo seu código. Hora da revisão!&lt;/p&gt;

&lt;p&gt;Durante duas horas e meia sofridas, seu código é julgado sem só enquanto você sua profusamente. Desde suas decisões de projeto até as mais triviais preferências estilísticas, nada escapa da enxurrada de críticas.&lt;/p&gt;

&lt;p&gt;É essa a cena exibida na sua mente quando você vê as palavras “revisão de código”?&lt;/p&gt;

&lt;p&gt;Boa notícias pra você, então. Este &lt;em&gt;não&lt;/em&gt; é o tipo de revisão de código sobre o qual estou falando. Ao invés, pense em um processo bem leve e informal. Você submete seu código para revisão criando um pull request ou mesmo usando alguma funcionalidade incorporada na sua IDE.&lt;/p&gt;

&lt;h3 id=&quot;a-parte-boa&quot;&gt;A parte boa&lt;/h3&gt;

&lt;p&gt;Após tocar brevemente no “o que” e no “como” de uma revisão de código, hora de abordarmos o “por que”. Por que o seu time deve adotar a prática? Quais são os benefícios?&lt;/p&gt;

&lt;p&gt;A primeira razão, não surpreendentemente, é &lt;strong&gt;detectar bugs&lt;/strong&gt;. Eu aposto que você é familiar com aquela velha pérola de sabedoria que diz que &lt;a href=&quot;https://www.cs.umd.edu/projects/SoftEng/ESEG/papers/82.78.pdf&quot;&gt;quanto mais tarde um defeito é encontrado, maior é o custo para sua resolução&lt;/a&gt;. Sendo assim, por que não usar um processo relativamente barato que pode encontrar &lt;a href=&quot;https://www.cs.umd.edu/projects/SoftEng/ESEG/papers/82.78.pdf&quot;&gt;até 60% dos defeitos&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Outra razão para a sua empresa adotar revisões de código: melhorar a &lt;strong&gt;legibilidade do código&lt;/strong&gt;. Tentar ler e entender um trecho novo de código frequentemente leva à descoberta de problemas como:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nomes ruins.&lt;/li&gt;
  &lt;li&gt;Indentação errada.&lt;/li&gt;
  &lt;li&gt;Ocorrências de &lt;a href=&quot;https://en.wikipedia.org/wiki/Cargo_cult_programming&quot;&gt;programação cargo cult&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Código não idiomático.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O revisor também pode encontrar &lt;em&gt;corner cases&lt;/em&gt; que passaram despercebidos ou ajudar na avaliação de performance do código escrito.&lt;/p&gt;

&lt;p&gt;E chegamos à última razão. Uma revisão de código bem feita pode &lt;strong&gt;espalhar conhecimento pelo time.&lt;/strong&gt; Isso destrói ilhas de conhecimento na equipe, melhorando a qualidade final do produto.&lt;/p&gt;

&lt;h3 id=&quot;a-parte-ruim&quot;&gt;A parte ruim&lt;/h3&gt;

&lt;p&gt;Enquanto alguns dizem que a revisão de código é a &lt;a href=&quot;https://blog.codinghorror.com/code-reviews-just-do-it/&quot;&gt;prática mais importante que você deve adotar&lt;/a&gt; para aperfeiçoar seu código, &lt;a href=&quot;https://blog.nelhage.com/2010/06/i-hate-code-review/&quot;&gt;tal entusiasmo não é universal&lt;/a&gt;. Assim, não poderíamos deixar de falar também das potenciais desvantagens da prática.&lt;/p&gt;

&lt;p&gt;A queixa mais comum sobre revisão de código tem a ver com &lt;strong&gt;tempo&lt;/strong&gt;. Quando você envia algum código para revisão, você obviamente precisa esperar até que a revisão seja finalizada.&lt;/p&gt;

&lt;p&gt;O que fazer durante a espera? Idealmente, sua equipe deveria quebrar o trabalho disponível em unidades pequenas e discretas, que possam ser resolvidas de maneira mais ou menos independente. Nem sempre isso é prático, porém. E falando nisso, &lt;strong&gt;a própria troca constante de tarefas pode ser prejudicial para seu foco e produtividade&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Digamos que o Bruno gastou &lt;em&gt;x&lt;/em&gt; horas implementando uma funcionalidade. Então a Ana revisa o trabalho dele e diz que a implementação está completamente errada, e ele precisa refazer tudo. &lt;strong&gt;Aquelas &lt;em&gt;x&lt;/em&gt; horas de desenvolvimento acabaram de ir para o lixo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finalmente, às vezes as pessoas desperdiçam quantidades ridículas de tempo &lt;strong&gt;discutindo sobre detalhes estéticos inúteis&lt;/strong&gt;, como a posição das chaves, ou se devem ou não incluir um underscore no nome de um campo privado. Infelizmente, debates idiotas assim às vezes escalam para níveis que tornam o local de trabalho tóxico.&lt;/p&gt;

&lt;h2 id=&quot;programação-em-par-mais-que-uma-super-revisão-de-código&quot;&gt;Programação em Par: Mais que uma super revisão de código&lt;/h2&gt;

&lt;p&gt;Programação em par é uma técnica na qual duas pessoas colaboram no código juntas, na mesma estação de trabalho.&lt;/p&gt;

&lt;p&gt;Elas periodicamente revezam em dois papéis. O &lt;em&gt;piloto&lt;/em&gt; escreve o código, pensando em voz alta para explicar suas decisões e o que está pensando. O &lt;em&gt;navegador&lt;/em&gt; observa o piloto, dando feedback e opiniões em tempo real.&lt;/p&gt;

&lt;p&gt;Seria a programação em par nada mais que “&lt;em&gt;code review on steroids&lt;/em&gt;”, &lt;a href=&quot;https://blog.codinghorror.com/pair-programming-vs-code-reviews/&quot;&gt;como coloca Jeff Atwood&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Talvez não. Um dos princípios básicos das metologias ágeis é que o desenvolvimento de software se beneficia de ciclos de feedback curtos. Levando isso em consideração, trazer a revisão de código para o mais cedo possível no processo faria bastante sentido, por estar em harmonia com os princípios ágeis.&lt;/p&gt;

&lt;h3 id=&quot;a-parte-boa-1&quot;&gt;A parte boa&lt;/h3&gt;

&lt;p&gt;Não deveria ser surpresa que a programação em par compartilha vários dos benefícios da revisão de código, como detecção de bugs, melhoras na legibilidade do código e propagação de conhecimento pela equipe.&lt;/p&gt;

&lt;p&gt;Mas a programação em par também pode oferecer benefícios exclusivos, tais como:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Mais foco&lt;/strong&gt;. A presença de um colega ao lado pode exercer uma certa pressão, lhe mantendo motivado na tarefa a ser realizada.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ciclos de feedback mais curtos.&lt;/strong&gt;. Já que seu par está revisando seu código o tempo todo, existe um risco muito menor de desperdiçar tempo graças a feedback tardio.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Aumento no uso de outras boas práticas da Engenharia de Software&lt;/strong&gt;. Como sugerido por um estudo realizado na Universidade Estadual da Carolina do Norte, &lt;a href=&quot;https://collaboration.csc.ncsu.edu/laurie/Papers/ESE%20WilliamsPairProgramming_V2.pdf&quot;&gt;equipes usando programação em par tendem a usar mais práticas de desenvolvimento como testes unitários, integração contínua e a criação de padrões de código&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;a-parte-ruim-1&quot;&gt;A parte ruim&lt;/h3&gt;

&lt;p&gt;Assim como no caso da revisão de código, programação em par está longe de ser uma prática universalmente aceita. Enquanto muitas pessoas amam a prática, &lt;a href=&quot;https://web.archive.org/web/20110101145142/https://tersesystems.com/2010/12/29/where-pair-programming-fails-for-me&quot;&gt;outras não têm histórias tão felizes para contar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vamos começar com uma reclamação comum: programação em par &lt;strong&gt;pode ser extremamente cansativa&lt;/strong&gt;. Na verdade, não é incomum ourvir que &lt;a href=&quot;https://softwareengineering.stackexchange.com/a/9518&quot;&gt;parear é mais eficaz quando usado por blocos de tempo curtos — de 1 hora a 2 horas e meia.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Evidentemente, um número ímpar de integrantes na equipe não combina muito bem com programação em par. Mas um número flutuante de pessoal disponível é inevitável.&lt;/p&gt;

&lt;p&gt;O próximo item na nossa lista de problemas é o fato de que programação em par não é muito compatível com trabalho remoto. Você pode ter uma ideia melhor do problema após ouvir o que Daniel Kaplan, que escreveu “&lt;a href=&quot;https://builttoadapt.io/what-its-like-to-pair-for-a-year-86d048494324&quot;&gt;What It’s Like to Pair for a Year&lt;/a&gt;,” tem a dizer sobre programação em par:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;These scheduling interruptions happen, but on a typical day we avoid them by having the pairs show up at the same time (for breakfast and standup), go to lunch at the same time, and leave at the same time. This maximizes the time the pairs are pairing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Em tradução livre, com grifo meu:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tais interrupções ocorrem, mas em um dia típico nós conseguimos evitá-las &lt;strong&gt;fazendo com que os pares cheguem na mesma hora (para café da manhã e reunião em pé), vão almoçar no mesmo horário, e vão para casa no mesmo horário&lt;/strong&gt;. Isso maximiza o tempo que os pares passam programando juntos.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Então, programação em par &lt;strong&gt;requer sincronismo&lt;/strong&gt;, o que pode torná-la uma opção inviável para equipes remotas (ou mesmo equipes que trabalham no mesmo local mas tem horários extremamente flexíveis).&lt;/p&gt;

&lt;p&gt;Tem gente que argumenta que trabalhar em pares pode &lt;strong&gt;prejudicar a criatividade e impedir experimentações.&lt;/strong&gt; Durante uma sessão em par, pode ser considerado rude desperdiçar o tempo de seu par tentando uma abordagem experimental que pode talvez não dar em nada. Então, a decisão mais segura possível tende a prevalecer sempre, mesmo que não seja a melhor possível.&lt;/p&gt;

&lt;p&gt;Finalmente, a programação em par não fornece um dos benefícios chave da revisão de código posterior: ter uma pessoa com zero contexto analisando o código produzido. As duas pessoas do par &lt;strong&gt;compartilham contexto desde o início da sessão&lt;/strong&gt;, o que não deve ser subestimado. As pessoas têm uma tendência a &lt;a href=&quot;https://en.wikipedia.org/wiki/IKEA_effect&quot;&gt;superestimar o valor de suas contribuições e criar laços emocionais com o que elas criam&lt;/a&gt;; por isso é tão importante conseguir uma outra pessoa que, livre desses laços, será capaz de oferecer um julgamento mais claro.&lt;/p&gt;

&lt;h2 id=&quot;revisão-de-código-vs-programação-em-par-o-veredito&quot;&gt;Revisão de Código vs Programação em Par: O Veredito?&lt;/h2&gt;
&lt;p&gt;Eu cheguei à conclusão de que, embora revisão de código e programação em par &lt;em&gt;pareçam&lt;/em&gt; equivalentes, na verdade não são. Existe uma intersecção ali, mas cada prática também apresenta benefícios e desafios únicos.&lt;/p&gt;

&lt;p&gt;Não tem como fugir do fato de que programação em par, apesar de seus benefícios, requer um número par de pessoas, trabalhando ao mesmo tempo. Se seu time consiste de pessoas vivendo em diversos fusos horários diferentes (ou mesmo uma equipe local mas com horário flexível), é fácil decidir: revisão de código na cabeça.&lt;/p&gt;

&lt;p&gt;Se a sua equipe não se encaixa na descrição acima, então eu digo: &lt;strong&gt;faça uma tentativa com programação em par&lt;/strong&gt;. Contanto que você se esforce para acomodar e ter empatia com &lt;a href=&quot;https://www.amazon.com/Quiet-Power-Introverts-World-Talking/dp/0307352153/ref=asap_bc?ie=UTF8&quot;&gt;diferentes tipos de personalidades&lt;/a&gt; e não torne obrigatório, programação em par pode ser benéfica para sua equipe.&lt;/p&gt;

&lt;p&gt;Finalmente, não há nada lhe impedindo de usar &lt;em&gt;ambas&lt;/em&gt; práticas. Você pode adotar programação em par como o &lt;em&gt;Modus Operandi&lt;/em&gt; padrão e deixar e revisão de código para preencher os vácuos onde o pareamento não funciona tão bem.&lt;/p&gt;

&lt;h2 id=&quot;de-um-jeito-ou-de-outro-abrace-a-automação&quot;&gt;De um jeito ou de outro, abrace a automação&lt;/h2&gt;
&lt;p&gt;Imagine que você escreve para uma publicação, como uma revista. Após finalizar um rascunho, ele precisa ser submetido para revisão. Será que faz sentido para a editora gastar todo seu tempo procurando por erros de ortografia? É claro que não! Nós temos ferramentas para checar tais erros de forma automática, liberando a editora para procurar por problemas em um nível mais alto, como vocabulário mal escolhido, falta de coesão, tom inapropriado, e todas aquelas coisas sobre as quais a sua professora de português não dava sossego.&lt;/p&gt;

&lt;p&gt;Com software não é diferente. Ao usar &lt;a href=&quot;https://submain.com/products/codeit.right.aspx&quot;&gt;uma ferramenta de revisão de códigos automatizados&lt;/a&gt;, você pode eliminar muitas das discussões inúteis que acontecem frequentemente em revisões de código ou sessões de programação em par. Não vai ter mais briga sobre convenções estéticas e de nomenclatura, posição de chaves e outras trivialidades inúteis.&lt;/p&gt;

&lt;p&gt;You can also employ a static analysis tool to warn you about potential bugs and opportunities for refactoring. That way, the reviewer/navigator is free to focus on the high-level stuff that requires human creativity, intelligence, and empathy.&lt;/p&gt;

&lt;p&gt;Você também pode usar uma ferramenta de análise estática para lhe alertar sobre potenciais bugs e oportunidades para refatoração. Assim, o revisor/navegador fica livre para focar em preocupações de mais alto nível que necessitam da criatividade, inteligência e empatia humanas.&lt;/p&gt;

&lt;h2 id=&quot;confiança-e-respeito&quot;&gt;Confiança e respeito&lt;/h2&gt;
&lt;p&gt;Quando estava pesquisando para escrever esse post, um tema aparecia bastante: pessoas afirmando que revisão de código surge devido à falta de confiança em nossos desenvolvedores ou que programação em par os infantiliza.&lt;/p&gt;

&lt;p&gt;Eu não poderia discordar mais.&lt;/p&gt;

&lt;p&gt;É exatamente por respeitarmos nossos colegas e clientes que devemos empregar técnicas e ferramentas à nossa disposição para melhorar a qualidade do trabalho que produzimos.&lt;/p&gt;

&lt;p&gt;Não é falta de confiança. É reconhecer que programar é difícil e às vezes, só um cérebro pode não dar conta do recado.&lt;/p&gt;

</description>
        <pubDate>Wed, 24 Jan 2018 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/pt/revisao-codigo-vs-programacao-em-par/</link>
        <guid isPermaLink="true">http://carlosschults.net/pt/revisao-codigo-vs-programacao-em-par/</guid>
        
        <category>programacao em par</category>
        
        <category>boas praticas</category>
        
        <category>revisao de codigo</category>
        
        <category>metodologias ageis</category>
        
        
      </item>
    
      <item>
        <title>Programação Cargo Cult É A Arte de Programar Por Coincidência</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1516152067/cargo-cult-programming-1037x438_spoxet.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTA: Eu escrevi este post originalmente para o blog da NDepend. Você pode &lt;a href=&quot;https://blog.ndepend.com/cargo-cult-programming/&quot;&gt;clicar aqui para ler o artigo original no site deles, em inglês&lt;/a&gt;. Enquanto estiver por lá, baixe e experimente o NDepend.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Eu ouvi falar em programação cargo cult a primeira vez há alguns anos. Eu me lembro de ter pensado na época: “Que nome estranho para um conceito relacionado com programação”.&lt;/p&gt;

&lt;p&gt;Se você compartilha do estranhamento do meu “eu” do passado, o post de hoje é para você.&lt;/p&gt;

&lt;p&gt;Primeiramente, você verá o que programação cargo cult é e por que você deve se importar. Então, vamos dar uma olhada em alguns exemplos práticos, usando a linguagem C#. Finalmente, nós encerraremos com conselhos sobre o que você pode fazer para não cair nessa armadilha.&lt;/p&gt;

&lt;h2 id=&quot;programação-cargo-cult-fazendo-as-coisas-porque-sim&quot;&gt;Programação Cargo Cult: Fazendo as coisas porque sim.&lt;/h2&gt;

&lt;p&gt;Segundo a versão em inglês da &lt;a href=&quot;https://en.wikipedia.org/wiki/Cargo_cult_programming&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cargo cult programming is a style of computer programming characterized by the ritual inclusion of code or program structures that serve no real purpose.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Em tradução livre&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Programação &lt;em&gt;cargo cult&lt;/em&gt; é um estilo de programação de computadores caracterizado pela inclusão ritualística de código ou estruturas de programação que não servem nenhum propósito real.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Em outras palavras, é quando um(a) desenvolvedor(a) escreve código sem entender realmente o que aquele código faz. Talvez uma abordagem por tentativa e erro tenha sido usada - copia o código de um lugar, cola em outro, e vai mexendo e testando até que funciona, mais ou menos. Quando chega nesse ponto a pessoa geralmente para de mexer no código, por medo de fazer parar de funcionar. No processo, talvez sobrem resquícios de código que não servem realmente para nada.&lt;/p&gt;

&lt;p&gt;Ou talvez a pessoa tenha tentado usar uma técnica aprendida com um colega, mas falhou em compreender que os conceitos são diferentes e que a tal técnica é inútil na situação atual.&lt;/p&gt;

&lt;p&gt;Por fim, também é possível que o problema seja simplesmente educação insuficiente: talvez o desenvolvedor tenha um entendimento pobre a respeito de como as ferramentas usadas funcionam.&lt;/p&gt;

&lt;h2 id=&quot;por-que-a-programação-cargo-cult-é-um-problema&quot;&gt;Por que a programação &lt;em&gt;cargo cult&lt;/em&gt; é um problema?&lt;/h2&gt;
&lt;p&gt;Como Eric Lippert diz, &lt;a href=&quot;https://blogs.msdn.microsoft.com/ericlippert/2004/03/01/syntax-semantics-micronesian-cults-and-novice-programmers/&quot;&gt;programadores cargo cult sofrem para fazer alterações significativas em um programa&lt;/a&gt; e acabam usando uma abordagem de tentativa e erro já que eles não entendem o funcionamento interno do código que estão prestes a alterar.&lt;/p&gt;

&lt;p&gt;Isso não é tão diferente do que os &lt;a href=&quot;https://pragprog.com/the-pragmatic-programmer/extracts/coincidence&quot;&gt;programadores pragmáticos chamam de “programação por coincidência”&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fred doesn’t know why the code is failing because he didn’t know why it worked in the first place. It seemed to work, given the limited “testing” that Fred did, but that was just a coincidence.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Em tradução livre:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fred não sabe porque o código está falhando porque ele não sabe porque ele funcionou da primeira vez. Parecia estar funcionando, com o “teste” limitado que Fred fez, mas era apenas uma coincidência.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A frase acima resume tudo para mim: se você não sabe como ou por que seu código funciona, você também não vai entender o que aconteceu quando ele parar de funcionar.&lt;/p&gt;

&lt;h2 id=&quot;origem-do-termo&quot;&gt;Origem do termo&lt;/h2&gt;
&lt;p&gt;Embora práticas que são consideradas “culto à carga” (&lt;em&gt;cargo cult&lt;/em&gt;) atualmente &lt;a href=&quot;https://en.wikipedia.org/wiki/Cargo_cult#First_occurrences&quot;&gt;tenham sido registradas tão cedo quanto o final do século XIX&lt;/a&gt;, o termo em si data de 1945, quando foi usado pela primeira vez para descrever práticas que surgiram durante e depois da Segunda Guerra Mundial entre habitantes da Melanésia.&lt;/p&gt;

&lt;p&gt;Os nativos começaram a imitar o comportamento dos soldados, vestindo-se como controladores de voo e balançando gravetos, na esperança de que isso faria com que aviões carregados de suprimentos descessem dos céus.&lt;/p&gt;

&lt;p&gt;Desde então, o termo culto à carga tem sido usado em uma variedade de contextos para significar &lt;strong&gt;imitar forma sem conteúdo&lt;/strong&gt; - copiar perfeitamente os elementos superficiais mas ao mesmo tempo falhando em entender de maneira mais profunda o significado e funcionamento do que se está tentando emular.&lt;/p&gt;

&lt;h2 id=&quot;falar-é-fácil-me-mostre-o-código&quot;&gt;Falar é fácil; me mostre o código!&lt;/h2&gt;
&lt;p&gt;Chega da aula de História por hoje. Hora de ver código! Eu vou mostrar cinco exemplos de programação cargo cult usando a linguagem C#. Vamos lá.&lt;/p&gt;

&lt;h3 id=&quot;checar-um-tipo-de-valor-não-nulável-for-null&quot;&gt;Checar um tipo de valor não-nulável for &lt;em&gt;Null&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;O primeiro item é algo que me incomoda já que eu vejo isso bastante em código de produção. É algo assim:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   	   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// essa verificação é inútil&lt;/span&gt;
	   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	       &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Esta linha sempre será executada.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aqui nós temos o caso de um(a) desenvolvedor(a) que provavelmente não entende a &lt;a href=&quot;https://carlosschults.net/pt/tipos-valor-referencia-em-csharp/&quot;&gt;diferença entre tipos de valor e referência&lt;/a&gt;. Seria completamente perdoável, no caso de um profissional iniciante, se não fosse pelo fato de que o compilador te avisa disso.&lt;/p&gt;

&lt;p&gt;Você pode achar isso um exagero da minha parte. Afinal de contas, o código vai rodar perfeitamente mesmo assim. Na verdade, a verificação não será nem ao mesma incluída no IL resultante, como você pode ver nesse print de uma ferramenta de descompilação:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1515684957/just-decompile1_qk69k2.png&quot; alt=&quot;Uma imagem mostrando um trecho de código que não contem a checagem de nulo.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Você pode ver no trecho de código acima que o compilador otimizou o código, removendo a checagem por nulo.&lt;/p&gt;

&lt;p&gt;Tem problemas muito piores, claro. Sim, a aplicação não vai &lt;em&gt;quebrar&lt;/em&gt; por causa disso. Então, qual é o ponto?&lt;/p&gt;

&lt;p&gt;Bom, pra começo de conversa, eu me preocuparia com uma empresa de desenvolvimento cujo único critério de qualidade é “roda sem quebrar”. Mas o problema de verdade aqui é que esse tipo de código demonstra uma falta de entendimento sobre características fundamentais da linguagem e da plataforma que podem lhe causar problemas no futuro.&lt;/p&gt;

&lt;h3 id=&quot;uso-desnecessário-de-tolist-em-consultas-do-linq-to-object&quot;&gt;Uso Desnecessário de &lt;code class=&quot;highlighter-rouge&quot;&gt;ToList()&lt;/code&gt; em consultas do LINQ to Object&lt;/h3&gt;
&lt;p&gt;Assim como o problema anterior, o item atual é algo que eu rotineiramente vejo em código de produção. Considere o código abaixo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PremiumUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Birth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateOfBirth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;O problema que temos aqui é que as chamadas ao método &lt;code class=&quot;highlighter-rouge&quot;&gt;ToList()&lt;/code&gt; são totalmente desnecessárias (exceto talvez a última, caso você realmente precisasse que o resultado fosse um lista e não apenas um &lt;code class=&quot;highlighter-rouge&quot;&gt;IEnumerable&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Em minha experiência, isso acontece quando quem escreveu o código não entende bem a natureza do LINQ; eles erroneamente acham que os métodos do LINQ pertencem ao tipo concreto &lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; ao invés de serem métodos de extensão que podem ser usados com qualquer implementação de &lt;code class=&quot;highlighter-rouge&quot;&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ao chamar &lt;code class=&quot;highlighter-rouge&quot;&gt;ToList()&lt;/code&gt; diversas vezes dessa forma, o desenvolvedor na verdade cria diversas listas novas, o que pode prejudicar o desempenho da aplicação.&lt;/p&gt;

&lt;p&gt;O código acima pode ser reescrito da seguinte forma:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PremiumUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Birth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateOfBirth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;conversões-desnecessárias&quot;&gt;Conversões Desnecessárias&lt;/h3&gt;
&lt;p&gt;Considere a linha seguinte:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creationDate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;creation_date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aqui temos não apenas uma mas duas conversões desnecessárias. Primeiro, criamos uma nova string e então a “parseamos” para &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; quando um simples &lt;em&gt;cast&lt;/em&gt; seria suficiente:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creationDate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;creation_date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Esse exemplo assume que o tipo no banco de dados é um tipo específico para lidar com datas (como &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt; ou &lt;code class=&quot;highlighter-rouge&quot;&gt;datetime&lt;/code&gt; no SQL Server). É claro que se você estivesse usando um tipo inadequado (como &lt;code class=&quot;highlighter-rouge&quot;&gt;varchar&lt;/code&gt;) então isso já seria um outro problema.&lt;/p&gt;

&lt;h3 id=&quot;try-catch-em-todo-lugar&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Try-Catch&lt;/code&gt; em todo lugar&lt;/h3&gt;
&lt;p&gt;Também conhecido como síndrome Pokémon (“Gotta catch’em all!”), o &lt;em&gt;anti-pattern&lt;/em&gt; aqui é adicionar um bloco &lt;code class=&quot;highlighter-rouge&quot;&gt;try-catch&lt;/code&gt; em cada linha em que exista a remota possibilidade de uma exceção ser disparada.&lt;/p&gt;

&lt;p&gt;Pontos bônus se o código estiver tentando capturar &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Exception&lt;/code&gt; ao invés de uma exceção mais específica, acabando com a distinção entre erros esperados e não esperados.&lt;/p&gt;

&lt;p&gt;Mais pontos se o bloco do &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt; não conter código nenhum!&lt;/p&gt;

&lt;p&gt;A dica geral aqui é: jamais capture uma exceção a não ser que você tenha uma razão muito específica para fazê-lo. Do contrário, deixe que a exceção suba até que o gerenciador de exceções geral no nível mais alto lide com ela.&lt;/p&gt;

&lt;p&gt;Se esse conselho parece vago (“Como vou saber se eu tenho uma boa razão para capturar a exceção?”), é porque de fato é. Explorar esse tema mais a fundo iria além do escopo desse post, , mas &lt;a href=&quot;https://blogs.msdn.microsoft.com/ericlippert/2008/09/10/vexing-exceptions/&quot;&gt;ler o excelente artigo do Eric Lippert chamado “Vexing Exceptions”&lt;/a&gt; vai aumentar e muito o seu entendimento sobre exceções.&lt;/p&gt;

&lt;h3 id=&quot;usar-stringbuilder-demais&quot;&gt;Usar &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; Demais&lt;/h3&gt;
&lt;p&gt;Você já deve ter visto o filme: depois de ler em algum lugar que concatenar strings usando &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; é ineficiente, nosso intrépido desenvolvedor resolve tomar pra si a tarefa hercúlea de mudar cada concatenação de string no projeto para o uso de &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A justificativa para isso, claro, é que &lt;code class=&quot;highlighter-rouge&quot;&gt;System.String&lt;/code&gt; é imutável. Então, cada vez que você “muda” a string, você na verdade está criando uma instância nova na memória, o que pode prejudicar o desempenho da aplicação.&lt;/p&gt;

&lt;p&gt;Mas adivinha só. O compilador é bem esperto. Digamos que você tenha a seguinte linha:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Isso vai ser no fim das contas traduzido para:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A regra geral é: tudo bem usar concatenação simples se você sabe o número de strings a anexar em tempo de compilação. Do contrário, &lt;a href=&quot;https://stackoverflow.com/a/21644889&quot;&gt;o uso de &lt;code class=&quot;highlighter-rouge&quot;&gt;StringBuilder&lt;/code&gt; provavelmente faz mais sentido&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lógico, alguns cenários não são tão claros assim. O único conselho que faz sentido dar aqui é: faça seu dever de casa. Quando estiver com dúvida, pesquise e faça &lt;em&gt;benchmark&lt;/em&gt; sem dó.&lt;/p&gt;

&lt;p&gt;Eu termino com mais uma dica sensata do Eric Lippert:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unnecessary code changes are expensive and dangerous; &lt;strong&gt;don’t make performance-based changes unless you’ve identified a performance problem.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;existe-solução&quot;&gt;Existe Solução?&lt;/h2&gt;
&lt;p&gt;Eu diria que é justo supor que pessoas com menos experiência são mais propensas a cometer erros devido à programação cargo cult. Mas desenvolvedor nenhum está realmente a salvo, independentemente de seu nível de conhecimento ou experiência.&lt;/p&gt;

&lt;p&gt;Nós somos apenas humanos no fim das contas. Cansaço, prazos, vieses cognitivos e (para ser realmente honesto) a preguiça eventual pode transformar até o melhor de nós em um programador cargo cult.&lt;/p&gt;

&lt;p&gt;Infelizmente, não há uma maneira 100% garantida de impedir isso de acontecer. Mesmo assim, aqui vão algumas medidas que você pode tomar para, ao menos, diminuir as chances.&lt;/p&gt;

&lt;p&gt;Vamos ver algumas delas.&lt;/p&gt;

&lt;h3 id=&quot;use-revisão-de-códigoprogramação-em-par&quot;&gt;Use Revisão de Código/Programação em Par&lt;/h3&gt;
&lt;p&gt;A primeira medida que você pode tomar para evitar o cargo cult é simplesmente ter uma segunda pessoa olhando seu código. Os benefícios de ter uma outra pessoa revisando cada linha de código antes que ela chegue em produção não podem ser subestimados. E embora &lt;a href=&quot;https://blog.submain.com/code-review-vs-pair-programming-2/&quot;&gt;revisão de código e programação em par não são exatamente equivalentes&lt;/a&gt;, ambas as práticas podem lhe trazer esse benefício.&lt;/p&gt;

&lt;h3 id=&quot;sempre-teste-suas-hipóteses&quot;&gt;Sempre Teste Suas Hipóteses&lt;/h3&gt;
&lt;p&gt;Escreva &lt;a href=&quot;https://carlosschults.net/pt/testes-unitarios-iniciantes-parte1&quot;&gt;testes de unidade&lt;/a&gt; (e outros tipos de testes também). Monitore sua aplicação em produção. Se algo não está tendo um bom desempenho, faça &lt;em&gt;benchmarks&lt;/em&gt; exaustivos. Não faça só suposições. Testar as suas hipóteses pode trazer &lt;em&gt;insights&lt;/em&gt; valiosos e salvar a sua pele naqueles momentos em que a sua intuição não for certeira.&lt;/p&gt;

&lt;h3 id=&quot;leia-código-de-outras-pessoas&quot;&gt;Leia Código de Outras Pessoas&lt;/h3&gt;
&lt;p&gt;Ler código escrito por outras pessoas é uma ótima maneira de aprender. É uma ferramenta perfeita para comparar suas ideias e suposições contra o que outros desenvolvedores estão fazendo, expondo você a novos conceitos que podem lhe forçar a ganhar um entendimento maior dos problemas que está tentando resolver.&lt;/p&gt;

&lt;p&gt;Na era do &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;, não tem muita desculpa para não fazer isso.&lt;/p&gt;

&lt;h3 id=&quot;aprenda-com-suas-ferramentas&quot;&gt;Aprenda Com Suas Ferramentas&lt;/h3&gt;
&lt;p&gt;Existe um número enorme de ferramentas que podem ajudar &lt;a href=&quot;https://www.ndepend.com/&quot;&gt;sua equipe com a qualidade do seu código&lt;/a&gt;. Aqui vai a dica principal: você não deve só usar essas ferramentas. Você deve também aprender com elas. Se você usa NDepend, &lt;a href=&quot;https://www.ndepend.com/default-rules/webframe.html&quot;&gt;leia sobre suas regras&lt;/a&gt;. Tente entender a justificativa por trás de cada uma delas. Quais são os princípios e boas práticas que guiaram seus autores durante a criação delas?&lt;/p&gt;

&lt;p&gt;A mesma dica vale para outros tipos de ferramentas, e até para os warnings que o compilador lhe mostra.&lt;/p&gt;

&lt;h2 id=&quot;ciência-da-computação-não-superstição-da-computação&quot;&gt;Ciência da Computação, Não &lt;em&gt;Superstição&lt;/em&gt; da Computação&lt;/h2&gt;
&lt;p&gt;Embora ninguém seja imune à programação cargo cult, nós devemos nos esforçar para superá-la. Há sabedoria na nossa área à nossa disposição, acumulada lentamente ao longo de mais de 7 década. Vamos usá-la. Vamos entender melhor nossas ferramentas e nossa profissão e escrever software de qualidade.&lt;/p&gt;
</description>
        <pubDate>Wed, 17 Jan 2018 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/pt/cargo-cult-programming/</link>
        <guid isPermaLink="true">http://carlosschults.net/pt/cargo-cult-programming/</guid>
        
        <category>csharp</category>
        
        <category>boas praticas</category>
        
        <category>programacao cargo cult</category>
        
        
      </item>
    
      <item>
        <title>Funcionalidades do C# 8.0: Um Vislumbre do Futuro</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1513817072/csharp8-1037x438_skogpz.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;C# 8.0 está chegando e vai trazer algumas funcionalidades muito interessantes. Vamos dar uma olhada no que o futuro reserva.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTA: Eu escrevi este post originalmente para o blog da NDepend. Você pode &lt;a href=&quot;https://blog.ndepend.com/c-8-0-features-glimpse-future/&quot;&gt;clicar aqui para ler o artigo original no site deles, em inglês&lt;/a&gt;. Enquanto estiver por lá, baixe e experimente o NDepend.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Faz quase 20 anos desde que a Microsoft lançou a primeira versão da linguagem C#. De suas origens - quando muitos injustamente a consideravam uma mera cópia do Java - até agora, C# teve uma evolução notável.&lt;/p&gt;

&lt;p&gt;Hoje em dia, o C# frequentemente aparece em listas das linguagens &lt;a href=&quot;https://insights.stackoverflow.com/survey/2017#technology-programming-languages&quot;&gt;mais usadas&lt;/a&gt; e &lt;a href=&quot;https://insights.stackoverflow.com/survey/2017#most-loved-dreaded-and-wanted&quot;&gt;mais amadas&lt;/a&gt;. Você pode usá-lo para desenvolver aplicações para PC, dispositivos móveis e Web; você pode escrever código que será executado em todos os principais sistemas operacionais. Ou você pode entrar na onda da Internet das Coisas e escrever código para tornar sua casa inteligente. Nós vivemos em tempos interessantes para ser um desenvolvedor C#.&lt;/p&gt;

&lt;p&gt;Se o presente já é animador, e o futuro? Será que é possível termos um vislumbre do que o futuro reserva para a linguagem?&lt;/p&gt;

&lt;p&gt;É claro que sim. A Microsoft tem desenvolvido o C# de maneira transparante já faz um bom tempo. Você pode &lt;a href=&quot;https://github.com/dotnet/csharplang&quot;&gt;acessar o repositório do GitHub&lt;/a&gt; para ler (e participar, por que não?) nas discussões.&lt;/p&gt;

&lt;p&gt;Hoje, nó abordaremos três propostas de funcionalidades para o C# 8.0: &lt;strong&gt;extension everything&lt;/strong&gt;, &lt;strong&gt;implementações default em interfaces,&lt;/strong&gt; e &lt;strong&gt;tipos de referência nuláveis&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;extension-everything&quot;&gt;Extension Everything&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Extension everything&lt;/em&gt; - em tradução livre seria algo como “extensão em tudo” - é provavelmente a menos controversa das três propostas e também, de certa forma, a menos desenvolvida. Então eu achei que ela daria um bom ponto de partida.&lt;/p&gt;

&lt;p&gt;Você provavelmente conhece métodos de extensão, introduzidos no C# 3.0, em 2017. &lt;a href=&quot;https://www.daedtech.com/why-i-dont-like-c-extension-methods/&quot;&gt;Embora seja possível abusá-los&lt;/a&gt;, não há como negar que métodos de extensão, quando usados sabiamente, podem ser uma incrível adição ao kit de ferramentas do desenvolvedor C# - isso sem mencionar que eles são essenciais para o LINQ.&lt;/p&gt;

&lt;p&gt;Porém, em algum momento você deve ter se perguntado: por que apenas &lt;em&gt;métodos&lt;/em&gt; de extensão? E você não estaria só. Propriedades de extensão, por exemplo, tem sido um desejo dos desenvolvedores C# por muito tempo, como mostra &lt;a href=&quot;https://stackoverflow.com/questions/619033/does-c-sharp-have-extension-properties&quot;&gt;esta questão de 2009 no Stack Overflow&lt;/a&gt; ou este &lt;a href=&quot;https://channel9.msdn.com/forums/Coffeehouse/257556-C-Extension-Properties/&quot;&gt;tópico em um fórum de 2007(!)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mas agora parece que a espera está finalmente chegando ao fim. Segundo Mads Torgersen, o &lt;em&gt;program manager&lt;/em&gt; do time de design do C#, &lt;a href=&quot;https://channel9.msdn.com/Blogs/Seth-Juarez/A-Preview-of-C-8-with-Mads-Torgersen&quot;&gt;um estagiário da Microsoft propôs uma nova sintaxe para métodos de extensão que também possibilitará “outras coisas de extensão”&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;vamos-ver-o-código&quot;&gt;Vamos ver o código&lt;/h3&gt;

&lt;p&gt;Se eu fosse você estaria ansioso para ver algum código Logo abaixo temos um exemplo de um método de extensão, utilizando a sintaxe atual:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/d6ec153b7274ac699634d5dadb2e9644.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Nada surpreendente aqui, certo? Na sintaxe original, um método de extensão é apenas um método estático em uma classe estática, com a palavra-chave &lt;em&gt;this&lt;/em&gt; antes do primeiro parâmetro.&lt;/p&gt;

&lt;p&gt;O problema é que esta sintaxe apenas funciona para métodos (e como poderia ser de outra forma, já que falar de “primeiro parâmetro” de uma propriedade nem sequer faz sentido).&lt;/p&gt;

&lt;p&gt;É aqui que &lt;em&gt;extension everything&lt;/em&gt; entra. A proposta apresenta é uma nova declaração de tipo chamada de “extension”:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/5c1afca9c8fbc6837257cc5d289df2e9.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;O código acima é um exemplo; na data em que escrevo este post, o time do C# ainda não havia chegado à uma sintaxe definitiva.&lt;/p&gt;

&lt;p&gt;Enfim, o exemplo mostra a criação de uma classe de extensão para o tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;. Então nós declaramos uma propriedade do jeito que estamos acostumados, e é isso.&lt;/p&gt;

&lt;p&gt;Agora o código chamador pode usar a propriedade normalmente:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/d401d37e182647b253fa721425eec828.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Essa nova funcionalidade deverá suportar métodos, propriedades, operadores e membros estáticos, pelo menos no início; suporte a eventos e construtores pode ser adicionado posteriormente.&lt;/p&gt;

&lt;p&gt;Você não será capaz de criar estado adicional para a instância original, i.e. criar um campo privado na classe de extensão. De acordo com Torgersen, isso iria requerer uma complexidade indesejada para rastrear o valor desse novo estado.&lt;/p&gt;

&lt;h3 id=&quot;status-atual&quot;&gt;Status atual&lt;/h3&gt;

&lt;p&gt;Você pode &lt;a href=&quot;https://github.com/dotnet/csharplang/issues/192&quot;&gt;acompanhar o desenvolvimento da feature na sua issue no GitHub.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;implementação-default-em-interfaces&quot;&gt;Implementação default em interfaces.&lt;/h2&gt;

&lt;p&gt;Eu admito que fiquei surpreso - e não muito feliz - quando ouvi sobre essa feature pela primeira vez, &lt;a href=&quot;https://channel9.msdn.com/Events/Build/2017/B8104&quot;&gt;em uma palestra Mads Torgersen ministrou em maio, na conferência Build 2017.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;“E &lt;em&gt;record types&lt;/em&gt;?”eu pensei. “E objetos imutáveis? O que nós vamos realmente ganhar são implementações em &lt;em&gt;interfaces&lt;/em&gt;?”&lt;/p&gt;

&lt;p&gt;Você provavelmente pode adivinhar o que essa funcionalidade é pelo seu nome: nós seremos capazes de adicionar implementações de métodos nas interfaces. Por exemplo:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/efde91de1a54a1bc4f44c1a7a748d70c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Em C# 8.0, o código acima seria perfeitamente legal. Uma classe implementando a interface não precisaria disponibilizar uma implementação para o método. Se alguma implementação da interface decidir, em algum momento, que a implementação padrão não atende mais suas necessidades, então ela pode fazer sua própria implementação.&lt;/p&gt;

&lt;p&gt;Além de métodos, também será permitido adicionar implementações em indexadores, propriedades e assessores de eventos. Membros estáticos como métodos, propriedades e indexadores também serão permitidos.&lt;/p&gt;

&lt;p&gt;Estado de instância não será permitido nas interfaces, no entanto. Você será capaz de usar campos estáticos mas não campos de instância. Como consequência disso, propriedades automáticas também não serão permitidas, já que elas declaram um campo privado implicitamente.&lt;/p&gt;

&lt;h3 id=&quot;casos-de-uso&quot;&gt;Casos de uso&lt;/h3&gt;

&lt;p&gt;Conforme declarado na &lt;a href=&quot;https://github.com/dotnet/csharplang/blob/master/proposals/default-interface-methods.md&quot;&gt;proposta da feature&lt;/a&gt;, o principal caso de uso para implementações padrão nas interfaces é possibilitar que uma interface possa evoluir de maneira segura. Você vai poder adicionar novos membros à interface, contato que você forneça uma implementação padrão, clientes existentes não serão forçados à implementá-los.&lt;/p&gt;

&lt;p&gt;Atualmente, você poderia solucionar isso com um método de extensão, mas essa abordagem tem limites: e se você depois decidisse fornecer uma versão especializada do método para uma das implementações? Boa sorte.&lt;/p&gt;

&lt;p&gt;É aí que as implementações padrão brilham.&lt;/p&gt;

&lt;p&gt;Outra proposta de valor importação dessa feature tem relação com os sistemas Android e iOs. Já que tanto Java e Swift oferecem implementações padrão em interfaces, pode ser complicado &lt;em&gt;envelopar&lt;/em&gt; APIs do Android e iOs que fazem uso desta funcionalidade. Com a oitava versão do C#, será possível adaptar tais APIs de maneira mais fiel.&lt;/p&gt;

&lt;h3 id=&quot;as-interfaces-vão-virar-classes-abstratas&quot;&gt;As interfaces vão virar classes abstratas?&lt;/h3&gt;

&lt;p&gt;Mais ou menos, mas não realmente. Como você sabe, não há herança múltipla em linguagens coo C# e Java, o que significa que não é possível herdar de mais de uma classe. Por outro lado, uma classe é (e continuará sendo) capaz de implementar várias interfaces.&lt;/p&gt;

&lt;h3 id=&quot;status-atual-1&quot;&gt;Status atual&lt;/h3&gt;

&lt;p&gt;Essa funcionalidade está sendo prototipada. &lt;a href=&quot;https://github.com/dotnet/csharplang/blob/master/proposals/default-interface-methods.md&quot;&gt;Você pode seguir seu desenvolvimento na issue no GitHub.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;tipos-de-referência-nuláveis&quot;&gt;Tipos de Referência Nuláveis&lt;/h2&gt;

&lt;p&gt;“O quê?”, você talvez esteja pensando. “Não seria ‘tipos de referência &lt;strong&gt;não&lt;/strong&gt;-nuláveis’?” O nome dessa funcionalidade pode realmente confundir um pouco. Vou voltar a isso mais tarde, mas antes, vamos explicar a razão de uma feature como essa ser sequer considerada.&lt;/p&gt;

&lt;p&gt;Eu aposto que você conhece a frase “o erro de um bilhão de dólares”. Na remota possibilidade de que você não conheça, ela ser refere à referência nula, e foi &lt;a href=&quot;https://en.wikipedia.org/wiki/Tony_Hoare#Apologies_and_retractions&quot;&gt;criada por ninguém mais ninguém menos que Sir Tony Hoare, o próprio criador da referência nula.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;mas-por-que-null-é-tão-ruim&quot;&gt;Mas por que &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; é tão ruim?&lt;/h3&gt;

&lt;p&gt;Existem várias possíveis respostas para essa pergunta mas o maior problema é, claro, o risco da famosa &lt;em&gt;null-reference exception&lt;/em&gt; (também conhecida como &lt;em&gt;null-pointer exception&lt;/em&gt; na Java-lândia). Já que tudo (“tudo” no contexto do C# significa tipos os &lt;a href=&quot;https://carlosschults.net/pt/tipos-valor-referencia-em-csharp/&quot;&gt;tipos de referência&lt;/a&gt;) pode ser nulo, você sempre corre o risco de receber uma exceção quando tenta acessar algum membro de um objeto.&lt;/p&gt;

&lt;p&gt;Um dos piores problemas que temos aqui é que a própria linguagem não oferece uma sintaxe que permita ao autor do código expressar sua intenção. Não tem como você dizer: “Este parâmetro nunca vai ser &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;” ou “Essa propriedade talvez seja &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; às vezes, e isso é OK”.&lt;/p&gt;

&lt;p&gt;É comum que linguagens funcionais solucionem isso oferendo um tipo que representa o conceito de um valor potencialmente ausente, geralmente chamado de &lt;code class=&quot;highlighter-rouge&quot;&gt;Maybe&lt;/code&gt; ou &lt;code class=&quot;highlighter-rouge&quot;&gt;Option&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O time de design do C# decidiu contra uma abordagem desse tipo pois, de segundo eles, seria o mesmo que adicionar um novo tipo de &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; à linguagem, o que poderia tornar as coisas ainda mais complexas.&lt;/p&gt;

&lt;p&gt;Vamos retomar a questão do nome. Você talvez esteja pensando que eu entendi ao contrário. Faz sentido falar sobre tipos de valor nuláveis, já que os tipos de valor são não-nuláveis por padrão. Mas no caso dos tipos de referência, não deveria, certo? Afinal de coisas, eles sempre foram nuláveis desde o início.&lt;/p&gt;

&lt;p&gt;O pulo do gato é o seguinte: o time de design do C# - em uma decisão com uma boa dose de controvérsia - pretende tornar não-nulabilidade o novo padrão para os tipos de referência. Interpretando assim, a “nova” coisa seriam os tipos nuláveis.&lt;/p&gt;

&lt;p&gt;Para manter a linguagem consistente, a proposta é que seja usada a mesma sintaxe que já existe para tipos de valor nuláveis - em outras palavras, o ponto de interrogação.&lt;/p&gt;

&lt;h3 id=&quot;chega-de-falar-vamos-ver-código&quot;&gt;Chega de falar. Vamos ver código!&lt;/h3&gt;

&lt;p&gt;Eu imagino que usar uma classe “Pessoa” como exemplo é o equivalente de tocar “Stairway to Heaven” numa loja de instrumentos musicais: originalidade zero. Mas usar um exemplo mais elaborado seria uma distração desnecessária, então me dá um desconto desta vez.&lt;/p&gt;

&lt;p&gt;Imagine que nós temos uma classe &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt; com uma propriedade &lt;code class=&quot;highlighter-rouge&quot;&gt;Age&lt;/code&gt; do tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;. Então, nós escrevemos o método a seguir:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/9b09f0572e737569e6f97315e5028411.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Apesar do código acima compilar normalmente, ele é frágil já que &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; pode ser &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;. Você provavelmente faria bem em adicionar um if para tratar essa possibilidade, mas ninguém vai lhe obrigar a fazer isso. Você está complemente livre para deixar o código da forma como está.&lt;/p&gt;

&lt;p&gt;C# 8 promete mudar isso ao tornar tipos de referência não-nuláveis por padrão. No mesmo exemplo, tentar acessar a propriedade &lt;code class=&quot;highlighter-rouge&quot;&gt;Age&lt;/code&gt; seria seguro, já que &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; não poderia ser &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Caso queira que &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; seja nulável, aí você teria que adicionar um ponto de interrogação, como eu já mencionei antes:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/8554d8863882955b554b486797b83726.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Agora que &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; pode ser &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, tentar acessar &lt;code class=&quot;highlighter-rouge&quot;&gt;Age&lt;/code&gt; não é mais seguro: você receberá um &lt;em&gt;warning&lt;/em&gt; ao tentar fazer isso. Quer se livrar do aviso?&lt;/p&gt;

&lt;p&gt;Apenas faça o que você (na melhor das hipóteses)já faz hoje e cheque por nulo::&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/edc992560bf6c005c6be821103e160a3.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Assim, uma análise de fluxo será realizada; caso a linha da atribuição seja alcançada, o compilador vai saber que &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; não pode ser nulo e vai te deixar em paz.&lt;/p&gt;

&lt;p&gt;Outra possibilidade:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/518c1b35560cafe17fca829aa2aef27b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Em resumo, você tem várias opções. Assim que você conseguir convencer o compilador que seu código não tem risco de disparar uma &lt;em&gt;null reference exception&lt;/em&gt;, o aviso vai embora.&lt;/p&gt;

&lt;h3 id=&quot;impedindo-atribuição-de-nulável-para-não-nulável&quot;&gt;Impedindo atribuição de nulável para não-nulável&lt;/h3&gt;

&lt;p&gt;A nova versão do C# também vai impedir atribuição de uma variável nulável para uma não-nulável, então o código a seguir também vai resultar em um aviso:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/98f91bc50c924a8bd47897b874a7be89.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Essa funcionalidade virá acompanhada de um novo operador chamado de &lt;em&gt;null-ignoring operator&lt;/em&gt;. Você vai usá-lo para dizer ao compilador: “Eu sei o que estou fazendo”. Haverá situações nas quais uma variável não pode ser nula de forma alguma, mas o compilador não vai ser capaz de inferir isso.&lt;/p&gt;

&lt;p&gt;Um exemplo desses seria o uso do método &lt;code class=&quot;highlighter-rouge&quot;&gt;string.IsNullOrEmpty()&lt;/code&gt;:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/7f0f2f7470f810d228f1d68559b1d6b7.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;O código acima vai gerar um &lt;em&gt;warning&lt;/em&gt;, apesar de não ser possível que &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt; seja nula. É aí que esse operador vai ser útil:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/008709a0b9ff6a72abc8fc4882a467d3.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;É importante lembrar que quando usar esse operador, você basicamente está dizendo ao compilador: “Confie em mim! Eu sei o que eu estou fazendo.” Então, é bom você realmente saber o que está fazendo!&lt;/p&gt;

&lt;h3 id=&quot;e-retro-compatibilidade&quot;&gt;E retro-compatibilidade?&lt;/h3&gt;

&lt;p&gt;Eu sei o que você deve estar pensando agora. “Isso parece legal e tal, mas não vai dar problema com um monte de código existente?”&lt;/p&gt;

&lt;p&gt;Bom, é claro que vai. E é por isso que essa será uma alteração &lt;strong&gt;opt-in&lt;/strong&gt;, ativada a nível de cada projeto.&lt;/p&gt;

&lt;h3 id=&quot;status-atual-2&quot;&gt;Status atual&lt;/h3&gt;

&lt;p&gt;Esta já está com o protótipo pronto. Caso se interesse, &lt;a href=&quot;https://github.com/dotnet/csharplang/wiki/Nullable-Reference-Types-Preview&quot;&gt;você pode baixar, instalar, e testar um preview agora mesmo.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Assim como as outras funcionalidades, você pode se &lt;a href=&quot;https://github.com/dotnet/csharplang/blob/master/proposals/nullable-reference-types.md&quot;&gt;antenar com o que está acontecendo por meio da issue no GitHub.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;c-tem-um-futuro-e-vai-ser-incrível&quot;&gt;C# tem um futuro. E vai ser incrível.&lt;/h2&gt;

&lt;p&gt;Agora você sabe um pouco mais sobre três das funcionalidades que nós provavelmente ganharemos com a próxima versão da linguagem C#.&lt;/p&gt;

&lt;p&gt;Como você pode ver, desenvolver a linguagem é um trabalho duro. Ela precisa permanecer compatível com as milhões (bilhões) de linhas de código escritas com ela nos últimos 17 anos. Ao mesmo tempo, para continuar sendo relevante, ela precisa suprir as necessidades de desenvolvedores que estão encarando desafiados que eram inimagináveis anos atrás. E o C# precisa fazer tudo isso sem perder sua essência: ser uma linguagem orientada a objeto, fácil e acessível.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Dec 2017 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/pt/funcionalidades-csharp8/</link>
        <guid isPermaLink="true">http://carlosschults.net/pt/funcionalidades-csharp8/</guid>
        
        <category>csharp</category>
        
        
      </item>
    
      <item>
        <title>Como aprender inglês: Um guia para desenvolvedores, Parte 2</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1511826279/como-aprender-ingles-1038x437-min_cw47uj.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Parte 2: Pratique diariamente. Áudio em primeiro lugar.&lt;/em&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;No &lt;a href=&quot;https://carlosschults.net/pt/como-aprender-ingles-parte-1&quot;&gt;post anterior&lt;/a&gt; eu expliquei quais são, na minha opinião, os principais erros que as pessoas cometem ao tentar aprender inglês.&lt;/p&gt;

&lt;p&gt;Agora chegou a hora de fazer o oposto: vou detalhar o que você &lt;em&gt;deve&lt;/em&gt; fazer para aprender inglês da forma correta, gastando pouco e se divertindo no processo.&lt;/p&gt;

&lt;h2 id=&quot;antes-um-disclaimer&quot;&gt;Antes, um disclaimer&lt;/h2&gt;

&lt;p&gt;Apenas para deixar claro. Eu não sou de forma alguma uma autoridade em aprendizado de idiomas. Não sou formado em Linguística ou algo do tipo. Não tenho credenciais.&lt;/p&gt;

&lt;p&gt;Também não estou fazendo promessas mágicas, do tipo “fique fluente em três meses”. Desconfie de qualquer um que venda esse tipo de coisa. Aprender inglês é mais fácil do que a maioria das pessoas pensam, &lt;strong&gt;mas ainda sim leva tempo e demanda esforço&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Este post e o anterior têm o objetivo de compartilhar a minha experiência no aprendizado do inglês, detalhando o que funcionou ou não
para mim. Também é minha intenção que você aprenda com meus erros, de modo que sua jornada não precise demorar tanto quanto a minha.&lt;/p&gt;

&lt;h2 id=&quot;se-eu-aprendi-inglês-você-também-pode&quot;&gt;Se eu aprendi inglês, você também pode&lt;/h2&gt;

&lt;p&gt;Eu nunca fiz curso de inglês em escola particular. Com exceção de uma vez que fui à Wizard da minha cidade entregar currículo para o
cargo de professor de informática, eu nunca &lt;strong&gt;entrei&lt;/strong&gt; em uma escola de inglês. Também estudei em escola pública a vida toda. Nunca fiz intercâmbio (aliás, nunca saí do país). Durante a maior parte da vida, não tive computador e internet em casa. Smartphone? Só aos 22 anos.&lt;/p&gt;

&lt;p&gt;E eu tenho confiança para dizer que o meu inglês é melhor que várias pessoas que conheço que tiveram uma ou mais dessas oportunidades.
Sei que corro o risco de soar arrogante dizendo este tipo de coisa, mas garanto que esta não é a intenção. Muito pelo contrário, 
estou tentando usar meu exemplo pessoal para tentar derrubar alguns mitos.&lt;/p&gt;

&lt;p&gt;Não, não precisa sair do país para aprender inglês. Não, não precisa estudar em escola de inglês famosa. Não, não precisa ter muito
dinheiro.&lt;/p&gt;

&lt;p&gt;Tudo isso é &lt;em&gt;nice to have&lt;/em&gt;, não &lt;em&gt;must have&lt;/em&gt;. Se você tiver oportunidade de fazer intercâmbio, então é claro que você deve ir. Se você teve a oportunidade de estudar inglês desde cedo, meus parabéns. Se você tem muito dinheiro…bora dividir um pouco? ;)&lt;/p&gt;

&lt;p&gt;Apenas não use a falta de uma ou mais destas coisas como desculpa para não se dedicar.&lt;/p&gt;

&lt;h2 id=&quot;minha-jornada-com-o-inglês&quot;&gt;Minha jornada com o inglês&lt;/h2&gt;

&lt;p&gt;Se eu tivesse que listar de forma resumida o meu trajeto no inglês, seria algo assim:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fase informal
    &lt;ul&gt;
      &lt;li&gt;Vários anos de contato contínuo, porém limitado, com o inglês &lt;strong&gt;escrito&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;Exposição ao inglês falado por meio de filmes e músicas.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Fase formal
    &lt;ul&gt;
      &lt;li&gt;Leitura de dicas de vocabulário e expressões&lt;/li&gt;
      &lt;li&gt;Prática consistente de listening&lt;/li&gt;
      &lt;li&gt;Conversação com professor nativo&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vou agora expandir esses tópicos e contar em detalhes a história do meu aprendizado em inglês.&lt;/p&gt;

&lt;h2 id=&quot;a-fase-informal&quot;&gt;A “fase informal”&lt;/h2&gt;
&lt;p&gt;Eu sempre gostei e tive vontade de aprender inglês. Mas minha família não tinha condições de pagar um curso; eu também não tinha videogame, videocassete (sim, você não leu errado) ou outras amenidades que poderiam de alguma forma me dar mais exposição ao inglês.&lt;/p&gt;

&lt;p&gt;Computador só em sonho. Naquela época (meados dos anos 90) o custo de um computador era proibitivo para a maior parcela da população (que era exatamente a &lt;em&gt;minha&lt;/em&gt; parcela).&lt;/p&gt;

&lt;p&gt;Para piorar, nesta época não havia aulas de inglês para ensino fundamental antes da quinta série, pelo menos no ensino público. 
Atualmente parece que as crianças recebem aulas de inglês desde a pré-escola. Antes tarde que nunca, certo?&lt;/p&gt;

&lt;p&gt;Sendo assim, minha exposição ao inglês era rara e em doses minúsculas. Por exemplo, eu lia tudo em inglês que encontrava em embalagens e manuais de instruções de aparelhos que meus pais compravam; eu lia as coisas em inglês nos próprios aparelhos; eu mudava o idioma do menu da TV para inglês (e espanhol também) só para ver como era.&lt;/p&gt;

&lt;p&gt;A TV era outra fonte de pequenos momentos de contato com o inglês, através de filmes e desenhos. Sim, eu assistia tudo dublado, claro (TV a cabo? O que é isso?). Mas ainda sim oportunidades surgiam; o exemplo típico é quando aparecia algo escrito em inglês no filme/desenho (letreiro de loja, rótulo de algum produto, sinal de trânsito, título do episódio) e o locutor falava em português a tradução.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1512431198/closed-min_fg1oge.jpg&quot; alt=&quot;Vitrine de loja com o sinal dizendo &amp;quot;Sorry, we're closed&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Foi em 2001, mas eu me lembro bem como estava ansioso para o início da quinta série. &lt;strong&gt;Finalmente&lt;/strong&gt; iria ter aulas de inglês!&lt;/p&gt;

&lt;p&gt;Imagine o grau da minha decepção quando as aulas de fato começaram.&lt;/p&gt;

&lt;p&gt;Não quero causar polêmica mas acredito que não é segredo nenhum que as aulas de inglês do ensino público…deixam a desejar.&lt;/p&gt;

&lt;p&gt;Seria injusto (e mentiroso) dizer que eu não aprendi algo. Eu aprendi os dias da semana, os meses do ano, os números (até um certo ponto), o básico do verbo to be. Tudo isso, claro, com uma pronúncia que passava longe da correta, mas depois vou voltar a esse assunto.&lt;/p&gt;

&lt;p&gt;Em algum momento eu comprei um minidicionário de inglês, que embora fosse bem limitado, tinha uma &lt;em&gt;feature&lt;/em&gt; muito útil: na frente de cada entrada do dicionário, havia a pronúncia “aportuguesada” da palavra.&lt;/p&gt;

&lt;p&gt;Algo assim:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1512430827/dictionary-min_vxoqp5.jpg&quot; alt=&quot;Página do dicionário de inglês&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Isso me ajudou a aprender a pronúncia aproximada de várias palavras, e ver que elas eram bem diferentes do que eu imaginava (e do que muitas pessoas pronunciavam).&lt;/p&gt;

&lt;p&gt;Minha exposição ao inglês ia lentamente crescendo. Acho que foi mais ou menos nesta época que eu finalmente ganhei um video-game: o lendário &lt;a href=&quot;https://jogos.uol.com.br/ultimas-noticias/2013/05/10/uol-jogos-testa-o-polystation-videogame-que-mais-engana-os-pais.htm&quot;&gt;Polystation&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Não era o que eu realmente queria, claro, mas ainda sim me proporcionou muitas horas de diversão e um pouco mais de aprendizado.&lt;/p&gt;

&lt;p&gt;Foi por volta de 2004 que eu finalmente realizei outro sonho: comprei um aparelho de DVD. \o/&lt;/p&gt;

&lt;p&gt;Eu privilegiava alugar filmes mais antigos, que eram mais baratos que os lançamentos. E ainda assim, eu alugava relativamente poucos filmes, às vezes só um. Então, eu queria aproveitar ao máximo: eu assistia dublado, depois novamente legendado, via todos os materiais extras disponíveis, como documentários, cenas excluídas, comentários de diretor, este tipo de coisa. Um ponto importante é que &lt;strong&gt;o material extra era apenas legendado&lt;/strong&gt;, o que me forçava a assistir com legendas, mesmo não gostando muito na época.&lt;/p&gt;

&lt;p&gt;Com cerca de 14, 15 anos, uma nova paixão surgiu na minha vida: a música (ou para ser específico, o &lt;em&gt;rock&lt;/em&gt;). Mais aprendizado veio na forma de tradução das letras das músicas nos encartes dos CD’s.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1512431618/rock_bmkbmu.jpg&quot; alt=&quot;Vários CD's e DVD's de Rock&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No final de 2006 eu consegui meu primeiro estágio na área da informática. Depois de algum tempo (provavelmente no começo do ano seguinte) comprei meu primeiro computador: um Positivo, com configurações risíveis. Mas era um sonho que eu tive por boa parte da minha vida e finalmente havia conseguido realizá-lo.&lt;/p&gt;

&lt;p&gt;Eu continuava não tendo acesso à internet, porém. Sinceramente não lembro bem a razão; deve ter sido uma mistura de custo proibitivo e falta de cobertura em nosso bairro, provavelmente. Mas eu tinha acesso à internet no próprio estágio, então eu aproveitava os momentos livres para ler, principalmente artigos na Wikipédia.&lt;/p&gt;

&lt;p&gt;Lá para meados de 2007 finalmente consegui ter acesso à internet em minha casa, por meio de um provedor local, via rádio. Era uma conexão bem precária, com a velocidade apenas um pouco maior do que internet discada, mas já era alguma coisa.&lt;/p&gt;

&lt;p&gt;Interessante salientar que nesta época minha leitura já era boa; &lt;strong&gt;eu conseguia entender com facilidade a maior parte dos textos que me propunha a ler&lt;/strong&gt;. Todos os anos de exposição contínua ao inglês, ainda que limitada, estavam dando fruto.&lt;/p&gt;

&lt;h2 id=&quot;a-fase-formal&quot;&gt;A fase “formal”&lt;/h2&gt;
&lt;h3 id=&quot;aprendendo-a-estudar-inglês&quot;&gt;Aprendendo a estudar inglês&lt;/h3&gt;

&lt;p&gt;Em 2010, eu iniciei o bacharelado em Ciência da Computação. Também comecei a fazer estágio em uma pequena firma de desenvolvimento de software da cidade.&lt;/p&gt;

&lt;p&gt;Nesta época, eu já tinha criado vários hábitos para ampliar meu contato com o inglês. Por exemplo, eu só assistia filmes e séries com áudio &lt;em&gt;E&lt;/em&gt; legenda em inglês. Passei a usar o inglês quando fazia anotações. Mudei o idioma do sistema operacional para inglês. E assim por diante.&lt;/p&gt;

&lt;p&gt;No entanto, eu ainda não estava satisfeito. Foi quando resolvi realmente estudar inglês, com método, com um plano de estudos diário, coisa que eu não havia feito até então. E é esta a razão da divisão entre fase formal e fase informal no nome dos tópicos.&lt;/p&gt;

&lt;p&gt;Até então, eu nunca tinha tentado &lt;em&gt;falar&lt;/em&gt; inglês. Eu estava satisfeito em conseguir ler razoavelmente bem, mas a conversação, por algum motivo, não me interessava. Talvez eu achasse que estivesse além da minha capacidade ou algo assim. Sinceramente, não me lembro.&lt;/p&gt;

&lt;p&gt;Foi nesta época que eu comecei a acompanhar sites de dicas de aprendizado de inglês (no fim deste post vou listar vários). Esses sites me apresentaram à noção de praticar o &lt;em&gt;listening&lt;/em&gt;, ou seja, ouvir o áudio em inglês. Eu já era fã de &lt;a href=&quot;https://en.wikipedia.org/wiki/Podcast&quot;&gt;podcasts&lt;/a&gt;, principalmente voltados a filmes, quadrinhos, games, esse tipo de coisa. Então, foi um passo natural passar a ouvir podcasts de aprendizado de inglês.&lt;/p&gt;

&lt;h3 id=&quot;podcasts&quot;&gt;Podcasts!&lt;/h3&gt;

&lt;p&gt;O primeiro podcast que passei a consumir regularmente foi o &lt;a href=&quot;https://eslpod.com/&quot;&gt;ESL Podcast&lt;/a&gt;. Eu ouvia os episódios durante o horário do almoço, acompanhando a transcrição. O texto geralmente consistia de um diálogo entre dois personagens. Os leitores liam bem devagar e de maneira bem articulada, de modo que era fácil de entender o que eles estavam dizendo.&lt;/p&gt;

&lt;p&gt;Não demorou muito tempo na verdade para que eu desse o próximo passo na minha evolução: &lt;strong&gt;passei a conseguir entender 100% do áudio sem as transcrições&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Eu diria que esse é um passo decisivo no progresso do seu aprendizado. Não depender de transcrições te dá uma liberdade sem precedentes para praticar o &lt;em&gt;listening&lt;/em&gt;. Você pode ouvir:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;fazendo exercícios;&lt;/li&gt;
  &lt;li&gt;indo ou vindo do trabalho;&lt;/li&gt;
  &lt;li&gt;na fila ou sala de espera do banco/correio/dentista/etc;&lt;/li&gt;
  &lt;li&gt;lavando a louça, limpando a casa ou fazendo outro tipo de trabalho manual.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Em resumo, ouvir sem depender da transcrição &lt;strong&gt;deixa suas mãos livres&lt;/strong&gt;, o que te permite &lt;strong&gt;integrar o inglês na sua rotina&lt;/strong&gt;, ocupando intervalos de tempo que em outra situação seriam desperdiçados.&lt;/p&gt;

&lt;p&gt;Toda essa prática surtiu efeito e a minha compreensão do inglês falado foi melhorando consideravelmente. Aos poucos, eu fui abandonando os podcasts de “aprendizado de inglês” e passei apenas a ouvir podcasts de assuntos variados (inclusive de programação).&lt;/p&gt;

&lt;p&gt;Toda essa prática surtiu efeito e a minha compreensão do inglês falado aumentou consideravelmente. Só faltava uma coisa: como arrumar alguém para conversar?&lt;/p&gt;

&lt;h3 id=&quot;skype-to-the-rescue&quot;&gt;Skype to the rescue&lt;/h3&gt;

&lt;p&gt;Por volta de 2014, se não me engano, eu vim a saber de um americano chamado &lt;a href=&quot;https://www.linkedin.com/in/blakewind/&quot;&gt;Blake Wind&lt;/a&gt; que dava aulas de inglês por Skype, e cobrava mais barato que muitos outros professores da época.&lt;/p&gt;

&lt;p&gt;Fiz diversas aulas com o Blake em 2014 e 2015, e depois de um tempo parei devido à alta do dólar. Desde então, faço aulas esporadicamente quando sinto que preciso de prática em algum ponto específico.&lt;/p&gt;

&lt;h2 id=&quot;roadmap&quot;&gt;Roadmap&lt;/h2&gt;

&lt;p&gt;Se eu tivesse que aprender inglês novamente hoje - ou aprender outro idioma - como eu faria? É basicamente disso que esta seção se trata. Vou usar a minha experiência e os erros cometidos como base para criar um “roteiro” para você seguir.&lt;/p&gt;

&lt;h3 id=&quot;aprender-o-básico&quot;&gt;Aprender o básico&lt;/h3&gt;

&lt;p&gt;Assim como uma casa precisa de um alicerce, você necessita de uma base de conhecimentos sobre a qual construir seu aprendizado. Como fazer isso?&lt;/p&gt;

&lt;h4 id=&quot;duolingo&quot;&gt;Duolingo&lt;/h4&gt;
&lt;p&gt;Algo que não existia na minha época que teria ajudado muito é o &lt;a href=&quot;https://www.duolingo.com/&quot;&gt;Duolingo&lt;/a&gt;. Eu estou atualmente usando esse aplicativo para estudar Espanhol e Francês, e eu posso dizer que ele funciona &lt;strong&gt;caso seu objetivo seja avançar do zero até um conhecimento básico&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Você não vai sair falando inglês apenas com ele, mas você vai conseguir praticar as quatro habilidades. Você vai conseguir construir um vocabulário, aprendendo não apenas palavras soltas mas também frases comuns e expressões, &lt;strong&gt;e integrando o áudio e a pronúncia correta desde o início&lt;/strong&gt;, o que é fundamental.&lt;/p&gt;

&lt;p&gt;Estude com o Duolingo todo dia, até terminar o curso. Após isso, continue reforçando os pontos nos quais não estiver tão bem.&lt;/p&gt;

&lt;h4 id=&quot;curso-inglês-online&quot;&gt;Curso Inglês Online&lt;/h4&gt;
&lt;p&gt;Depois do Duolingo, eu recomendo o &lt;a href=&quot;https://www.cursoinglesonline.com.br/curso-basico-informacoes/&quot;&gt;curso básico do site Inglês Online, da Ana Luiza&lt;/a&gt;. O curso é pago, mas é um valor que considero acessível e vale muito a pena.&lt;/p&gt;

&lt;h3 id=&quot;prática-diária-do-listening&quot;&gt;Prática diária do listening&lt;/h3&gt;

&lt;p&gt;O próximo passo é integrar o áudio no seu dia-a-dia. Como já disse anteriormente, a situação ideal é chegar ao ponto de não precisar mais de transcrições, pois assim você terá liberdade para ouvir inglês praticamente em qualquer situação que sobrar um tempo.&lt;/p&gt;

&lt;p&gt;Chegar até esse ponto vai demandar um certo trabalho, no entanto. Para isso, eu sugiro a leitura da série de artigos &lt;a href=&quot;https://www.inglesonline.com.br/como-falar-ingles-as-dicas-essenciais/&quot;&gt;“Como Falar Inglês - As Dicas Essenciais”&lt;/a&gt;, escrita pela Ana Luiza do site Inglês Online. É uma série um pouco extensa, mas que detalha passo a passo como evoluir no &lt;em&gt;listening&lt;/em&gt;, inclusive com fontes de áudio adequados para cada nível do aprendizado.&lt;/p&gt;

&lt;h3 id=&quot;não-esqueça-das-outras-áreas&quot;&gt;Não esqueça das outras áreas&lt;/h3&gt;

&lt;p&gt;O &lt;em&gt;listening&lt;/em&gt; deve ser o protagonista da sua estratégia de aprendizado. O que não significa que as outras habilidades devem ser negligenciadas.&lt;/p&gt;

&lt;p&gt;Aqui vão algumas estratégias para deixá-las em dia:&lt;/p&gt;

&lt;h4 id=&quot;reading&quot;&gt;&lt;em&gt;Reading&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Favoreça o inglês na leitura de qualquer material. Favoreça sempre a Wikipédia em inglês, assim como documentação de linguagens ou frameworks. Siga pessoas influentes da área no Twitter; leia seus blogs e quaisquer outras publicações. Além de praticar o seu inglês, você vai estar antenado(a) com o que acontece de importante na área.&lt;/p&gt;

&lt;h4 id=&quot;writing&quot;&gt;&lt;em&gt;Writing&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Invente oportunidades para escrever em inglês. Crie um blog. Comece um diário. Encontre algum projeto Open Source que você ache interessante (de preferência, algo que você usa) e se envolva! Entre no &lt;a href=&quot;&quot;&gt;chat do projeto no Gitter&lt;/a&gt;; procure as issues no GitHub e participe das discussões; puxe assunto no Twitter com alguma daquelas pessoas influentes que você seguiu no passo anterior. Talvez você se surpreenda com a frequência com que elas respondem!&lt;/p&gt;

&lt;p&gt;#### &lt;em&gt;Speaking&lt;/em&gt;
Fale sozinho. Sim, estou falando sério. Experimente gravar todo dia um vídeo (ou áudio) curto, de até um minuto, no qual você fala sobre seu dia (ou qualquer assunto).&lt;/p&gt;

&lt;p&gt;Outra dica interessante é ler em voz alta. Encontre um texto, de preferência sobre um assunto que ache interessante, e leia em voz alta. Melhor ainda é gravar a sua leitura e depois pedir a opinião de uma pessoa que saiba inglês.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DICA IMPORTANTE&lt;/strong&gt;: jamais tente adivinhar a pronúncia de uma palavra. Quando encontrar uma palavra que você jamais ouviu, ao invés de tentar pronunciá-la, ouça sua pronúncia correta antes. Uma ótima ferramenta para isso &lt;a href=&quot;https://pt.forvo.com/&quot;&gt;é o site Forvo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Falar sozinho e ler em voz alta sejam técnicas úteis, mas têm uma limitação importante e óbvia: a falta de interação com outra pessoa. Para resolver isso, temos sites de language exchange, &lt;a href=&quot;https://www.italki.com/home?hl=pt&quot;&gt;como o italki&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finalmente, aulas com professores nativos sempre é uma opção, caso esteja dentro das suas possibilidades.&lt;/p&gt;

&lt;h2 id=&quot;aprender-inglês-é-possível-o-que-você-está-esperando&quot;&gt;Aprender inglês é possível. O que você está esperando?&lt;/h2&gt;

&lt;p&gt;Espero ter conseguido, através da minha história, mostrar que aprender inglês é possível sim, ainda que haja dificuldades. O meu aprendizado foi longo e inconsistente, por não ter tido as facilidades que existem hoje em dia.&lt;/p&gt;

&lt;p&gt;Para te ajudar ainda mais, eu &lt;a href=&quot;https://carlosschults.net/como-aprender-ingles&quot;&gt;criei uma página com recursos para estudar inglês online&lt;/a&gt;. Vou mantê-la atualizada constantemente.&lt;/p&gt;

&lt;p&gt;Agradeço pelo seu tempo, e estou à disposição caso precise de mais alguma ajuda. A área de comentários está aí para isso.&lt;/p&gt;

&lt;p&gt;See you later!&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Dec 2017 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/pt/como-aprender-ingles-parte-2</link>
        <guid isPermaLink="true">http://carlosschults.net/pt/como-aprender-ingles-parte-2</guid>
        
        <category>boas práticas</category>
        
        <category>inglês</category>
        
        
      </item>
    
  </channel>
</rss>
