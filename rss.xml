<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>carlos schults / blog</title>
    <description>Artigos sobre desenvolvimento de software, banco de dados e vários assuntos ligados à tecnologia.</description>
    <link>http://carlosschults.net/</link>
    <atom:link href="http://carlosschults.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 08 Aug 2017 22:59:39 -0300</pubDate>
    <lastBuildDate>Tue, 08 Aug 2017 22:59:39 -0300</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
    
      <item>
        <title>Testes Unitários Para Iniciantes - Parte 2</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1459979937/testes-unitarios-iniciantes-min_povcse.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Antes tarde do que mais tarde! Hora de continuar nossa série sobre testes unitários para iniciantes. Hoje você vai escrever seu primeiro teste unitário.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduo&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;No &lt;a href=&quot;http://carlosschults.net/pt/testes-unitarios-iniciantes-parte1&quot;&gt;primeiro artigo nesta série&lt;/a&gt; eu defini o que são testes unitários, e também falei dos benefícios de sua utilização.&lt;/p&gt;

&lt;p&gt;Hoje você vai aprender, na prática, como criar testes unitários. Vou mostrar como instalar e utilizar o framework de testes &lt;strong&gt;NUnit&lt;/strong&gt;. E depois vamos criar alguns testes para você conhecer algumas das features deste framework.&lt;/p&gt;

&lt;h2 id=&quot;instalando-o-nunit&quot;&gt;Instalando o NUnit&lt;/h2&gt;

&lt;p&gt;Como eu expliquei no &lt;a href=&quot;http://carlosschults.net/pt/testes-unitarios-iniciantes-parte1&quot;&gt;primeiro post da série&lt;/a&gt;, para utilizar testes unitários na sua aplicação você necessita de um &lt;strong&gt;Framework de Testes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;O framework que vamos utilizar é o &lt;strong&gt;NUnit&lt;/strong&gt;, que é baseado no JUnit, um framework de testes desenvolvido para a linguagem Java. Existem outros frameworks de teste disponíveis no mundo .Net, como o MS Test, desenvolvido pela própria Microsoft.
Se for do seu interesse, você poderá experimentar os outros frameworks por conta própria mais tarde.&lt;/p&gt;

&lt;p&gt;Ok, vamos começar. Para este projeto, eu vou utilizar o Visual Studio 2017. &lt;a href=&quot;https://www.visualstudio.com/pt-br/downloads/&quot;&gt;Clique aqui para baixar a versão Community&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Crie uma nova solução do tipo &lt;strong&gt;Class Library&lt;/strong&gt;, com o nome de &lt;strong&gt;LearningUnitTesting&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Uma coisa que eu sempre costumo fazer ao criar uma nova solução é excluir a classe &lt;code class=&quot;highlighter-rouge&quot;&gt;Class1&lt;/code&gt; que vem criada por padrão. Você também poderia renomeá-la, é claro, mas fica totalmente ao seu critério.&lt;/p&gt;

&lt;p&gt;Agora, vamos renomear o projeto padrão que foi criado para &lt;strong&gt;Application&lt;/strong&gt;. Este projeto vai servir para guardar o &lt;em&gt;código de produção&lt;/em&gt; em nossa solução.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;No contexto de testes unitários, usamos o termo &lt;strong&gt;Código de Produção&lt;/strong&gt; para nos referirmos ao código “real” da nossa aplicação, em contraste ao &lt;strong&gt;Código de Testes&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O próximo passo é &lt;strong&gt;criar o projeto de testes&lt;/strong&gt;. Existem algumas opiniões diferentes a respeito de &lt;em&gt;onde&lt;/em&gt; devem ficar as classes de teste: se junto às classes de produção, ou em um local separado. Eu particularmente prefiro criar um projeto à parte, e o sistema de nomenclatura que eu costumo usar é: o mesmo nome do projeto de produção, mais a palavra &lt;em&gt;Test&lt;/em&gt; no final.&lt;/p&gt;

&lt;p&gt;O nome do projeto será, portanto, &lt;strong&gt;ApllicationTest&lt;/strong&gt;, e também será do tipo &lt;strong&gt;Class Library&lt;/strong&gt;. 
Após a criação do projeto, vou remover a classe adicionada por padrão, assim como fiz com o projeto de produção.&lt;/p&gt;

&lt;p&gt;Sua solução deveria estar desta forma:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1498503229/unit2-img1_ugbo3b.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Chegou a hora de instalarmos o NUnit. Felizmente, o framework é disponibilizado como um pacote do Nuget, o que torna sua instalação trivial.&lt;/p&gt;

&lt;p&gt;Pimeiro, abra o &lt;strong&gt;Console do Gerenciador de Pacotes&lt;/strong&gt;. Vá para: &lt;strong&gt;Ferramentas&lt;/strong&gt; &amp;gt; &lt;strong&gt;Gerenciador de Pacotes do Nuget&lt;/strong&gt; &amp;gt; &lt;strong&gt;Console do Gerenciador de Pacotes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Quando o console estiver aberto, digite ou copie e cole o seguinte comando:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Install-Package NUnit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Verifique que o projeto de testes é o que está selecionado, como na imagem:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1498503359/unit2-img2_nzedn5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;E pressione &lt;em&gt;ENTER&lt;/em&gt;. A instalação será realizada em poucos segundos.&lt;/p&gt;

&lt;p&gt;Entretanto, isto não é tudo. Precisamos instalar um outro pacote, o &lt;strong&gt;NUnit Test Adapter&lt;/strong&gt;, para que sejamos capazes de executar os testes do NUnit com o Visual Studio. O processo é o mesmo, o que muda é o comando:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Install-Package NUnit3TestAdapter&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Assim como no passo anterior, verifique que o projeto correto está selecionado antes de confirmar. A instalação deve terminar em poucos segundos.&lt;/p&gt;

&lt;p&gt;É isto.&lt;/p&gt;

&lt;h2 id=&quot;criando-e-executando-o-primeiro-teste&quot;&gt;Criando e executando o primeiro teste&lt;/h2&gt;

&lt;p&gt;Vamos começar a criar alguns testes. Primeiro, vamos adicionar uma nova classe ao nosso projeto de Produção. A classe se chamará &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; e terá o seguinte código:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/3f42e324b10ceb42b360382686d314de.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Eu imagino que a classe seja simples o suficiente e não necessita de explicação. Agora, vamos criar nossa classe de teste. No projeto &lt;strong&gt;ApplicationTest&lt;/strong&gt;, adicione uma nova classe com o nome de &lt;strong&gt;EmployeeTest&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Este é um dos padrões de nomenclatura que eu também utilizo: nomear a classe de teste com o mesmo nome da classe de produção, acrescentando &lt;em&gt;Test&lt;/em&gt; no final.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Após a criação da classe, adicione o namespace &lt;em&gt;NUnit.Framework&lt;/em&gt; na lista de usings da classe. Em seguida, crie um novo método público de retorno &lt;em&gt;void&lt;/em&gt; chamado &lt;strong&gt;MyFirstTestMethod&lt;/strong&gt; e adicione o atributo &lt;code class=&quot;highlighter-rouge&quot;&gt;[Test]&lt;/code&gt; a ele.&lt;/p&gt;

&lt;p&gt;Nesse ponto, o código da classe deve estar assim:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/406525bd23d3ee2ecba4f7592c0f8af3.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;O esqueleto do teste já está pronto. Então vamos escrever nossa primeira &lt;strong&gt;asserção&lt;/strong&gt;. Uma asserção é uma &lt;em&gt;afirmação&lt;/em&gt; sobre como um determinado método deveria se comportar. Caso a afirmação se prove verdadeira, dizemos que o teste &lt;em&gt;passou&lt;/em&gt;. Caso a afirmação se prove falsa, dizemos que o teste &lt;em&gt;falhou&lt;/em&gt;, ou quebrou.&lt;/p&gt;

&lt;p&gt;No NUnit, utilizamos a classe &lt;code class=&quot;highlighter-rouge&quot;&gt;Assert&lt;/code&gt; para escrevermos nossas asserções. Esta classe possui um número grande de métodos que nos permitem expressar nossas expectativas com relação ao comportamento das unidades que estamos testando.&lt;/p&gt;

&lt;p&gt;Adicione a seguinte linha de código ao método de teste:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Assert.Pass();&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Esta é uma asserção que serve para forçar o teste a passar. Vamos agora rodar esse teste para vê-lo passando. Primeiro, precisamos abrir o &lt;strong&gt;Gerenciador de Testes&lt;/strong&gt;. Vá para: &lt;strong&gt;Testar&lt;/strong&gt; &amp;gt; &lt;strong&gt;Janelas&lt;/strong&gt; &amp;gt; &lt;strong&gt;Gerenciador de Testes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Na janela exibida, clique em &lt;em&gt;Executar Tudo&lt;/em&gt;. Caso tudo tenha funcionado da maneira correta, você verá isso:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1498507514/MyFirstTestPass_atkrjl.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ao clicar no nome do teste, serão exibidas algumas informações adicionais, como o arquivo do teste e tempo decorrido:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1498508050/MyFirstTestPass2_ageqqm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note o uso da cor verde para indicar o sucesso do teste.&lt;/p&gt;

&lt;p&gt;Vamos agora fazer o contrário: forçar a falha do teste. Substitua a linha no método por:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Assert.Fail();&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Execute o teste novamente e verá a mensagem de falha, dessa vez com a barra vermelha:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1498508371/myfirsttestfail_xwuo5u.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Agora que você já está pegando o jeito, vamos começar a testar a nossa classe &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt;. Não esqueça de voltar o método de teste que fizemos para &lt;code class=&quot;highlighter-rouge&quot;&gt;Assert.Pass&lt;/code&gt; para que ele não fique falhando.&lt;/p&gt;

&lt;p&gt;Em seguida, adicione um novo método de teste chamado &lt;code class=&quot;highlighter-rouge&quot;&gt;IntroduceMethodShouldWorkCorrectly&lt;/code&gt;. Nele, vamos criar uma nova instância do objeto &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; e verificar que o método &lt;code class=&quot;highlighter-rouge&quot;&gt;Introduce&lt;/code&gt; está funcionando como deveria.&lt;/p&gt;

&lt;p&gt;Antes de fazermos isso, porém, precisamos adicionar uma referência do projeto de produção ao nosso projeto de testes. Do contrário, nossa classe de teste não conseguirá enxergar as classes que deveria testar!&lt;/p&gt;

&lt;p&gt;Para isso, clique com o botão direito no projeto &lt;strong&gt;ApplicationTest&lt;/strong&gt; &amp;gt; &lt;strong&gt;Adicionar&lt;/strong&gt; &amp;gt; &lt;strong&gt;Referência…&lt;/strong&gt;. Na janela exibida, selecione o projeto, conforme a imagem a seguir:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1498509304/Captura_de_tela_2017-06-26_17.34.04_hgianj.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;E depois clique em OK.&lt;/p&gt;

&lt;p&gt;De volta à classe de teste, modifique o método de teste para que fique da forma abaixo:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/c840590dab95a023d4530962fca048db.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Você vai notar que &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; está marcado como erro. Ao passar o cursor em cima, você verá uma mensagem avisando que o nome &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; não pode ser encontrado e perguntando se não tem alguma referência ou diretiva &lt;em&gt;using&lt;/em&gt; faltando.&lt;/p&gt;

&lt;p&gt;É claro que tem uma diretiva &lt;em&gt;using&lt;/em&gt; faltando, relativa à referência que acabamos de adicionar. Para corrigir o problema, basta adicionar a linha &lt;code class=&quot;highlighter-rouge&quot;&gt;using Application;&lt;/code&gt; no começo do arquivo.&lt;/p&gt;

&lt;p&gt;Agora que o código compila, vamos entender este método, linha a linha.&lt;/p&gt;

&lt;p&gt;Na primeira linha, instanciamos nossa classe &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt;, definindo nome, profissão e salário. Na linha seguinte, atribuímos a uma variável o valor que &lt;strong&gt;esperamos&lt;/strong&gt; que o método retorne. Em seguida, atribuímos a outra variável o resultado da execução do método.&lt;/p&gt;

&lt;p&gt;Finalmente, utilizamos o método &lt;code class=&quot;highlighter-rouge&quot;&gt;AreEqual&lt;/code&gt; da classe &lt;code class=&quot;highlighter-rouge&quot;&gt;Assert&lt;/code&gt; para verificar se os dois valores são iguais. Este método é, provavelmente, o que você mais vai utilizar durante seus testes.&lt;/p&gt;

&lt;p&gt;Agora é hora de executar o teste. Utilize o atalho &lt;strong&gt;CTRL + R, A&lt;/strong&gt; ou clique em &lt;strong&gt;Executar Tudo&lt;/strong&gt; na janela do Gerenciador de Teste. Se tudo der certo, você verá a barra verde e a mensagem indicando que os dois testes passaram.&lt;/p&gt;

&lt;p&gt;Vamos agora testar o teste: vamos “estragar” o método &lt;code class=&quot;highlighter-rouge&quot;&gt;Introduce&lt;/code&gt; e ver se o método falha como deveria. De volta à classe de produção, vamos modificar o método da seguinte forma:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/02554ca9b8dd69f8c904dbbcc271c99e.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Como você viu, nós retiramos os colchetes ao redor de JobTitle. Desta forma, a interpolação de string não será realizada, fixando o texto “JobTitle” ao invés de substituí-lo pelo valor da variável.&lt;/p&gt;

&lt;p&gt;Ao rodar os testes novamente, obtemos o seguinte resultado:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mensagem:   Expected string length 48 but was 46. Strings differ at index 37.
Expected: “Hi! My name is Alice and I work as a Programmer.”
But was:  “Hi! My name is Alice and I work as a JobTitle.”
————————————————^&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Em tradução livre, seria algo como:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;O comprimento esperado da string era 48 mas o obtido foi 46. As string diferem a partir do índice 37.
Esperado: “Hi! My name is Alice and I work as a Programmer.”
Mas foi: “Hi! My name is Alice and I work as a JobTitle.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Como podemos ver, a mensagem é bem explicativa. Ela nos informa não apenas que as string divergiram mas exatamente em que parte elas começaram a divergir. Também nos informa exatamente o texto esperado e o que realmente foi obtido. É importante salientar que a ordem dos parâmetros do método &lt;code class=&quot;highlighter-rouge&quot;&gt;AreEqual&lt;/code&gt; importa, pois isso influi na mensagem exibida quando o teste falha.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;A ordem dos parâmetros no método &lt;code class=&quot;highlighter-rouge&quot;&gt;AreEqual&lt;/code&gt; é muito importante. Passe primeiro o resultado esperado, e depois o que realmente foi obtido.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ótimo. Podemos voltar o método para sua implementação anterior e executar os testes novamente, para ver que o teste volte a passar.&lt;/p&gt;

&lt;p&gt;Como você pode ver, um teste de unidade envolve uma sequência de passos bem definida: &lt;strong&gt;preparamos&lt;/strong&gt; o cenário, &lt;strong&gt;executamos&lt;/strong&gt; a ação, e &lt;strong&gt;verificamos&lt;/strong&gt; o resultado. Essa sequência de passos - ou fases - é muitas vezes chamada de AAA: &lt;strong&gt;Arrange-Act-Assert&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Um teste de unidade típico envolve as fases &lt;strong&gt;Arrange-Act-Assert&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Embora existam outras nomenclaturas para as fases do teste de unidade, vamos adotar &lt;strong&gt;Arrange-Act-Assert&lt;/strong&gt; como nossa nomenclatura padrão, ao menos por enquanto.&lt;/p&gt;

&lt;p&gt;Você talvez esteja se perguntando por qual motivo eu de o nome de “sut” à variável declarada no início do método. Este é um padrão de nomenclatura que aprendi lendo o blog do &lt;a href=&quot;http://blog.ploeh.dk/&quot;&gt;Mark Seeman&lt;/a&gt;. &lt;strong&gt;SUT&lt;/strong&gt; significa &lt;em&gt;System Under Test&lt;/em&gt;, ou “Sistema Sob Teste”, em tradução livre. É um termo usado para se referir à classe sendo testada no teste atual. Não há nada que obrigue a utilização de &lt;code class=&quot;highlighter-rouge&quot;&gt;sut&lt;/code&gt; como o nome da variável, mas eu gosto de usar dessa forma, pois deixa evidente no teste quem é que está sendo testado.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Dica: Procure utilizar padrões de codificação que melhorem a legibilidade e deixem a intenção do autor explícita para o leitor do código.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Logo abaixo temos o método de teste, dessa vez com comentários demonstrando cada fase do teste:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/a91d41ff7ac732fc9c57e63c03a6be07.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Embora não seja realmente necessário, eu sugiro que você use comentários para demarcar as fases do teste como no exemplo acima, ao menos no início de seu aprendizado.&lt;/p&gt;

&lt;h2 id=&quot;mais-um-teste-mtodo-giveraise&quot;&gt;Mais um teste: método &lt;code class=&quot;highlighter-rouge&quot;&gt;GiveRaise&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Um aumento no salário é sempre bem-vindo, concordam? Vamos testar que o método &lt;code class=&quot;highlighter-rouge&quot;&gt;GiveRaise&lt;/code&gt; funciona como deveria. Na sua classe de teste, adicione o método a seguir:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/2ce153c1da6f83e80342fa7f83ea4786.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Execute o teste e você deverá ver a familiar barra verde de sucesso. Deu certo? Ótimo. Hora de &lt;strong&gt;testar o teste:&lt;/strong&gt; vamos “sabotar” a implementação do método &lt;code class=&quot;highlighter-rouge&quot;&gt;GiveRaise&lt;/code&gt; e ver se o teste falha.&lt;/p&gt;

&lt;p&gt;Na classe de produção, vamos deixar o método assim:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/fba5901aaa2f542bcd8528de0e96afff.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Agora que o método está obviamente errado, o teste deveria falhar. Vamos executá-lo?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mensagem:   Expected: 110
   But was:  5m&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, podemos ver que o teste realmente falhou. Podemos voltar o método ao normal e ver que agora tudo passa como deveria.&lt;/p&gt;

&lt;h2 id=&quot;um-ltimo-teste&quot;&gt;Um último teste&lt;/h2&gt;

&lt;p&gt;Digamos que surgiu um novo requisito: se a porcentagem de aumento passada for negativa, o salário deve permanecer o mesmo. Vamos então alterar o método &lt;code class=&quot;highlighter-rouge&quot;&gt;GiveRaise&lt;/code&gt; para tratar este caso:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/3f09a8043a1e58753adf9bfdee37350a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Fizemos uma alteração no código de produção. Nossa prioridade agora é &lt;strong&gt;verificar que nada quebrou&lt;/strong&gt;. Execute os testes para verificar se todos ainda estão passando normalmente.&lt;/p&gt;

&lt;p&gt;Tudo ainda está verde? Ótimo, vamos em frente. Agora precisamos criar um novo teste para documentar o caso da tentativa de aumento negativo.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Testes de unidade também são uma forma de documentação.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Na classe de teste, adicione o método a seguir:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/a474698655450da6547dbfa6b9dbcb8c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Nada de surpreendente aqui, certo? À esta altura, você já deve ter pegado o jeito da coisa. Assim, vou deixar por sua conta o &lt;strong&gt;teste do teste:&lt;/strong&gt; sabote o método de uma ou mais maneiras e confira que o teste falhou conforme deveria.&lt;/p&gt;

&lt;h2 id=&quot;recapitulando&quot;&gt;Recapitulando&lt;/h2&gt;

&lt;p&gt;O artigo de hoje foi bem mais prático que o anterior. Conseguimos abordar diversos tópicos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Instalação do &lt;strong&gt;NUnit&lt;/strong&gt; e &lt;strong&gt;NUnit Test Adapter&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;Criação de caso de teste;&lt;/li&gt;
  &lt;li&gt;Conceito de &lt;em&gt;asserção&lt;/em&gt; e classe &lt;code class=&quot;highlighter-rouge&quot;&gt;Assert&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;Execução dos testes, tanto por meio do &lt;em&gt;Gerenciador de Testes&lt;/em&gt; quanto por teclas de atalho;&lt;/li&gt;
  &lt;li&gt;Interpretação da mensagem de erro do teste;&lt;/li&gt;
  &lt;li&gt;Fases do teste unitário (&lt;em&gt;Arrange-Act-Assert&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Além desses tópicos, também ampliamos nosso vocabulário relativo à testes, com os termos &lt;em&gt;SUT&lt;/em&gt;, &lt;em&gt;asserção&lt;/em&gt;, &lt;em&gt;código de teste x código de produção&lt;/em&gt;, entre outros.&lt;/p&gt;

&lt;p&gt;Também foram abordados alguns padrões de nomenclatura, tanto para classes quanto para métodos de teste.&lt;/p&gt;

&lt;p&gt;Finalmente, você aprendeu sobre a importância de ver o teste falhar, e como podemos “testar o teste” através de uma sabotagem deliberada do código de produção.&lt;/p&gt;

&lt;h2 id=&quot;notas&quot;&gt;Notas&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;O código do post de hoje &lt;a href=&quot;https://github.com/carlosschults/learning-unit-testing/&quot;&gt;está no Github&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Agradeço novamente ao amigo Gunter Italiano Ribeiro por revisar este artigo.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;concluso&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Este foi o segundo artigo da minha série sobre testes unitários. Como já mencionei, ele é propositalmente maior e mais prático que o artigo inicial da série. Ainda assim, tudo o que foi abordado é apenas a ponta do iceberg do que existe a respeito de testes de unidade. Livros inteiros poderiam foram escritos sobre este assunto. Nos artigos futuros indicarei alguns, além de outros materiais para estudo.&lt;/p&gt;

&lt;p&gt;Nos testes que escrevemos hoje, utilizamos a abordagem mais intuitiva - e provavelmente mais comum - de se criar os testes após o código de produção. Porém, muitas pessoas e equipes trabalham com uma metodologia diferente: eles escrevem os testes &lt;em&gt;antes&lt;/em&gt; do código de produção.&lt;/p&gt;

&lt;p&gt;Pode parecer estranho, à princípio, mas trabalhar desta forma pode trazer diversos benefícios para seu projeto. Este e outros tópicos serão abordados no próximo artigo.&lt;/p&gt;

&lt;p&gt;Até lá!&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Aug 2017 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/pt/testes-unitarios-iniciantes-parte-2</link>
        <guid isPermaLink="true">http://carlosschults.net/pt/testes-unitarios-iniciantes-parte-2</guid>
        
        <category>csharp</category>
        
        <category>iniciantes</category>
        
        <category>testes de software</category>
        
        <category>testes unitários</category>
        
        <category>testes automatizados</category>
        
        <category>csharp</category>
        
        <category>metodologias ágeis</category>
        
        
      </item>
    
      <item>
        <title>Funcionalidades do C# 7 que vale a pena conhecer - Parte 2</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1489452722/charp7-features-cover_ciekql.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Neste artigo, vamos continuar a ver algumas das features mais interessantes do C# 7.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Na &lt;a href=&quot;http://carlosschults.net/pt/funcionalidades-csharp-7/&quot;&gt;primeira parte da série&lt;/a&gt;, nós falamos sobre algumas das novas features do C#, a saber: melhorias em literais, variáveis de saída, mais membros “&lt;em&gt;expression-bodied&lt;/em&gt;” e throw expressions.&lt;/p&gt;

&lt;p&gt;Hoje nós veremos: &lt;strong&gt;Tuplas&lt;/strong&gt; e &lt;strong&gt;Funções locais&lt;/strong&gt;. Mas antes de continuarmos, quero deixar meu agradecimento ao amigo Gunter Italiano Ribeiro, que gentilmente revisou este artigo.&lt;/p&gt;

&lt;h2 id=&quot;tuplas&quot;&gt;Tuplas&lt;/h2&gt;

&lt;p&gt;Alguma vez você já teve a necessidade de escrever um método que retornasse mais de um valor? Provavelmente sim. Nas versões anteriores do C#, havia algumas opções disponíveis. Você poderia usar um parâmetro de saída (&lt;em&gt;out&lt;/em&gt;), ou talvez criar um tipo específico, mas cada uma dessas opções tem seus próprios problemas. Parâmetros de saída podem complicar um pouco o design; criar um tipo para cada uma dessas situações pode ocasionar um &lt;em&gt;overhead&lt;/em&gt; desnecessário, se tudo que você quer é só uma maneira de retornar dois valores, principalmente em um contexto privado.&lt;/p&gt;

&lt;p&gt;No C# 7.0 você tem uma nova opção, utilizando &lt;strong&gt;tuple types&lt;/strong&gt; e &lt;strong&gt;tuple literals&lt;/strong&gt;. Com esta funcionalidade você pode facilmente declarar um método que retorna mais de um valor. Vamos ver um exemplo:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/37689aeb84ed4fdff067eab72690a035.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Você é provavelmente familiar com o padrão &lt;code class=&quot;highlighter-rouge&quot;&gt;TryXXX&lt;/code&gt;, usado por exemplo no tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Int32&lt;/code&gt;. Estes tipos de métodos geralmente utilizam um parâmetro de saída (&lt;em&gt;out&lt;/em&gt;) para retornar o valor resultante (ou o valor default do tipo, no caso da operação de &lt;em&gt;parsing&lt;/em&gt; não for bem sucedida.&lt;/p&gt;

&lt;p&gt;O exemplo acima contém um método &lt;code class=&quot;highlighter-rouge&quot;&gt;TryParse&lt;/code&gt; na classe &lt;code class=&quot;highlighter-rouge&quot;&gt;ZipCode&lt;/code&gt;. Observe a assinatura do método.&lt;/p&gt;

&lt;p&gt;Quando você escreve mais de um tipo desta forma na declaração do método, você está usando um &lt;em&gt;tuple type&lt;/em&gt;.  Não se preocupe, você vai se acostumar.&lt;/p&gt;

&lt;p&gt;Logo no início do método, nós passamos o texto recebido para um método privado que realizada a validação propriamente dita e retorna um valor lógico.&lt;/p&gt;

&lt;p&gt;Depois da validação, nós retornamos um &lt;em&gt;tuple literal&lt;/em&gt;, que consiste em uma nova instância da classe &lt;code class=&quot;highlighter-rouge&quot;&gt;ZipCode&lt;/code&gt; e o flag indicando se a operação de &lt;em&gt;parsing&lt;/em&gt; foi bem sucedida.&lt;/p&gt;

&lt;p&gt;Legal, mas e o outro lado? Como o chamador da função lida com este tipo de retorno? Vamos ver:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/81b46fd01a187d866a41c0a74c8fc430.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Se você colocar o cursor sobre o nome da variável, você verá seu tipo descrito, não surpreendentemente, como &lt;code class=&quot;highlighter-rouge&quot;&gt;(ZipCode, bool)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1495494940/csharp7-part2-fig1_pnmlx5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Você pode acessar cada elemento da tupla utilizando &lt;code class=&quot;highlighter-rouge&quot;&gt;zipParsingResult.Item1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;zipParsingResult.Item2&lt;/code&gt;, e assim por diante.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/f4a1cf2fea5808474fb126888c436f55.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Entretanto, você não é obrigado a usar os nomes padrão dos elementos. Você pode usar nomes mais descritivos:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/eb3d649160d4a72a8d94b8ae79eefa2c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;O código que chama o método torna-se mais legível:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/5f5c85d832af66094a68c4a59bdb23d7.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Há ainda outra maneira de acessar os elementos de uma tupla. Utilizando uma funcionalidade chamada &lt;strong&gt;Desconstrução&lt;/strong&gt;, você pode facilmente quebrar os componentes de uma tupla em variáveis.&lt;/p&gt;

&lt;p&gt;Você pode declarar as variáveis usando seus tipos&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/cccbc00f7b154bb897c332e4f8ed614c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;É claro que inferência de tipo também funciona aqui, e neste caso você tem duas opções: usar a palavra-chave &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; para cada variável, ou usá-la uma vez só para todas as variáveis, colocando-a fora dos parênteses.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/225e608c7b844df46084b6a7af5b6ac2.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Você não precisa realmente declarar as variáveis no momento da desconstrução, porém. É perfeitamente válido desconstruir uma tupla em variáveis já declaradas.&lt;/p&gt;

&lt;h3 id=&quot;algumas-notas&quot;&gt;Algumas notas&lt;/h3&gt;

&lt;p&gt;Tuplas são &lt;a href=&quot;http://carlosschults.net/pt/tipos-valor-referencia-em-csharp/&quot;&gt;&lt;em&gt;Tipos de Valor&lt;/em&gt;&lt;/a&gt;. A igualdade nas tuplas é implementada da maneira que você provavelmente esperaria: duas tuplas são iguais se seus valores são iguais e elas retornam o mesmo &lt;code class=&quot;highlighter-rouge&quot;&gt;HashCode&lt;/code&gt;. O nome dos elementos não é relevante.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/4da3e29f9346a45aab9b5d9a583c6ac1.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;A atribuição também funciona da maneira que você provavelmente espera. Contato que elas sejam atribuíveis, duas tuplas podem ser atribuídas uma a outra facilmente. Assim como no caso anterior, nomes dos elementos não importam.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/7a8c710d4c22d31736d8dd714115e0c8.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Atualmente, para que esta funcionalidade funcione, você precisa instalar um pacote do nuget chamado “System.ValueTuple”. No Visual Studio, vá para &lt;strong&gt;Ferramentas&lt;/strong&gt; &amp;gt; &lt;strong&gt;Gerenciador de pacotes do NuGet&lt;/strong&gt; &amp;gt; &lt;strong&gt;Console do Gerenciador de Pacotes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A janela do Console do Gerenciador de Pacotes será exibida. Digite (ou copie e cole) &lt;code class=&quot;highlighter-rouge&quot;&gt;Install-Package System.ValueTuple&lt;/code&gt; e pressione &lt;code class=&quot;highlighter-rouge&quot;&gt;ENTER&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;mas-e-o-tipo-systemtuple&quot;&gt;Mas e o tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Tuple&lt;/code&gt;?&lt;/h3&gt;

&lt;p&gt;Você talvez esteja se perguntando: qual a razão de tanto barulho sobre tuplas, já que o .Net Framework tem o tipo de referência &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Tuple&lt;/code&gt; desde a versão 4.0? Por que não continuamos com o tipo mais antigo?&lt;/p&gt;

&lt;p&gt;Bem, &lt;a href=&quot;http://stackoverflow.com/questions/41084411/whats-the-difference-between-system-valuetuple-and-system-tuple&quot;&gt;esta resposta no Stack Overflow explica muito bem (em inglês)&lt;/a&gt;, então eu vou tentar resumir aqui.&lt;/p&gt;

&lt;p&gt;Primeiramente, conforme já mencionado, o tipo mais antigo é um tipo de referência, e o novo tipo é um tipo de valor, com todas as implicações usuais que isso traz.&lt;/p&gt;

&lt;p&gt;Mas as diferenças realmente importantes têm a ver com conveniência e legibilidade. Ao usar &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Tuple&lt;/code&gt; não há desconstrução; você só pode acessar os elementos usando os nomes padrão (Item1, Item2, etc), o que pode prejudicar a leitura e interpretação do código.&lt;/p&gt;

&lt;h2 id=&quot;funes-locais&quot;&gt;Funções Locais&lt;/h2&gt;

&lt;p&gt;Resumidamente, uma função local é exatamente o que o nome sugere: uma função que pode ser declarada dentro de outra.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/0aebfaf7d900d3b47a2d142a676dbb01.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Como você notou, a função interna consegue acessar os valores disponíveis para a função mais externa.&lt;/p&gt;

&lt;p&gt;É claro que o exemplo acima é deliberadamente simples; em produção, você provavelmente escreveria o código em &lt;code class=&quot;highlighter-rouge&quot;&gt;Log()&lt;/code&gt; dentro do próprio método exterior.&lt;/p&gt;

&lt;p&gt;Você também poderia utilizar um &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt;:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/045204806458c6563cd3a8b20a63133f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Pelo visto, tudo que podemos fazer com funções locais já é possível de ser feito com métodos privados ou &lt;code class=&quot;highlighter-rouge&quot;&gt;delegates&lt;/code&gt;. Será que precisamos mesmo desta feature?&lt;/p&gt;

&lt;p&gt;Giovani Bassi nos mostra algumas razões para utilizar funções locais:&lt;/p&gt;

&lt;blockquote&gt;

  &lt;ul&gt;
    &lt;li&gt;Sintaxe consistente com a já utilizada em métodos;&lt;/li&gt;
    &lt;li&gt;Não há necessidade de criar um delegate, ou referenciar Func, Action, ou algo parecido;&lt;/li&gt;
    &lt;li&gt;Lambdas e delegates causam alocações extras, funções locais não;&lt;/li&gt;
    &lt;li&gt;Ref e out são permitidos;&lt;/li&gt;
    &lt;li&gt;Tipos genéricos são permitidos;&lt;/li&gt;
    &lt;li&gt;É possível referenciar funções ainda não declaradas.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;É claro que você poderia simplesmente usar um método privado. Mas a função local tem essa característica interessante de não ser acessível em nenhum outro lugar na classe, de maneira que não pode ser chamada acidentalmente.&lt;/p&gt;

&lt;p&gt;Mads Torgersen nos mostra uma situação para a qual funções locais são a solução perfeita:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As an example, methods implemented as iterators commonly need a non-iterator wrapper method for eagerly checking the arguments at the time of the call. (The iterator itself doesn’t start running until MoveNext is called). Local functions are perfect for this scenario:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Em tradução livre:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Como exemplo, é comum que métodos implementados como iteradores necessitem de um &lt;em&gt;wraper&lt;/em&gt; sem iterador para checar os argumentos imediatamente na hora da chamada. (O iterador em si não começa a rodar até que &lt;code class=&quot;highlighter-rouge&quot;&gt;MoveNext&lt;/code&gt; seja chamado). Funções locais são perfeitas para este cenário:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/34b77038c058f261f615e739c7f9ea2a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Você poderia transformar a função &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterator()&lt;/code&gt; acima em um método privado, mas seria: 1) redundante e pouco elegante, pois iria requerer repetir a mesma assinatura e argumentos da função externa; e 2) menos seguro, pois outra parte do código poderia chamar o método sem fazer a validação.&lt;/p&gt;

&lt;h2 id=&quot;concluso&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Falamos hoje sobre &lt;strong&gt;Tuplas&lt;/strong&gt; e &lt;strong&gt;Funções Locais&lt;/strong&gt;, duas novas features do C# que, à primeira vista, podem até parecer “inofensivas”, mas que têm potencial para mudar o código que escrevemos de maneiras interessantes.&lt;/p&gt;

&lt;p&gt;Com relação às funções locais, admito que, a princípio, não gostei. Ou melhor dizendo: não fui capaz de ver utilidade. Depois de pesquisar um pouco mais, entendi que funções locais têm sim seus casos de uso.&lt;/p&gt;

&lt;p&gt;Com as tuplas a história é diferente. Acredito que quase todo desenvolvedor C# com alguma experiência já desejou poder retornar mais de um valor de um método e se frustrou com as opções disponíveis. Agora com as tuplas finalmente temos uma solução elegante, fácil de usar e que melhora a legibilidade do código.&lt;/p&gt;

&lt;p&gt;Nem tudo são flores, infelizmente. Alguns desenvolvedores já expressaram preocupações com essas features. Por exemplo, as funções locais podem incentivar a proliferação de métodos gigantescos.&lt;/p&gt;

&lt;p&gt;As tuplas, por sua vez, podem ser exageradamente utilizadas em situações que requerem &lt;em&gt;objetos&lt;/em&gt;, tornando o código mais procedural.&lt;/p&gt;

&lt;p&gt;Minha opinião com relação à isso é simples: toda e qualquer feature pode ser abusada. Cada a nós, profissionais, e às nossas equipe, exercermos o senso crítico na hora de utilizar essas (e outras) funcionalidades. Aliás, conforme mencionei no &lt;a href=&quot;http://carlosschults.net/pt/metodos-privados-code-smell/&quot;&gt;meu artigo sobre métodos privados&lt;/a&gt;, revisão de código e/ou programação em par são de ótima ajuda em momentos como esse.&lt;/p&gt;

&lt;p&gt;Obrigado pela leitura, e até a próxima.&lt;/p&gt;

&lt;h2 id=&quot;referncias&quot;&gt;Referências&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2017/03/09/new-features-in-c-7-0/&quot;&gt;https://blogs.msdn.microsoft.com/dotnet/2017/03/09/new-features-in-c-7-0/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.lambda3.com.br/2016/04/novidades-do-c-7-local-functions/&quot;&gt;https://www.lambda3.com.br/2016/04/novidades-do-c-7-local-functions/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 05 Jun 2017 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/pt/funcionalidades-csharp-7-parte-2</link>
        <guid isPermaLink="true">http://carlosschults.net/pt/funcionalidades-csharp-7-parte-2</guid>
        
        <category>csharp</category>
        
        <category>iniciantes</category>
        
        
      </item>
    
      <item>
        <title>Introdução ao Git para usuários de TFS/TFVC</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1491343925/git-for-tfs-users-1038x437_ios03n.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aprender Git pode ser desafiador para desenvolvedores com experiência em versionadores centralizados. Mas não precisa ser assim. 
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduo&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;O Git está se tornando (já se tornou, muitos diriam) o sistema de controles de versão padrão da nossa área. O versionador foi criado em 2005 por Linus Torvalds para gerenciar o código-fonte do kernel do Linux, e desde então tem apresentado um crescimento fenomenal no seu uso, principalmente após o advento do &lt;a href=&quot;github.com&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Porém, mesmo após uma década de sua existência, alguns mitos sobre esse sistema ainda persistem. Um deles é de que Git é muito difícil de se aprender. E pela experiência que eu tive, isso simplesmente não é verdade.&lt;/p&gt;

&lt;p&gt;O Git foi criado com o intuito de oferecer muita flexibilidade e poder aos seus usuários. Ou seja, ele permite uma maior complexidade ou sofisticação. Mas na prática, os comandos básicos, aqueles que você realmente irá usar no dia a dia, são relativamente fáceis de se aprender.&lt;/p&gt;

&lt;p&gt;Tendo dito isto, a curva de aprendizado do Git &lt;em&gt;pode&lt;/em&gt; apresentar mais desafios para pessoas que estão acostumadas com sistemas de controle de versão centralizados. É natural tentar encontrar padrões e mapear conceitos entre o sistema que se conhece e o que se está aprendendo; mas existem diferenças marcantes o suficiente para que o resultado deste mapeamento seja frustrante.&lt;/p&gt;

&lt;p&gt;Com isso em mente, resolvi escrever uma série de artigos para tentar auxiliar desenvolvedores vindos de versionadores centralizados (especificamente TFS/TFVC) e tentando aprender o Git. Não tenho nenhuma pretensão de fazer uma cobertura exaustiva do assunto; muito pelo contrário: nos momentos em que for necessário, indicarei conteúdos que ofereçam uma explicação mais densa de certos tópicos.&lt;/p&gt;

&lt;h2 id=&quot;uma-nota-rpida-sobre-a-nomenclatura-utilizada-neste-artigo&quot;&gt;Uma nota rápida sobre a nomenclatura utilizada neste artigo&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;TFS&lt;/strong&gt; significa Team Foundation Server. É um produto da Microsoft que visa o gerenciamento de projeto, gerenciamento de requisitos, automatização de build, gerenciamento de releases, e diversas outras features.&lt;/p&gt;

&lt;p&gt;O TFS também oferece a feature de controle de versão. Desde a versão 2013 existe suporte nativo para o Git, mas antes disso o versionamento era feito por meio de um versionador próprio, conhecido como &lt;strong&gt;Team Foundation Version Control (TFVC)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Então, &lt;strong&gt;TFS&lt;/strong&gt; se refere à solução completa de gerenciamento do ciclo de vida da aplicação. E &lt;strong&gt;TFVC&lt;/strong&gt; se refere ao versionador.&lt;/p&gt;

&lt;p&gt;Independente disso, neste artigo vou me referir ao versionador como TFS, pois, coloquialmente, muitos desenvolvedores o conhecem por este nome.&lt;/p&gt;

&lt;h2 id=&quot;commit--check-in&quot;&gt;Commit != Check-in&lt;/h2&gt;

&lt;p&gt;O TFS, por ser um versionador centralizado, apresenta um fluxo de trabalho razoavelmente simples, que geralmente consiste em três ações:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Baixar a versão mais atualizada do código-fonte para sua máquina;&lt;/li&gt;
  &lt;li&gt;Efetuar as alterações necessárias;&lt;/li&gt;
  &lt;li&gt;Enviar de volta o código com suas alterações para o servidor.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Então, o comando &lt;em&gt;check-in&lt;/em&gt; no TFS acaba tendo duas semânticas: a de “salvar” alterações, e “enviar” estas alterações para o servidor.&lt;/p&gt;

&lt;p&gt;O que noto é que esta noção de “&lt;strong&gt;vou enviar minhas alterações para o servidor&lt;/strong&gt;” é algo um pouco difícil de esquecer ao se fazer a transição.&lt;/p&gt;

&lt;p&gt;Lembre-se: &lt;strong&gt;no Git não existe um conceito de servidor central&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;O que existe são &lt;em&gt;remotes&lt;/em&gt;, ou seja, repositórios remotos. Você pode ter, a princípio, quantos repositórios remotos você quiser. E eles não necessariamente precisam ser tão remotos assim. Sim, eles podem estar em um site como Github/Gitlab/Bitbucket. Mas também podem estar na máquina do colega ao lado, em uma unidade de rede, ou até em uma outra pasta em sua própria máquina.&lt;/p&gt;

&lt;p&gt;Quando se trabalha em equipe é comum utilizar-se de um repositório padrão que é considerado, para efeitos de organização, o repositório padrão, onde o código “mais atual” encontra-se. Mais uma vez, no Git não existe conceito de servidor central; o uso de tal repositório padrão é uma convenção utilizada pelos times.&lt;/p&gt;

&lt;p&gt;Com isso em mente, vamos treinar um pouco alguns comandos do Git para começarmos a nos habituar com eles. No post de hoje não veremos nada de repositório remoto, servidor, nada disso: apenas comandos locais.&lt;/p&gt;

&lt;h2 id=&quot;baixando-e-instalando-o-git&quot;&gt;Baixando e instalando o Git&lt;/h2&gt;

&lt;p&gt;Dizem que houve uma época em que trabalhar com o Git no Windows era problemático. Atualmente, não é mais o caso, como você já vai ver.&lt;/p&gt;

&lt;p&gt;Para começar &lt;a href=&quot;https://git-scm.com/download/win&quot;&gt;faça o download do Git para Windows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Clique duas vezes no arquivo baixado, next, next, você sabe. Em geral não deveria haver problema se você deixar todas as opções como default mesmo; no entanto, é interessante fazer uma alteração:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1491350434/git1_xek0vv.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Quando chegar a esta tela, é interessante marcar a segunda opção para que você seja capaz de utilizar o Git a partir do prompt de comando do Windows, e não apenas a partir do Bash do Git.&lt;/p&gt;

&lt;h2 id=&quot;configurao-bsica&quot;&gt;Configuração básica&lt;/h2&gt;

&lt;p&gt;Depois de terminada a instalação, é necessária fazer a configuração básica de identidade do Git, que consiste em dizer ao Git seu nome e e-mail para que ele os associe a cada commit que você efetuar.&lt;/p&gt;

&lt;p&gt;Para fazer isso, vamos utilizar o Git Bash. No menu iniciar localize o programa “Git Bash” e execute-o. A janela do Git Bash será aberta.&lt;/p&gt;

&lt;p&gt;Digite os seguintes comandos:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git config –global user.name “Seu nome”&lt;/p&gt;

  &lt;p&gt;git config –global user.email “email@exemplo.com”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Existem mais configurações e opções possíveis, mas isso já é suficiente para que você comece a experimentar o Git.&lt;/p&gt;

&lt;h2 id=&quot;criando-o-repositrio&quot;&gt;Criando o repositório&lt;/h2&gt;

&lt;p&gt;No Git Bash, vamos criar uma nova pasta e em seguida acessá-la:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;mkdir repo&lt;/p&gt;

  &lt;p&gt;cd repo&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Depois de acessarmos a pasta recém-criada, é hora de criarmos nosso repositório:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git init&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Depois de executar esse comando, você verá a seguinte mensagem:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Initialized empty Git repository in C:/Users/your-name/repo/.git/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O prompt do Git Bash deveria estar mostrar algo assim:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Usuario@Maquina MINGW64 ~/repo (master)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ou seja: usuário logado, localização atual e branch atual. O branch padrão do Git chama-se &lt;em&gt;master&lt;/em&gt;. No próximo artigo desta série aprenderemos a operação básica de branches, mas por enquanto vamos permanecer apenas no branch padrão mesmo.&lt;/p&gt;

&lt;h2 id=&quot;primeiros-comandos&quot;&gt;Primeiros comandos&lt;/h2&gt;

&lt;p&gt;OK, com o repositório criado, é hora de testarmos alguns comandos. Um dos comandos mais úteis e que você irá utilizar com mais frequência é o &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;, que serve para visualizar o estado atual em que se encontra o repositório.&lt;/p&gt;

&lt;p&gt;Ao executá-lo, você deveria ver a seguinte mensagem:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;On branch master&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Initial commit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;nothing to commit (create/copy files and use “git add” to track)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ou seja:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;o branch atual;&lt;/li&gt;
  &lt;li&gt;que está esperando por seu primeiro commit;&lt;/li&gt;
  &lt;li&gt;e indica o que entrará no commit - o que nesse caso é nada, já que ainda não há alterações em nosso repositório.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ele ainda indica qual é o próximo passo a tomar, i.e. criar ou copiar arquivos e depois usar o comando &lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt; para rastreá-los. Por enquanto, não se preocupe com o que “rastrear” significa, pois isso será abordado no futuro.&lt;/p&gt;

&lt;p&gt;Vamos então criar um arquivo.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;echo teste &amp;gt; arq1.txt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Execute novamente o comando &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; e você verá que desta vez a mensagem está diferente:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Untracked files:
(use “git add &lt;file&gt;...&quot; to include in what will be committed)&lt;/file&gt;&lt;/p&gt;

  &lt;p&gt;arq1.txt&lt;/p&gt;

  &lt;p&gt;nothing added to commit but untracked files present (use “git add” to track)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alguns conceitos novos, começando por “Untracked files”, ou, em tradução livre, “Arquivos não rastreados”. O Git está vendo o arquivo que acabamos de criar, mas não está pronto ainda para incluí-lo no próximo commit.&lt;/p&gt;

&lt;p&gt;O interessante é que mais uma vez o Git nos dá a dica do que precisa ser feito, como você pode ver. Execute o comando:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git add arq1.txt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Execute novamente &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; e veja que a resposta mudou novamente:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Changes to be committed:&lt;/p&gt;

  &lt;p&gt;(use “git rm –cached &lt;file&gt;...&quot; to unstage)&lt;/file&gt;&lt;/p&gt;

  &lt;p&gt;new file:   arq1.txt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Por enquanto ignore a mensagem: 
&amp;gt; use “git rm –cached &lt;file&gt;...&quot; to unstage&lt;/file&gt;&lt;/p&gt;

&lt;p&gt;Agora podemos ver que o arquivo adicionado está pronto para entrar no commit. Então, vamos “commitar”:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git commit -m “Primeiro commit”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O comando acima cria o nosso primeiro commit. O parâmetro &lt;code class=&quot;highlighter-rouge&quot;&gt;-m&lt;/code&gt; serve para especificar uma mensagem de commit, o que é essencial para o futuro entendimento da evolução de um projeto.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; novamente:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;On branch master&lt;/p&gt;

  &lt;p&gt;nothing to commit, working directory clean&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Para terminar, vamos fazer uma alteração em nosso arquivo. Abra o arquivo no Bloco de Notas (ou outro editor de texto de sua preferência) e acrescente a seguinte linha:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;acrescentando uma nova linha&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; novamente:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;On branch master
Changes not staged for commit:
(use “git add &lt;file&gt;...&quot; to update what will be committed)
 (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)&lt;/file&gt;&lt;/file&gt;&lt;/p&gt;

  &lt;p&gt;modified:   arq1.txt&lt;/p&gt;

  &lt;p&gt;no changes added to commit (use “git add” and/or “git commit -a”)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A mensagem é familiar, apesar de ser diferente das anteriores. Como você já deve estar acostumado, ela termina com uma dica da próxima ação a ser tomada. Vamos então seguir a sugestão do Git:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git add arq1.txt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Perceba que é o mesmo comando que executamos lá atrás, quando o arquivo ainda estava no estado “untracked”. Embora o comando seja o mesmo, neste caso aqui ele tem um significado ligeiramente diferente. No futuro, entenderemos estas diferenças.&lt;/p&gt;

&lt;p&gt;Ao executar novamente &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; recebemos, novamente, uma nova mensagem:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Changes to be committed:
(use “git reset HEAD &lt;file&gt;...&quot; to unstage)&lt;/file&gt;&lt;/p&gt;

  &lt;p&gt;modified:   arq1.txt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Embora seja parecida com uma das mensagens anteriores, perceba que agora o nosso arquivo está no estado “modified”, e não “new file”, o que faz bastante sentido.&lt;/p&gt;

&lt;p&gt;Imagino que você saiba o que vem a seguir:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git commit -m “Segundo commit: adicionamos segunda linha para testar alteração”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Para terminar, execute novamente o &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; e verá novamente a mensagem já familiar: diretório de trabalho limpo, nada a ser commitado.&lt;/p&gt;

&lt;h2 id=&quot;concluso&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Este artigo foi extremamente simples, e isso não foi um acidente. Minha intenção foi de mostrar os comandos mais básicos, com a intenção de que você pegue o “feeling” de como se usa o Git.&lt;/p&gt;

&lt;p&gt;Perceba que existe um padrão facilmente perceptível nos comandos que executamos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;cria um arquivo&lt;/li&gt;
  &lt;li&gt;“adiciona”&lt;/li&gt;
  &lt;li&gt;dá commit&lt;/li&gt;
  &lt;li&gt;faz alteração no arquivo&lt;/li&gt;
  &lt;li&gt;“adiciona”&lt;/li&gt;
  &lt;li&gt;dá commit novamente&lt;/li&gt;
  &lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nos lugares onde coloquei “adiciona”, você sabe que estou me referindo ao comando &lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;. Você talvez tenha percebido que este comando tem duas finalidades diferentes, evidenciado pelas diferentes mensagens que o &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; retornou depois de sua execução.&lt;/p&gt;

&lt;p&gt;Você provavelmente também notou os diferentes estados que os arquivos em um repositório podem assumir: “untracked”, “new file”, “modified”. Eles caminham de um estado para o outro, como em uma pipeline.&lt;/p&gt;

&lt;p&gt;No próximo post da série vamos nos aprofundar nestas questões. Iremos entender as áreas existentes em um repositório, entender o fluxo de trabalho e os estágios pelos quais os arquivos passam.&lt;/p&gt;

&lt;p&gt;Vamos começar também a trabalhar com um dos conceitos mais importantes do Git: branches. Iremos dar início às operações mais comuns que são realizadas com branches, e também mostraremos como branches no Git diferem da maneira que você está acostumado a trabalhar no TFS.&lt;/p&gt;

&lt;p&gt;Até lá!&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Apr 2017 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/pt/basicos-do-git-usuarios-tfvc</link>
        <guid isPermaLink="true">http://carlosschults.net/pt/basicos-do-git-usuarios-tfvc</guid>
        
        <category>controle-de-versao</category>
        
        <category>git</category>
        
        <category>tfs</category>
        
        <category>tfvcs</category>
        
        
      </item>
    
      <item>
        <title>Escrevendo código bom: como reduzir a carga cognitiva do seu código</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1490471059/escrevendo-codigo-bom-1038x437_e4oy0i.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: O artigo a seguir foi originalmente escrito por &lt;a href=&quot;https://chrismm.com/&quot;&gt;Christian Maioli M.&lt;/a&gt;, que gentilmente me autorizou a fazer esta tradução. Caso seja do seu interesse, &lt;a href=&quot;https://chrismm.com/blog/writing-good-code-reduce-the-cognitive-load/&quot;&gt;confira o artigo original&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Baixo número de bugs, boa performance, facilidade de modificação. Código bem feito gera alto impacto, e talvez seja a maior razão por trás da existência do famoso desenvolvedor “10x”. E ainda assim, apesar de sua importância, código bom escapa a novos desenvolvedores. A literatura nessa área geralmente consistente de coleções de dicas desconexas. Como um novo desenvolvedor vai simplesmente memorizar isso tudo?  “&lt;a href=&quot;https://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670/ref=as_li_ss_tl?ie=UTF8&amp;amp;linkCode=ll1&amp;amp;tag=chrimaiospo06-20&amp;amp;linkId=6aabd46b91da513d86257af2c05b6585&quot;&gt;Code Complete&lt;/a&gt;“, o maior expoente nesta matéria, é um livro de 960 páginas!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Eu acredito que é possível construir um framework mental simples que pode ser usado com qualquer linguagem ou biblioteca e que vai resultar em código de boa qualidade por padrão.&lt;/strong&gt; Há cinco conceitos principais sobre os quais vou falar aqui. Basta mantê-los em mente e escrever código de boa qualidade será moleza.&lt;/p&gt;

&lt;p&gt;Update: Mia Li fez a gentileza de disponibilizar uma tradução deste artigo para o Chinês &lt;a href=&quot;http://www.inside.com.tw/2016/07/05/writing-good-code-how-to-reduce-the-cognitive-load-of-your-code&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;mantenha-suas-peculiaridades-pessoais-de-fora&quot;&gt;Mantenha suas peculiaridades pessoais de fora&lt;/h2&gt;

&lt;p&gt;Você lê um artigo que explode a sua mente com truques novos. Agora você vai escrever código “esperto” e todos os seus colegas ficarão impressionados.&lt;/p&gt;

&lt;p&gt;O problema é que as pessoas só querem corrigir seus bugs e ir em frente. Seu truquezinho esperto é, com frequência, pouco mais que uma distração. Como eu falei em “&lt;a href=&quot;https://chrismm.com/blog/applying-neuroscience-to-software-development/&quot;&gt;Applying neuroscience to software development&lt;/a&gt;“, quando as pessoas têm que digerir  seu código, as “pilhas mentais” enchem depressa e se torna difícil fazer progresso.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1490470570/image_0_fzqyo8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;figcaption&gt;Não personalize seu trabalho em maneiras que irão precisar de explicações. 

Tradução do comentário: Isso era útil na linguagem C para evitar escrever acidentalmente &quot;variable = null&quot;. Atualmente, isso apenas confundiria a maioria das pessoas, com pouco benefício.&lt;/figcaption&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Não codifique “do seu jeito”. Apenas siga a padronização de código. Este tipo de coisa é um problema já resolvido. Torne seu código previsível e fácil de ler codificando da maneira que as pessoas esperam.&lt;/p&gt;

&lt;h2 id=&quot;dividir-para-conquistar&quot;&gt;Dividir para conquistar&lt;/h2&gt;

&lt;p&gt;Código complexo frequentemente pode ser clarificado por meio da modularização, e existem mais maneiras de se fazer isso do que apenas criando mais funções. Gravar o resultado de longas condicionais em uma variável ou duas é uma grande maneira de modularizar sem o overhead de chamar uma função. Isso irá inclusive lhe permitir compô-las em condicionais maiores, ou reutilizar o resultado em algum outro lugar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A abordagem ao se dividir um problema deve ser tornar cada seção o mais focada possível, afetando apenas estado local, sem misturar com assuntos irrelevantes, e se possível sem nenhum efeito colateral.&lt;/strong&gt; Linguagens de programação e bibliotecas muitas vezes têm seus próprios problemas, e abstraí-los pode ajudar a fazer com que seu código cuide apenas dos assuntos dele. O &lt;a href=&quot;http://code.tutsplus.com/tutorials/solid-part-1-the-single-responsibility-principle--net-36074&quot;&gt;Princípio da Responsabilidade Única&lt;/a&gt; é outro exemplo de como código focado e localizado resulta em bom design.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1490470570/image_1_rfmnyv.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;figcaption&gt;Eu gosto de utilizar variáveis para compartimentar lógica.
Tradução do comentário: Isso pode ser uma boa maneira para modularizar sem o peso excessivo de chamadas de funções&lt;/figcaption&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;TDD, além de trazer seus próprios benefícios quando feito corretamente, tem feitos com que as pessoas apliquem certos princípios que anteriormente não eram tão populares. Código sem estado era desprezado como lento e desnecessário (ver: maior parte de código antigo em C/C++), e agora todos estão falando sobre funções puras. Mesmo que você não use TDD, você deveria aprender seus princípios. Trabalhar sob novos paradigmas transformará você em um desenvolvedor resiliente.&lt;/p&gt;

&lt;h2 id=&quot;torne-seu-cdigo-discreto-e-processvel&quot;&gt;Torne seu código discreto e processável&lt;/h2&gt;

&lt;p&gt;Seu computador e suas ferramentas podem sofrer tanto quanto você para lidar com seu código, e existe alguma correlação entre o número de pré-processadores e mutações você precisa aplicar e o quão bagunçado o seu código é.&lt;/p&gt;

&lt;p&gt;Vamos deixar de lado os possíveis benefícios destas ferramentas de build adicional por um momento. A probabilidade é de que elas requerem que você use linguagens de domínio específica como templates customizados, ou estruturas de dados dinâmicas e complexas como hash tables. A sua IDE provavelmente não será boa em lidar com tais coisas, e a localização de trechos relevantes do código se tornará mais difícil.&lt;/p&gt;

&lt;p&gt;Evite usar extensões de linguagens e bibliotecas que não trabalham bem com sua IDE. O impacto que eles terão na sua produtividade bate de longe o pequeno benefício de uma configuração mais fácil ou a economia de algumas poucas teclas com uma sintaxe mais concisa.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1490470570/image_2_pn1dp4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;figcaption&gt;
O uso de Service Locator é um exemplo de design que resulta em integração ruim com a maioria das IDEs.
Tradução do comentário: Uso de string mágicas fará com que seja impossível para sua IDE acompanhar seu código.
&lt;/figcaption&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Outra maneira de manter a parte “integrada” da sua IDE relevante é evitar código mágico. A maioria das linguagens disponibilizam maneiras para que você escreva código mais dinâmico. Abusar tais features utilizando strings mágicas, índices de arrays mágicos e funcionalidades de templates customizados irá resultar em uma base de código mais desconectada. Geralmente qualquer feature que apenas um humano sabe o significado vai levar você para essa caminho, e é uma estrada difícil de se escapar, porque se a sua IDE não entende o código, quaisquer funcionalidades de refatoração que possua serão inúteis quando você quiser mudar para uma arquitetura mais estática.&lt;/p&gt;

&lt;h2 id=&quot;torne-seu-cdigo-legvel&quot;&gt;Torne seu código legível&lt;/h2&gt;

&lt;p&gt;Trabalhe no sentido de ter uma arquitetura previsível. Seus colegas de time terão mais facilidade em localizar as coisas, e isso vai reduzir bastante o tempo necessário para concluir as tarefas. &lt;strong&gt;Assim que vocês estiverem de acordo sobre uma estrutura arquitetural geral para seu projeto, torne óbvia a localização dos principais elementos.&lt;/strong&gt; Usa MVC? Coloque models, views e controllers em suas próprias pastas, não três níveis abaixo ou espalhados em vários lugares.&lt;/p&gt;

&lt;p&gt;Eu falei sobre modularização. Também é possível existir modularização em excesso, o que geralmente torna seu código mais difícil de localizar. Sua IDE pode oferecer alguma ajuda, mas às vezes você estará dividido entre fazer com que sua IDE ignore uma pasta de biblioteca ou outro terceiro devido a ela conter muito código irrelevante, ou mantê-la indexada e lidar com o problema manualmente. É um beco sem saída. Tente utilizar menos bibliotecas escolhendo aquelas que resolvem tantas necessidades quantas forem possível.&lt;/p&gt;

&lt;p&gt;Bibliotecas e ferramentas também podem ser uma barreira a novos desenvolvedores. Eu recentemente fiz um projeto usando EcmaScript 7 (babel), apenas para depois perceber que nosso desenvolvedor júnior estava tendo problemas para entender o que tudo aquilo significava.  Uma penalidade pesada para a produtividade do time. Eu subestimei o potencial daquilo de sobrecarregar uma pessoa que está só começando. Não use ferramentas que ainda são difíceis demais de aprender. Espere por uma época melhor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1490470570/image_3_vdvcrz.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Código real de um makefile que escrevi. Desenvolvedores juniores não conseguem lidar com o uso excessivo de novas ferramentas.&lt;/figcaption&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2 id=&quot;torne-seu-cdigo-fcil-de-digerir&quot;&gt;Torne seu código fácil de digerir&lt;/h2&gt;

&lt;p&gt;Se você chegou até aqui, eu tenho boas notícias: esta é provavelmente a parte mais importante. A escolha de bons nomes é sabidamente um dos maiores problemas no desenvolvimento de software. Ferramentas de build provavelmente não vão causar nenhuma melhora aqui, e a razão é que computadores não podem realmente saber o raciocínio que houve por trás de uma solução.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Você precisa documentar o porquê. Nomes de variáveis e funções relevantes e contextuais são uma ótima maneira de se fazer isso.&lt;/strong&gt; Nomes que transmitem propósito podem até reduzir a necessidade de documentação.&lt;/p&gt;

&lt;p&gt;O uso de prefixos em nomes é uma boa maneira de adicionar sentido a eles. É uma prática que costumava ser popular, e eu penso que o mau uso foi o motivo dela não continuar a ser usada. Sistemas de prefixos como  &lt;a href=&quot;http://www.joelonsoftware.com/articles/Wrong.html&quot;&gt;notação húngara&lt;/a&gt; inicialmente tinham a intenção de adicionar sentido, mas com o tempo eles acabaram sendo usado em maneiras menos contextuais, tais como para adicionar informação de tipo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1490470570/image_4_x8oly3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Interfaces fluentes tem sido abusadas frequentemente em tempos recentes.&lt;/figcaption&gt;
&lt;p&gt;Tradução do comentário: Use nomes que transmitam propósito, não tome vantagem da linguagem apenas para parecer inteligente&lt;/p&gt;

&lt;p&gt;Finalmente, sempre há algo a ser dito sobre manter a complexidade ciclomática baixa. Isso significa manter o número de ramificações condicionais tão baixo quanto for possível. Cada ramificação adicional não apenas adiciona mais indentação e prejudica a legibilidade, mas, mais importante que isso, aumenta o número de elementos aos quais você precisa estar atento.&lt;/p&gt;

&lt;h2 id=&quot;concluso-e-mais-leituras&quot;&gt;Conclusão e mais leituras&lt;/h2&gt;

&lt;p&gt;Estes são cinco conceitos simples e abrangentes, e o meu objetivo aqui foi tornar seu aprendizado mais fácil ao lhe dar caixas nas quais colocar todas as suas ideias sobre organização de código.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pratique focar nesses aspectos ao programar para solidifica-los.&lt;/strong&gt; Se você ainda não leu, eu realmente recomendo Code Complete. Ele vem com um grande número de exemplos e disseca quase todas as situações que você pode vir a encontrar.&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Mar 2017 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/pt/escrevendo-codigo-bom/</link>
        <guid isPermaLink="true">http://carlosschults.net/pt/escrevendo-codigo-bom/</guid>
        
        <category>traducoes</category>
        
        <category>boas-praticas</category>
        
        
      </item>
    
      <item>
        <title>Funcionalidades do C# 7 que vale a pena conhecer - Parte 1</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1489452722/charp7-features-cover_ciekql.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;C# 7 está finalmente entre nós. Hora de conhecer algumas de suas features.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;No meu &lt;a href=&quot;http://carlosschults.net/pt/funcionalidades-csharp-6/&quot;&gt;último post&lt;/a&gt; eu escrevi sobre algumas das funcionalidades mais interessantes (para mim, pelo menos) do C# 6. Visual Studio 2017 e C# 7 foram oficialmente lançados no dia seguinte, então eu acredito que agora é o momento perfeito para batermos um papo sobre a nova versão da linguagem.&lt;/p&gt;

&lt;p&gt;Eu acho que é justo dizer que, em sua sétima versão, o C# continua a tendência iniciada na versão anterior. Ao invés de adicionar novas capacidades radicalmente novas na linguagem, o time de design escolheu incluir funcionalidades que podem tornar seu código mais limpo e simples.&lt;/p&gt;

&lt;p&gt;Nesta versão, eles expandiram certas funcionalidades que tiveram sua estreia na versão 6. Parece até que o C# 6 foi um tipo de ensaio para algumas das features; agora que os projetistas da linguagem sabem que elas foram bem recebidas, eles podem levá-las para seu próximo nível.&lt;/p&gt;

&lt;p&gt;Então, sem mais delongas, vamos começar.&lt;/p&gt;

&lt;h2 id=&quot;separadores-de-dgitos-e-literais-binrios&quot;&gt;Separadores de dígitos e literais binários&lt;/h2&gt;

&lt;p&gt;Dê uma olhada no código a seguir:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/00e899d0f7611e3ca3b54f109f58619b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Para que servem os underscores? &lt;strong&gt;Legibilidade&lt;/strong&gt;, essa é a resposta.&lt;/p&gt;

&lt;p&gt;Números compridos podem ficar bem difíceis de serem lidos. Para lidar com esse problema, C# 7 permite que você use o &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; como separador de dígito.&lt;/p&gt;

&lt;p&gt;Os separadores não fazem nenhuma diferença no valor do número. Você pode colocá-los em qualquer lugar no número, e em qualquer quantidade.&lt;/p&gt;

&lt;p&gt;E caso você esteja se perguntando, você não está restrito a usar os separadores com números inteiros apenas; eles também funcionam com os outros tipos numéricos.&lt;/p&gt;

&lt;p&gt;A nova versão do C# também introduz literais binários, como visto na terceira linha do exemplo anterior. Se você precisar escrever um valor binário, basta colocar &lt;code class=&quot;highlighter-rouge&quot;&gt;0b&lt;/code&gt; no começo do número, e é isso!&lt;/p&gt;

&lt;h2 id=&quot;variveis-out&quot;&gt;Variáveis ‘Out’&lt;/h2&gt;

&lt;p&gt;Em versões anteriores do C#, trabalhar com variáveis &lt;em&gt;out&lt;/em&gt; era um pouco inconveniente. Você tinha que separar a declaração da variável e seu uso em dois passos.&lt;/p&gt;

&lt;p&gt;Agora, é possível já declarar a variável na lista de argumentos:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/fbd60b4e31a09c1e0a4f19b431b10320.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Algumas coisas importantes para se ter em mente:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Apesar de eu ter explicitamente escrito o nome do tipo na declaração, isso não é sempre necessário. Eu poderia ter usado &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; e funcionaria do mesmo jeito.&lt;/li&gt;
  &lt;li&gt;Você talvez tenha pensado que a variável iria sair de escopo depois do bloco do &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;. Este não é o caso. A variável continua sendo acessada normalmente até que saia do seu escopo normal.&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/a23411376a6610e0e9081674faf1b0a5.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;mais-membros-expression-bodied&quot;&gt;(Mais) Membros “Expression-bodied”&lt;/h2&gt;

&lt;p&gt;No começo deste post, eu disso que C# 7 expande algumas features do seu antecessor, lembra? Bom, este é um destes casos.&lt;/p&gt;

&lt;p&gt;No post anterior, nós vimos que &lt;a href=&quot;http://carlosschults.net/pt/funcionalidades-csharp-6/#mtodos-e-propriedades-expression-bodied&quot;&gt;o C# 6 nos trouxe membros “Expression-bodied”&lt;/a&gt;, que é uma maneira mais legal e mais curta de declarar membros de classe, usando a sintaxe das expressões lambda.&lt;/p&gt;

&lt;p&gt;Porém, você só podia utilizar essa funcionalidade com &lt;strong&gt;métodos, propriedades somente leitura e indexadores&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;C# 7 muda o jogo. Agora também é permitido ter construtores, destrutores e propriedades de escrita que usam essa feature.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/50512925b89eb8ee590190793846a724.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;expresses-throw&quot;&gt;Expressões “throw”&lt;/h2&gt;

&lt;p&gt;Esta é bem simples. Considere o código a seguir:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/8f89e4fff3cf3e6302bc8325d4df5617.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Foram 9 linhas de código para apenas uma atribuição. E a maioria dessas linhas nem estão fazendo a atribuição em si; elas são apenas uma cláusula de guarda. Claro, elas são importantes, mas tendem a poluir o seu código. E se tivesse um outro jeito?&lt;/p&gt;

&lt;p&gt;Agora tem.&lt;/p&gt;

&lt;p&gt;Nas versões anteriores, &lt;code class=&quot;highlighter-rouge&quot;&gt;throw&lt;/code&gt; era uma declaração. Agora, é uma &lt;strong&gt;expressão&lt;/strong&gt;, o que nos permite disparar exceções em lugares como a segunda parte do operador “Null Coalescing” e em expressões condicionais.&lt;/p&gt;

&lt;p&gt;Usando a &lt;em&gt;throw expression&lt;/em&gt;, o exemplo acima fica simples assim:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/a10cfa584d08fda2d3497075926d073d.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Claro, não há nada nos impedindo de transformar o construtor em um “membro com corpo de expressão”:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/02548a3f2d735468518e6c00eea385a8.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;concluso&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Neste post, nós vimos algumas das novas features da sétima versão do C#. Isto foi apenas a primeira parte. Mais partes virão, nas quais eu planejo abordar todas (ou, ao menos, a maioria) das novas funcionalidades.&lt;/p&gt;

&lt;p&gt;Como eu disse antes, C# 7 meio que continua o caminho iniciado no 6. O time de projetistas não saiu incluindo umas features novas e loucas apenas por colocar; em vez disso, eles cuidadosamente selecionaram aquelas que mais nos ajudariam a melhorar a qualidade do nosso código.&lt;/p&gt;

&lt;p&gt;Tendo dito isso, eu realmente considero essa versão um pouco menos…tímida - por falta de palavra melhor - que a anterior. Algumas das funcionalidades que não mencionei hoje mostram que a linguagem está sendo levada à novas e interessantes direções, e eu penso que temos uma viagem bastante interessante à nossa frente.&lt;/p&gt;

&lt;p&gt;Obrigado por ter lido até aqui, e fique ligado(a) para a parte 2!&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Mar 2017 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/pt/funcionalidades-csharp-7/</link>
        <guid isPermaLink="true">http://carlosschults.net/pt/funcionalidades-csharp-7/</guid>
        
        <category>csharp</category>
        
        <category>iniciantes</category>
        
        
      </item>
    
      <item>
        <title>Já está na hora de começar a usar essas features do C# 6!</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1487896790/csharp6features_y5czrf.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A sétima versão do C# está chegando, e vai provavelmente trazer várias funcionalidades novas e úteis para nossas  caixas de ferramentas. Mas deixa eu perguntar uma coisa: você já está usando as funcionalidades da versão anterior?
 &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Alguns dias atrás eu estava pensando sobre qual seria o tema do próximo post. Nada mais natural que escrever sobre o C# 7, já que &lt;a href=&quot;https://blogs.msdn.microsoft.com/visualstudio/2017/02/09/visual-studio-2017-launch-event-and-20th-anniversary/&quot;&gt;seu lançamento, junto com o Visual Studio 2017, é amanhã.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mas então eu percebi que, mesmo já fazendo cerca de dois anos desde o lançamento do C# 6, alguns desenvolvedores ainda não se sentem confortáveis o suficiente com as funcionalidades da versão, de maneira a não incorporá-las em seu código.&lt;/p&gt;

&lt;p&gt;Assim, eu decidi voltar um pouco e escrever sobre as funcionalidades do C# 6 no lugar disso. Não todas, mas aquelas que podem tornar seu código mais limpo e expressivo, e que são simples o suficiente para você já sair usando!&lt;/p&gt;

&lt;h2 id=&quot;interpolao-de-string&quot;&gt;Interpolação de String&lt;/h2&gt;

&lt;p&gt;Suponha que nós temos uma classe chamada &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt;, com duas propriedades somente-leitura, &lt;code class=&quot;highlighter-rouge&quot;&gt;Name&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;Age&lt;/code&gt;. Algo assim:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/84db03cd2a530530b72c4b9eeeb738d4.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Então nós adicionamos um método chamado &lt;code class=&quot;highlighter-rouge&quot;&gt;Introduce&lt;/code&gt;, para que nossas pessoas sejam capazes de se apresentar. Para uma pessoa de 22 anos chamada Maria, o método deve retornar “Hi! My name is Maria and I’m 22 years old.”&lt;/p&gt;

&lt;p&gt;Tem algumas maneiras diferentes de se fazer isso na versão 5 do C#, como você pode ver na seguinte listagem:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/9e30324951420356397c5cc8f50ea51b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Cada uma delas tem suas vantagens e desvantagens, claro, mas o C# 6 disponibiliza um novo jeito:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/17f501bd6d0ce6f5938edf17ef8e8704.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Apenas coloque um cifrão no início da string, coloque suas variáveis dentro de chaves, e é isso!&lt;/p&gt;

&lt;p&gt;Interpolação de strings não funciona para todas as ocasiões. Se você precisa de uma formatação especial nos valores, você ainda teria de usar &lt;code class=&quot;highlighter-rouge&quot;&gt;string.Format()&lt;/code&gt;, por exemplo.&lt;/p&gt;

&lt;p&gt;Mas no dia-a-dia, eu uso interpolação na maioria das vezes que preciso fazer concatenação de strings. Eu acho essa forma bem mais interessante e mais clara do que as outras opções.&lt;/p&gt;

&lt;h2 id=&quot;initializers-para-propriedades-automticas&quot;&gt;Initializers para propriedades automáticas&lt;/h2&gt;

&lt;p&gt;Continuando com o exemplo anterior. Vamos supor que nós precisamos de um construtor sem parâmetros em nossa classe. Junto com isso, vamos precisar disponibilizar valores padrão para &lt;code class=&quot;highlighter-rouge&quot;&gt;Name&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;Age&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Do contrário, o método &lt;code class=&quot;highlighter-rouge&quot;&gt;Introduce()&lt;/code&gt; retornaria “Hi! My name is  and I’m 0 years old.” E não iríamos querer isso, né?&lt;/p&gt;

&lt;p&gt;No C# 5, nós teríamos que inicializar as propriedades dentro do construtor:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/d95cade5d8d5f245a1d6bb49ef2feb1f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Já a sexta versão da linguagem nos permite definir valores padrão para as propriedades no mesmo momento em que as declaramos:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/e7d56c032e723f7c5110a9e3bfa1c744.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;operador-condicional-nulo&quot;&gt;Operador condicional nulo&lt;/h2&gt;

&lt;p&gt;Considere o código a seguir:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/7fb5caff2e73f4130f4db982825adbe6.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Nada demais, não é? Mas tem um problema esperando para acontecer aqui. Se &lt;code class=&quot;highlighter-rouge&quot;&gt;customer&lt;/code&gt; é &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, esse código vai disparar uma &lt;code class=&quot;highlighter-rouge&quot;&gt;NullReferenceException&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;É nesse momento que o “Operador condicional nulo” vem a calhar:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/65bc4372a0e4fc3e8f38c0ee57905beb.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;O que o código acima faz? Simples: se &lt;code class=&quot;highlighter-rouge&quot;&gt;customer&lt;/code&gt; não é &lt;code class=&quot;highlighter-rouge&quot;&gt;nulo&lt;/code&gt;, a propriedade &lt;code class=&quot;highlighter-rouge&quot;&gt;Address&lt;/code&gt; é acessada normalmente, e seu valor é atribuído à nossa variável local. No entanto, se &lt;code class=&quot;highlighter-rouge&quot;&gt;customer&lt;/code&gt; &lt;em&gt;é&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, a expressão toda é avaliada para nulo, e é isso que a variável recebe.&lt;/p&gt;

&lt;p&gt;Outra coisa legal a respeito desse operador é que você pode usá-lo em conjunto com o &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms173224.aspx&quot;&gt;Operador Null Coalesce&lt;/a&gt; para disponibilizar, de maneira fácil, um valor default diferente de &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/e17d34ba939fb7c472e164010db56377.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;mtodos-e-propriedades-expression-bodied&quot;&gt;Métodos e propriedades “Expression-bodied”&lt;/h2&gt;

&lt;p&gt;Essa é bem fácil. Trata-se de uma maneira mais curta de escrever métodos, utilizando a sintaxe das expressões lambda.&lt;/p&gt;

&lt;p&gt;Por exemplo, os dois métodos a seguir fazem a mesma coisa:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/eeae77f3876f9b692ca667281b5401d0.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Essa funcionalidade não é restrita a métodos. Ela também pode ser usada com propriedades (de apenas leitura) e indexadores.&lt;/p&gt;

&lt;h2 id=&quot;concluso&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Parece claro que o objetivo da Microsoft  com a sexta versão do C# não era adicionar funcionalidades radicalmente novas à linguagem.&lt;/p&gt;

&lt;p&gt;Ao invés disso, a intenção era permitir aos desenvolvedores escrever código de uma maneira mais clara e concisa. E em minha opinião, o objetivo foi alcançado.&lt;/p&gt;

&lt;p&gt;Você pode pensar que algumas das funcionalidades não fazem tanta diferença, na prática. Eu discordo. C# é frequentemente acusado de ser muito verboso. Existem situações nas quais você precisa escrever uma quantidade razoável de código para fazer algo que em Ruby ou Python poderia ser feito em uma linha.&lt;/p&gt;

&lt;p&gt;E isso é normal. Um pouco (a maioria) da já mencionada verbosidade vem do fato de C# ser uma linguagem estaticamente tipada, e eu digo: &lt;strong&gt;sou feliz por isso&lt;/strong&gt;. Eu não consigo contar a quantidade de vezes que o compilador me salvou, pegando meus erros idiotas.&lt;/p&gt;

&lt;p&gt;Se um pouco de verbosidade é o preço que tenho que pagar por isso, que seja.&lt;/p&gt;

&lt;p&gt;Tudo isto dito, os detratores têm uma certa razão. É possível ser verboso &lt;em&gt;excessivamente&lt;/em&gt;. Então, qualquer funcionalidade que me permite eliminar um pouco dessa verbosidade extra e escrever código mais conciso é muito bem vinda.&lt;/p&gt;

&lt;h2 id=&quot;veja-mais&quot;&gt;Veja mais&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://geekswithblogs.net/WinAZ/archive/2015/06/30/whatrsquos-new-in-c-6.0-auto-property-initializers.aspx&quot;&gt;http://geekswithblogs.net/WinAZ/archive/2015/06/30/whatrsquos-new-in-c-6.0-auto-property-initializers.aspx&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/magazine/dn802602.aspx&quot;&gt;https://msdn.microsoft.com/en-us/magazine/dn802602.aspx&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.caelum.com.br/novidades-do-c-6-0/&quot;&gt;http://blog.caelum.com.br/novidades-do-c-6-0/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 06 Mar 2017 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/pt/funcionalidades-csharp-6/</link>
        <guid isPermaLink="true">http://carlosschults.net/pt/funcionalidades-csharp-6/</guid>
        
        <category>csharp</category>
        
        <category>iniciantes</category>
        
        
      </item>
    
      <item>
        <title>Aprenda quais tipos de comentários devem ser evitados</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1488499558/comments-1038x437.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Alerta de Spoiler: Você deveria evitar a maioria.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;“Comentar ou não comentar”. Essa é uma questão que gera debates acalorados. Algumas pessoas dizem que comentários são indispensáveis. Outros defendem que comentários apenas mostram a incapacidade do desenvolvedor de se expressar claramente no código. Quem está certo?&lt;/p&gt;

&lt;p&gt;Na época da faculdade, eu considerava comentários indispensáveis na hora de programar. Do contrário, como você poderia entender o que código deveria fazer?&lt;/p&gt;

&lt;p&gt;Depois de me formar e encontrar um emprego, as coisas começaram a mudar. Eu comecei a ser exposto à &lt;em&gt;código real&lt;/em&gt;. Eu estava lendo livros, artigos e blog posts escritos por pessoas influentes da área.&lt;/p&gt;

&lt;p&gt;Todas essas experiências moldaram a minha visão atual.&lt;/p&gt;

&lt;h2 id=&quot;os-perigos-da-documentao-ruim&quot;&gt;Os perigos da documentação ruim&lt;/h2&gt;

&lt;p&gt;Comentários são apenas outra forma de documentação. E não se engane: documentação é uma coisa boa - &lt;em&gt;quando feita corretamente e na quantidade certa&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Infelizmente, é feita errada frequentemente!&lt;/p&gt;

&lt;p&gt;Muitos tipos de documentação podem ser problemáticas. É muito comum que a documentação perca sincronia com o que está documentando, o que é bem pior que não ter documentação nenhuma para começar.&lt;/p&gt;

&lt;p&gt;Esse é um dos problemas dos quais comentários sofrem, mas está longe de ser o único.&lt;/p&gt;

&lt;h3 id=&quot;cdigo-comentado&quot;&gt;Código comentado&lt;/h3&gt;

&lt;p&gt;Vamos começar com o problema mais óbvio de todos, que é código comentado. Alguns desenvolvedores, durante uma correção de bug por exemplo, decidem comentar o código que está errado, em vez de removê-lo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Não faça isso!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Código comentado não traz benefício para ninguém. É apenas desperdício. Confie no seu sistema de controle de versão. Ele vai lembrar das alterações feitas caso seja necessário revertê-las no futuro.&lt;/p&gt;

&lt;h3 id=&quot;comentrios-changelog&quot;&gt;Comentários ‘Changelog’&lt;/h3&gt;

&lt;p&gt;Esta categoria de comentários ruins é parecida com a anterior, no sentido de ser causada por uma falta de confiança no sistema de controle de versões.&lt;/p&gt;

&lt;p&gt;O que eu quero dizer por comentários changelog? Comentários que servem apenas para listar as alterações feitas a um arquivo.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/3889e4d4b337c6adc94af354ec574d9a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Comentários desse tipo estão apenas fazendo o mesmo trabalho que seu controle de versão, mas de uma maneira desajeitada e propensa ao erro.&lt;/p&gt;

&lt;p&gt;Não escreve comentários como esses. Use &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; e seja feliz.&lt;/p&gt;

&lt;h3 id=&quot;comentrios-redundantes&quot;&gt;Comentários redundantes&lt;/h3&gt;

&lt;p&gt;Esse tipo de comentário ruim é muito fácil de detectar e corrigir. Considere o código a seguir:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/cc821bc3c00137e5fad68f1fe7d65490.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Eu acho que todos podemos concordar que esses comentários são inúteis. O código é perfeitamente claro sem eles, portanto, devem ser removidos.&lt;/p&gt;

&lt;h3 id=&quot;comentrios-delimitando-fim-de-blocos&quot;&gt;Comentários delimitando fim de blocos&lt;/h3&gt;

&lt;p&gt;Você provavelmente já viu algum código assim antes:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/0c6e461ec278db804f52d64ade458bf4.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Algumas pessoas escrevem comentários assim para não perderem o controle das chaves.&lt;/p&gt;

&lt;p&gt;Se você precisa de comentários por essa razão, isso é indicativo de que seu método é muito longo e você tem muitos níveis de indentação.&lt;/p&gt;

&lt;p&gt;Lembre-se do Princípio da Responsabilidade Única: cada método deve fazer apenas uma coisa. Divida o seu método em métodos menores e a necessidade desse tipo de comentários desaparece.&lt;/p&gt;

&lt;h3 id=&quot;comentrios-que-delimitam-sees-dentro-de-um-mtodo&quot;&gt;Comentários que delimitam seções dentro de um método&lt;/h3&gt;

&lt;p&gt;Esse é parecido com o anterior. Se você tem diversas seções dentro de um método, cada uma delas com um comentário explicativo em cima, então você provavelmente está violando o Princípio da Responsabilidade Única.&lt;/p&gt;

&lt;p&gt;Extraia cada trecho para seu próprio método, usando o texto do comentário como o nome do novo método, e então remova os comentários.&lt;/p&gt;

&lt;h3 id=&quot;comentrios-desatualizados&quot;&gt;Comentários desatualizados.&lt;/h3&gt;

&lt;p&gt;Um cenário comum:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bob escreve algumas linhas de código. Ele decide que o código não está claro o suficiente e adiciona alguns comentários para tornar a sua intenção mais clara.&lt;/li&gt;
  &lt;li&gt;Passam-se algumas semanas. Alguém descobre um bug no código de Bob. Mas ele está de férias, então Alice é encarregada de corrigir o bug.&lt;/li&gt;
  &lt;li&gt;Alice corrige o código em alguns minutos e comita suas alterações. Mas ela esquece de alterar os comentários para refletir as mudanças que ela fez no código.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O que nós temos agora? Comentários mentirosos!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Documentação que espalha mentiras é pior que não ter documentação alguma.&lt;/strong&gt; É uma fonte de confusão para os desenvolvedores, e terreno fértil para bugs. Quando você ver um comentário desatualizado, não pense duas vezes: remova-o imediatamente, ou corrija-o. Mas na maioria das vezes você não deveria manter o comentário. Veja o próximo tópico para descobrir o porquê.&lt;/p&gt;

&lt;h3 id=&quot;comentrios-criados-devido--falta-de-expressividade-no-cdigo&quot;&gt;Comentários criados devido à falta de expressividade no código&lt;/h3&gt;

&lt;p&gt;Considere o código a seguir:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/ec7db3ebadccded768f97933c88e704f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Talvez você não considere o comentário no trecho acima tão ruim. Tudo bem, não é péssimo. Mas pense na oportunidade perdida de extrair um método ou propriedade útil:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/b102a4f5c11ba7b1639410dcbb87830f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;No novo código, nós extraímos o conceito de ser elegível para doar sangue para uma nova propriedade. As regras para elegibilidade para doação de sangue estão agora consolidadas em um único local; se elas mudarem algum dia, a quantidade de trabalho necessária para atualizá-las será mínima.&lt;/p&gt;

&lt;p&gt;E nós ainda ganhamos o benefício adicional da legibilidade: a nova instrução &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; lê quase como linguagem natural.&lt;/p&gt;

&lt;h2 id=&quot;concluso&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Como vimos, há diversos tipos de comentários ruins com os quais você deve ficar alerta. Eles geralmente são sinais de que há algo errado no seu código. Talvez seus métodos são muito longos.Talvez &lt;a href=&quot;http://carlosschults.net/pt/como-escolher-bons-nomes/&quot;&gt;você não escolheu bons nomes para suas variáveis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Toda vez que você sentir a necessidade de escrever um comentário, pare e tente pensar em maneiras de melhorar o seu código para tornar o comentário desnecessário.&lt;/p&gt;

&lt;p&gt;Nem todos os comentários são ruins. Em um post futuro, vou falar sobre os tipos de comentários que são úteis.&lt;/p&gt;

&lt;p&gt;Até mais!&lt;/p&gt;

&lt;h2 id=&quot;ler-mais-todos-os-links-em-ingls&quot;&gt;Ler mais (todos os links em inglês)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://butunclebob.com/ArticleS.TimOttinger.ApologizeIncode&quot;&gt;Apologies In Code, por Robert C. Martin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codeproject.com/tips/467657/write-comments-that-matter&quot;&gt;Write comments that matter, por Sander Rossel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@kentcdodds/please-don-t-commit-commented-out-code-53d0b5b26d5f#.yex54k2sg&quot;&gt;Please, don’t commit commented out code, por Kent C. Dodds&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 02 Mar 2017 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/pt/tipos-de-comentarios-a-evitar/</link>
        <guid isPermaLink="true">http://carlosschults.net/pt/tipos-de-comentarios-a-evitar/</guid>
        
        <category>code smell</category>
        
        <category>BoasPraticas</category>
        
        <category>iniciantes</category>
        
        
      </item>
    
      <item>
        <title>Blogs em português sobre desenvolvimento de software que você deveria seguir!</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1486838693/capa-min_gdaepw.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para o bem ou para o mal, o idioma da tecnologia é o inglês. Mas isso não significa que não existe conteúdo de qualidade sendo produzido na nossa língua.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;O inglês é a língua franca da tecnologia, como eu já &lt;a href=&quot;http://carlosschults.net/pt/programar-portugues-ou-ingles/&quot;&gt;disse quando expus minha opinião sobre a controvérsia de se programar em inglês ou português.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Além das oportunidades que saber inglês pode lhe trazer, eu acredito que o maior benefício que você consegue é ter acesso a muita informação de qualidade.&lt;/p&gt;

&lt;p&gt;Porém, isso não quer dizer que não exista informação de qualidade sendo publicada na nossa língua. Seguem agora três blogs que você já deveria estar acompanhando:&lt;/p&gt;

&lt;h2 id=&quot;object-pascal-programming&quot;&gt;Object Pascal Programming&lt;/h2&gt;

&lt;p&gt;Vamos começar a lista com o &lt;a href=&quot;http://objectpascalprogramming.com/&quot;&gt;Object Pascal Programming&lt;/a&gt;, blog do &lt;a href=&quot;https://github.com/mdbs99/&quot;&gt;Marcos Douglas Santos&lt;/a&gt;, o qual eu citei no meu &lt;a href=&quot;carlosschults.net/pt/metodos-privados-code-smell/&quot;&gt;último post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Conheci esse site há cerca de dois meses, por acaso, e desde então tenho lido todos os artigos, que são publicados assiduamente toda semana.&lt;/p&gt;

&lt;p&gt;Talvez vocês estejam se perguntando o que há de tão interessante em um blog de Object Pascal para um programador C#? Aí é que está: não se deixem enganar pelo título. Marcos escreve sobre conceitos e boas práticas da orientação a objetos, de uma forma que é aplicável para a maioria da linguagens que seguem esse paradigma.&lt;/p&gt;

&lt;p&gt;Quando há exemplos de código, esses são escritos em Object Pascal, mas são simples e claros o bastante para que você consiga seguir, independente de ter ou não experiência com essa linguagem.&lt;/p&gt;

&lt;p&gt;Além da qualidade dos artigos em si, é importante citar ótimo trabalho que Marcos tem feito em fomentar uma comunidade em torno do blog, com o uso de redes sociais, chat e lista de e-mail.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://objectpascalprogramming.com/&quot;&gt;Recomendadíssimo&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&quot;robson-castillo&quot;&gt;Robson Castillo&lt;/h2&gt;

&lt;p&gt;O &lt;a href=&quot;https://twitter.com/nosborcastilho&quot;&gt;Robson&lt;/a&gt; publica em seu &lt;a href=&quot;https://robsoncastilho.com.br/&quot;&gt;blog&lt;/a&gt; desde 2010, e aborda uma gama bem diversa de assuntos.&lt;/p&gt;

&lt;p&gt;Ele já escreveu sobre tecnologias específicas, como tutoriais de ASP.NET MVC, passando por assuntos mais “&lt;em&gt;high level&lt;/em&gt;” como arquitetura de software, Design Patterns e boas práticas de codificação, sem esquecer das metodologias ágeis e gerenciamento de carreira.&lt;/p&gt;

&lt;p&gt;Uma área muito bacana neste blog é a &lt;a href=&quot;https://robsoncastilho.com.br/livros-indicados/&quot;&gt;página de leituras recomendadas&lt;/a&gt;. Apesar da avalanche de informação disponível na Web, eu acredito que livros ainda têm um lugar importante no aprendizado de desenvolvedores, e vejo que Robson compartilha da minha visão.&lt;/p&gt;

&lt;p&gt;Embora existam alguns posts que são específicos a .Net e C#, a grande maioria não é. Então, independente de qual seja a linguagem que você usa, pode ir sem medo que você vai encontrar conteúdo de qualidade no blog do Robson.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://robsoncastilho.com.br/&quot;&gt;Não deixe de conferir&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&quot;elemar-jr&quot;&gt;Elemar Jr&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/elemarjr&quot;&gt;Elemar Jr&lt;/a&gt; é um nome bastante conhecido na comunidade .NET. Assim como Robson, ele &lt;a href=&quot;http://elemarjr.com/pt/home/&quot;&gt;publica em seu blog desde 2010&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Elemar é conhecido por ser incrivelmente prolífico, escrevendo sobre um número impressionante de tópicos. Existe um certo viés para C#, mas ele também aborda diversas outras linguagens, tecnologias e técnicas, como C++, F#, Haskell, HTML, Javascript, testes automatizados, arquitetura, e muito mais.&lt;/p&gt;

&lt;p&gt;Um aspecto interessante do blog do Elemar é que ele não para no conteúdo técnico, explorando também tópicos como filosofia, política, psicologia, economia, entre outros, o que eu acho valiosíssimo. Nós, desenvolvedores, às vezes só conversamos com outros desenvolvedores, sobre desenvolvimento, e isso não é saudável.&lt;/p&gt;

&lt;p&gt;Nos reconectar com o mundo ao nosso redor é necessário para uma vida equilibrada. E no lado profissional, nos envolver com as humanidades também melhora a nossa visão do negócio e de como o código que escrevemos é apenas um meio para gerar valor para nossos clientes e nossas empresas.&lt;/p&gt;

&lt;p&gt;Recentemente, Elemar &lt;a href=&quot;http://elemarjr.com/pt/2016/04/17/por-que-comecei-a-blogar-em-ingles/&quot;&gt;começou a blogar também em inglês&lt;/a&gt;, o que é uma iniciativa com a qual eu naturalmente &lt;a href=&quot;http://carlosschults.net&quot;&gt;concordo&lt;/a&gt; ;)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://elemarjr.com/pt/home/&quot;&gt;Boa leitura&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&quot;concluso&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Você deve estar se perguntando porque mantive o número de blogs recomendados baixo. Um dos motivos é que, com esses três blogs, você já tem leitura de sobra para muito tempo (isso se formos considerar apenas os artigos já publicados. É claro que os blogs estão na ativa, então mais posts continuarão vindo).&lt;/p&gt;

&lt;p&gt;O segundo - e mais importante - motivo é que sou &lt;em&gt;bastante exigente com o que leio&lt;/em&gt;. Não gosto de perder tempo com textos pessimamente escritos, com argumentos sem embasamento, ou com títulos sensacionalistas apenas para ganhar cliques.&lt;/p&gt;

&lt;p&gt;Evidentemente, nenhum dos três blogs acima tem essas características. Você ter a certeza que os blogs recomendados nesse post oferecem um conteúdo de alta qualidade, capaz de aumentar seu conhecimento e trazer benefícios para a sua carreira.&lt;/p&gt;

&lt;p&gt;E você, tem algum blog que gostaria de recomendar? Compartilhe com a gente nos comentários.&lt;/p&gt;

&lt;p&gt;Até a próxima!&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Feb 2017 00:00:00 -0200</pubDate>
        <link>http://carlosschults.net/pt/blogs-desenvolvimento-portugues/</link>
        <guid isPermaLink="true">http://carlosschults.net/pt/blogs-desenvolvimento-portugues/</guid>
        
        <category>recomendacoes</category>
        
        
      </item>
    
      <item>
        <title>Métodos privados são um &#39;Code Smell&#39;?</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1485700794/capa-min_no1cci.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Algumas pessoas acham que métodos privados devem ser evitados. Será que elas estão certas?
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Há uns dois meses, &lt;a href=&quot;https://twitter.com/mdbs99&quot;&gt;Marcos Douglas&lt;/a&gt; publicou um post &lt;a href=&quot;http://objectpascalprogramming.com/posts/menos-e-mais/&quot;&gt;sobre como o uso de regras e restrições pode melhorar seu código&lt;/a&gt;. Essa &lt;a href=&quot;https://medium.com/@cscalfani/why-programmers-need-limits-3d96e1a0a6db#.rptqu89ec&quot;&gt;premissa&lt;/a&gt; costuma aparecer &lt;a href=&quot;http://blog.ploeh.dk/2015/04/13/less-is-more-language-features/&quot;&gt;de novo&lt;/a&gt; e &lt;a href=&quot;https://robots.thoughtbot.com/sandi-metz-rules-for-developers&quot;&gt;de novo&lt;/a&gt; pela web, e eu concordo totalmente com ela.&lt;/p&gt;

&lt;p&gt;Marcos mostra várias orientações úteis, tais como o número ideal de argumentos em um método, o número ideal de métodos, em uma classe, e assim por diante. O artigo é muito bom, e eu recomendo a todos vocês que o &lt;a href=&quot;https://gist.github.com/carlosschults/5f4ba7cfb2453977c8d11424b2926686&quot;&gt;leiam &lt;/a&gt;, mas ele não é o foco do meu post hoje.&lt;/p&gt;

&lt;p&gt;Hoje, o que eu realmente quero falar é de um assunto que surgiu na área de comentários do artigo do Marcos: que diversas pessoas consideram métodos privados como um &lt;a href=&quot;http://www.pedromendes.com.br/2013/11/04/code-smells/&quot;&gt;&lt;em&gt;Code Smell&lt;/em&gt; (algo como “mau-cheiro de código”)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Como eu nunca tinha ouvido ou lido nada nesse sentido antes, fiquei bastante surpreso e decidi pesquisar mais.&lt;/p&gt;

&lt;h2 id=&quot;qual-seria-o-problema-de-mtodos-privados&quot;&gt;Qual seria o problema de métodos privados?&lt;/h2&gt;

&lt;p&gt;Para começar, vamos tentar entender por qual razão métodos privados seriam um problema.&lt;/p&gt;

&lt;p&gt;One common argument is that private methods violate the Single Responsibility Principle. The SRP states that each class should do only one thing. If you’re tempted to create private methods, the argument follows, that’s a sign that your class is doing too much.&lt;/p&gt;

&lt;p&gt;Um argumento comum é que métodos privados violam o &lt;em&gt;Princípio da Responsabilidade Única&lt;/em&gt; (ou SRP, do inglês &lt;em&gt;Single Responsibility Principle&lt;/em&gt;).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Private helper methods indicate classes are doing too many things. Moving private helper methods to different classes, including creating new classes if necessary, splits the original responsibilities across multiple classes leading to simpler, better designs.&lt;/p&gt;

  &lt;p&gt;Kent R Spillner, em &lt;a href=&quot;http://kent.spillner.org/blog/work/2009/11/12/private-methods-stink.html&quot;&gt;Private Methods are a Code Smell&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Em tradução livre:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Métodos auxiliares privados indicam que as classes estão fazendo coisas demais. Mover métodos auxiliares privados para classes diferentes, incluindo criar novas classes se necessário, divide as responsabilidades originais em múltiplas classes, levando à projetos mais simples e melhores.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Aqui temos uma opinião bem parecida:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Private methods are not inherently bad, but they are a sign that you might be missing out on an opportunity to make a useful abstraction. If you have a private method that calls another private method, then there is almost certainly an area of responsibility that remains unidentified.&lt;/p&gt;

  &lt;p&gt;John McDowall, em &lt;a href=&quot;http://blog.stormid.com/2015/03/method-access-modifiers-as-code-smells/&quot;&gt;Break. It. Up! – Private Method Access Modifiers as Code Smells&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Em tradução livre:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Métodos privados não são inerentemente ruins, mas eles são um sinal de que você talvez esteja perdendo uma oportunidade de criar uma abstração útil. Se você tem um método privado que chama outro método privado, então é quase certeza que há uma outra área de responsabilidade que permanece não identificada.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Outro argumento é que métodos privados dificultam o uso de testes unitários:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Make it public!&lt;/p&gt;

  &lt;p&gt;[…]This is probably the simplest way to overcome the problem of untestability.[…] There’s a reason for that:  testability is a perfectly good reason to make something public.  And you should test most of your code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jason M Baker, em &lt;a href=&quot;https://jasonmbaker.wordpress.com/2009/01/08/enemies-of-test-driven-development-part-i-encapsulation/&quot;&gt;Enemies of Test Driven Development part I: encapsulation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Em tradução livre:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Torne [o método privado] público!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;[…]Essa é provavelmente a maneira mais simples de resolver o problema da não-testabilidade[…] Existe uma razão para isso: testabilidade é uma razão perfeitamente boa para tornar algo público. E você deveria testar a maior parte do seu código.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finalmente, pessoas também argumentam que métodos privados desempenham um papel importante no problema de “bagunçar” o estado interno dos objetos, o que pode lhe causar grandes problemas.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Functional programming teaches that state (in the form of member variables) is evil, because it makes your code more complex and harder to test.&lt;/p&gt;

  &lt;p&gt;Ryan Ginstrom, em &lt;a href=&quot;http://ginstrom.com/scribbles/2007/11/12/three-reasons-to-avoid-private-class-members/&quot;&gt;Three reasons to avoid private class members&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Em tradução livre:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Programação funcional ensina que estado (na forma de variáveis de instância) é maligno, porque ele torna seu código mais complexo e mais difícil de ser testado.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eu acabei de mostrar alguns dos argumentos comuns contra a criação de métodos privados, então agora é hora de mostrar a opinião nesse assunto.&lt;/p&gt;

&lt;h2 id=&quot;mtodos-privados-no-so-necessariamente-violaes-do-srp&quot;&gt;Métodos privados &lt;em&gt;não&lt;/em&gt; são necessariamente violações do SRP&lt;/h2&gt;

&lt;p&gt;O primeiro argumento apresentando afirma que métodos privados violam o Princípio da Responsabilidade Única.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Private helper methods indicate classes are doing too many things.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eu não penso que esse seja o caso. Pelo menos, não sempre. Isso depende do que exatamente o método privado faz.&lt;/p&gt;

&lt;p&gt;Você provavelmente não deveria adicionar um método chamado &lt;code class=&quot;highlighter-rouge&quot;&gt;ValidarEnderecoDeEmail&lt;/code&gt; à sua classe &lt;code class=&quot;highlighter-rouge&quot;&gt;Cliente&lt;/code&gt;, sendo o método privado ou não. Afinal de contas, um cliente não é a única entidade que pode ter um endereço de e-mail. Ao invés disso, crie uma classe &lt;code class=&quot;highlighter-rouge&quot;&gt;Email&lt;/code&gt; e coloque todas as validações pertinentes nela.&lt;/p&gt;

&lt;p&gt;Por outro lado, digamos que você esteja criando um método &lt;code class=&quot;highlighter-rouge&quot;&gt;Ordenar&lt;/code&gt; em uma estrutura de dados customizada. Nesse caso, faria todo o sentido manter o método &lt;code class=&quot;highlighter-rouge&quot;&gt;Ordenar&lt;/code&gt; público, e ter alguns métodos privados auxiliares, como &lt;code class=&quot;highlighter-rouge&quot;&gt;CompararItens&lt;/code&gt; e &lt;code class=&quot;highlighter-rouge&quot;&gt;Trocar&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Moving private helper methods to different classes, including creating new classes if necessary, splits the original responsibilities across multiple classes leading to simpler, better designs.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Meu principal problema com esse argumento não é que classes pequenas são geralmente melhores que as grandes, o que eu concordo.&lt;/p&gt;

&lt;p&gt;Meu problema é que eu não concordo que criar novas classes e métodos públicos &lt;strong&gt;apenas para evitar métodos privados&lt;/strong&gt; vai &lt;strong&gt;automaticamente&lt;/strong&gt; gerar “designs mais simples e melhores”. É claro que &lt;em&gt;pode&lt;/em&gt; gerar; mas pode gerar projetos priores também. Cada situação é única.&lt;/p&gt;

&lt;h2 id=&quot;eu-no-compro-testabilidade-como-um-fim-em-si-mesmo&quot;&gt;Eu não compro testabilidade como um fim em si mesmo&lt;/h2&gt;

&lt;p&gt;Eu gosto muito de testes unitários (e testes automatizados de uma maneira geral). Eu ajudei evangelizar testes unitários no meu trabalho, e atualmente eu supervisiono o time que está adicionando testes unitários e de integração em nosso &lt;em&gt;codebase&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;E uma das primeiras perguntas que as pessoas fazem quando estão aprendendo sobre testes unitários é: &lt;em&gt;Como eu faço para testar métodos privados?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;unicorn_dies.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Minha resposta geralmente é: &lt;strong&gt;você não deveria precisar&lt;/strong&gt;. Na minha opinião, não é muito produtivo colocar um esforço excessivo em testar métodos privados: como eles são chamados pelos públicos, eles vão ser exercitados pela sua suíte de testes de qualquer forma.&lt;/p&gt;

&lt;p&gt;O objetivo de um teste unitário deveria ser testar e documentar uma “unidade” (uma classe) por meio de usar sua API pública. O que nos leva ao próximo ponto.&lt;/p&gt;

&lt;h1 id=&quot;sua-api-pblica-deve-ser-estvel-ou-encapsulamento-importa&quot;&gt;Sua API pública deve ser estável (ou “Encapsulamento importa”)&lt;/h1&gt;

&lt;p&gt;API significa &lt;em&gt;Application Programming Interface&lt;/em&gt;, ou Interface de Programação de Aplicações, em tradução livre. 
Esse termo pode significar várias coisas, mas no nosso contexto aqui, pense no conjunto das classes e métodos públicos que você expõe aos consumidores.&lt;/p&gt;

&lt;p&gt;A API age como um tipo de contrato entre você e os consumidores do seu código. É um acordo. Se você alterar o acordo, a outra parte não vai ficar muito feliz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;deal.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sua API pública deveria ter o máximo de estabilidade possível. Isso é particularmente importante quando você está criando um &lt;em&gt;web service&lt;/em&gt;, uma biblioteca, ou qualquer tipo de ferramenta na qual terceiros dependem.&lt;/p&gt;

&lt;p&gt;A propósito, esses “terceiros” não necessariamente precisar estar distante geograficamente de você. É bem comum em empresas, médias para cima, que vários times dependam de código disponibilizado por outros. O que aconteceria se cada equipe fizesse alterações drásticas em suas APIs constantemente? Caos.&lt;/p&gt;

&lt;p&gt;A partir do momento que você expõe um método publicamente, você tem a responsabilidade de mantê-lo funcionando e honrando seu contrato; do contrário, você corre o risco de causar quebra de retrocompatibilidade nos seus clientes!&lt;/p&gt;

&lt;p&gt;Um bom uso de métodos privados pode ajudar a manter um encapsulamento correto no seu design.&lt;/p&gt;

&lt;p&gt;Aqui temos mais uma citação de Kent R Spillner:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sometimes, private methods are created just to give pieces of functionality more descriptive names. Although descriptive names are desirable, creating private methods to provide descriptive names for things is still a smell. Moving these methods to collaborators and making them public creates opportunities for future reuse without reducing the clarity of the original code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Em tradução livre:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Às vezes, métodos privados são criados apenas para dar nomes mais descritivos a pequenos trechos de funcionalidade. Embora nomes descritivos são desejáveis, criar métodos privados para dar nomes descritivos a coisas ainda é um &lt;em&gt;smell&lt;/em&gt;. Mover esses métodos para colaboradores e torná-los públicos cria oportunidades para reuso futuro sem reduzir a claridade do código original.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Esse é um dos pontos com os quais eu discordo mais veementemente. Eu frequentemente crio métodos privados pela exata razão que Kent critica aqui, ou seja, dar nomes descritivos a certos trechos de código, um hábito eu adquiri após ler o livro &lt;em&gt;Código Limpo&lt;/em&gt;, de Robert C. Martin.&lt;/p&gt;

&lt;p&gt;Kent defende que o jeito correto de lidar com isso seria mover esses métodos para novas classes e torná-los públicos.&lt;/p&gt;

&lt;p&gt;Mas se eu fizer isso, eu adiciono um novo método à API público da minha aplicação! Agora eu tenho um método a mais para documentar, testar e manter, mesmo que jamais tenha intencionado que esse método fizesse parte da API.&lt;/p&gt;

&lt;p&gt;Aqui temos uma definição para modificadores de acesso que na minha opinião acerta em cheio:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;public - this method is part of the published API and will not change within major versions of the class&lt;/p&gt;

  &lt;p&gt;[…]&lt;/p&gt;

  &lt;p&gt;private - this method was refactored out of a well tested public or protected method for reasons of clarity or internal re-use. This method may absolutely change, even in patch releases, and should not be relied upon to even exist.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Em tradução livre:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;público - este método é parte da API publicada e não vai mudar dentro de versões principais da classe.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;[…]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;privado - este método foi criado na refatoração de um método público ou protegido bem testado, por razões de claridade ou reuso interno. Este método com certeza pode ser alterado, mesmo em releases de correção, e ninguém deveria depender da existência dele.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eu concordo com essa definição. Portanto, em minha visão.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Métodos privados não são necessariamente uma coisa ruim a ser evitada a todo custo.&lt;/li&gt;
  &lt;li&gt;A prática de tornar métodos privados em públicos não leva automaticamente a um design melhor; ela pode também gerar uma API desnecessariamente inflada, encapsulamento enfraquecido, e maior trabalho para manutenção.&lt;/li&gt;
  &lt;li&gt;Testabilidade é um objetivo nobre, mas precisa ser buscado de maneira pragmática. Métodos públicos bem testados e bem documentados deveriam ser suficientes, na maioria dos casos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mtodos-privados-podem-ser-bons-ou-ruins-aprenda-a-separ-o-joio-do-trigo&quot;&gt;Métodos privados podem ser bons ou ruins; aprenda a separ o joio do trigo&lt;/h2&gt;

&lt;p&gt;Tudo isso dito, eu também acho que existem casos nos quais métodos privados são usados de uma maneira errada. Toda ferramenta pode ser abusada. Existem alguns sinais para os quais você precisa ficar alerta:&lt;/p&gt;

&lt;p&gt;Se um método privado está em um &lt;strong&gt;nível de abstração diferente&lt;/strong&gt; que os públicos em uma classe, é um sinal de que ele pertence em outra classe. Leitura e escrita em arquivo está um nível de abstração bem mais baixo que o cálculo do pagamento mensal de um empregado, por exemplo.&lt;/p&gt;

&lt;p&gt;Quando um método privado é tão complexo que você realmente queria poder testá-lo…é sinal de que ele provavelmente deveria ser público. (Antes que você corra para os comentários para apontar minha aparente contradição, eu não estou dizendo que &lt;strong&gt;todos&lt;/strong&gt; os métodos privados deveriam virar públicos para serem testáveis…apenas aqueles que ultrapassam um determinado limiar de complexidade).&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;pt&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/pablogl&quot;&gt;@pablogl&lt;/a&gt; i only test public methods. if a private method is complex enough to need testing, it generally needs its own object.&lt;/p&gt;&amp;mdash; Kent Beck (@KentBeck) &lt;a href=&quot;https://twitter.com/KentBeck/status/3579860805&quot;&gt;27 de agosto de 2009&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;E quando um método privado contém código duplicado, do tipo, copiado e colado de outra classe? Livre-se da duplicação na hora!&lt;/p&gt;

&lt;p&gt;Então, esse é o ponto: duas das três dicas que acabo de mostrar são meio subjetivas. Em algum ponto, você tem que fazer algumas escolhas. Quão complexo é complexo o suficiente para um método privado precisar de testes unitários? Como distinguir níveis de abstrações diferentes?&lt;/p&gt;

&lt;p&gt;A melhor dica que eu posso oferecer é: &lt;strong&gt;Duas cabeças pensam melhor que uma&lt;/strong&gt;. Sempre faça com que outra pessoa olhe e examine seu código antes de ser commitado. Programação em par e/ou revisão de código são ótimas técnicas, não apenas para melhorar o projeto e encontrar bugs, mas principalmente para espalhar conhecimento por uma equipe. Não só conhecimento técnico, mas conhecimento do domínio também, e isso pode fazer toda a diferença na hora de tomar as decisões difíceis.&lt;/p&gt;

&lt;h2 id=&quot;concluso&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Embora métodos privados podem ser usados em maneiras ruins, eu penso que seria prematuro automaticamente rotulá-los como uma coisa ruim a ser evitada.&lt;/p&gt;

&lt;p&gt;Me parece que algumas das pessoas que afirmam estar argumentando contra métodos privados &lt;strong&gt;estão na verdade argumento contra problemas que são ortogonais a métodos privados&lt;/strong&gt;; você pode violar a SRP com ou sem métodos privados; você pode causar problemas com estado interno mutável com ou sem métodos privados, e assim por diante.&lt;/p&gt;

&lt;p&gt;Desenvolver software é uma arte, cheia de &lt;em&gt;trade-offs&lt;/em&gt; e incerteza. E ainda que “regras de ouro” possam ser úteis, elas não devem ser seguidas cegamente.&lt;/p&gt;

&lt;p&gt;Este post ficou muito mais longo do que eu planejei. Agradeço caso tenha chegado até aqui. Até a próxima!&lt;/p&gt;

&lt;h2 id=&quot;veja-tambm&quot;&gt;Veja também&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2620699/why-private-methods-in-the-object-oriented&quot;&gt;http://stackoverflow.com/questions/2620699/why-private-methods-in-the-object-oriented&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kent.spillner.org/blog/work/2009/11/12/private-methods-stink.html&quot;&gt;http://kent.spillner.org/blog/work/2009/11/12/private-methods-stink.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.stormid.com/2015/03/method-access-modifiers-as-code-smells/&quot;&gt;http://blog.stormid.com/2015/03/method-access-modifiers-as-code-smells/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jasonmbaker.wordpress.com/2009/01/08/enemies-of-test-driven-development-part-i-encapsulation/&quot;&gt;https://jasonmbaker.wordpress.com/2009/01/08/enemies-of-test-driven-development-part-i-encapsulation/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/i-m-h-o/private-methods-smelly-ish-435e93ff8c39#.cl06rkgct&quot;&gt;https://medium.com/i-m-h-o/private-methods-smelly-ish-435e93ff8c39#.cl06rkgct&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ginstrom.com/scribbles/2007/11/12/three-reasons-to-avoid-private-class-members/&quot;&gt;http://ginstrom.com/scribbles/2007/11/12/three-reasons-to-avoid-private-class-members/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://rc3.org/2010/01/26/the-argument-against-private-methods/&quot;&gt;http://rc3.org/2010/01/26/the-argument-against-private-methods/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://naildrivin5.com/blog/2010/05/26/is-private-a-code-smell.html&quot;&gt;http://naildrivin5.com/blog/2010/05/26/is-private-a-code-smell.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 29 Jan 2017 00:00:00 -0200</pubDate>
        <link>http://carlosschults.net/pt/metodos-privados-code-smell/</link>
        <guid isPermaLink="true">http://carlosschults.net/pt/metodos-privados-code-smell/</guid>
        
        <category>code smell</category>
        
        <category>boas práticas</category>
        
        <category>orientacao-a-objetos</category>
        
        
      </item>
    
      <item>
        <title>Resenha de Livro: Soft Skills</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1469301144/soft-skills-1038-437-min_u6ucwf.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Que tal um livro de desenvolvimento de software que não é sobre software?
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Vários meses se passaram desde que eu &lt;a href=&quot;http://carlosschults.net/pt/resenha-livro-programador-pragmatico/&quot;&gt;publiquei minha resenha do livro “O Programador Pragmático”, de Andy Hunt e Dave Thomas&lt;/a&gt;. Ou seja, já está mais do que na hora de outro review.&lt;/p&gt;

&lt;p&gt;O livro de hoje é &lt;em&gt;Soft Skills: The software developer’s life manual&lt;/em&gt;, por John Sonmez. Até onde eu sei, não foi traduzido ainda para o português. Se eu estiver errado, me corrijam aí nos comentários.&lt;/p&gt;

&lt;p&gt;John Sonmez é um desenvolvedor de software mais conhecido por seu blog &lt;em&gt;Simple Programmer&lt;/em&gt; e seu canal no youtube. Nessas plataformas, ele cria e publica conteúdo em uma variedade de tópicos, como finanças, negociação, técnicas de aprendizado, exercícios físicos, empreendedorismo, e por aí vai.&lt;/p&gt;

&lt;p&gt;Pense algo do tipo “auto-ajuda para desenvolvedores de software”, mas sem a conotação negativa que auto-ajuda geralmente tem.&lt;/p&gt;

&lt;h2 id=&quot;certo-mas-e-o-livro&quot;&gt;Certo, mas e o livro?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Soft Skills: The software developer’s life manual&lt;/em&gt; foi publicado no final de 2014, e contém prefácios de &lt;a href=&quot;http://www.hanselman.com/&quot;&gt;Scott Hanselman&lt;/a&gt; e &lt;a href=&quot;https://twitter.com/unclebobmartin&quot;&gt;Robert C. Martin&lt;/a&gt;, o famoso “Uncle Bob”.&lt;/p&gt;

&lt;p&gt;As its name suggests, this book doesn’t cover any tech-related topics, at least not in a direct way. It is divided into seven sections: Career, Marketing Yourself, Learning, Productivity, Financial, Fitness, Spirit. Each section is meant to cover a specific area of a software developer’s life, and is divided into several short chapters.&lt;/p&gt;

&lt;p&gt;Como o nome sugere, o livro não cobre assuntos técnicos, pelo menos não diretamente. Ele é dividido em sete seções: Carreira, Marketing Pessoal, Aprendizado, Produtividade, Finanças, Fitness, Espírito. Cada seção por sua vez é divida em vários capítulos curtos.&lt;/p&gt;

&lt;p&gt;O livro em si é até grande - a edição que eu possuo tem 470 páginas. Levei um bom tempo pra terminar, embora eu admito que li o livro em um ritmo mais lento do que de costume.&lt;/p&gt;

&lt;h2 id=&quot;the-good&quot;&gt;The Good&lt;/h2&gt;

&lt;p&gt;O livro é escrito em um estilo bem fácil de entender e seguir. Mesmo lendo no original em inglês, não tive nenhuma dificuldade em acompanhar.&lt;/p&gt;

&lt;p&gt;Os capítulos são curtos, o que para mim é uma boa coisa. Geralmente eu não disponho de um intervalo grande de tempo para ler. O que eu consigo são vários intervalos pequenos ao longo do dia. Então é ótimo quando os capítulos são curtos o bastante para caber nesses intervalos. Eu não tenho muita certeza do porquê, mas acho estranho deixar um capítulo sem terminar, então eu fico um pouco incomodado se começo a ler um capítulo sabendo que provavelmente não conseguirei terminá-lo na mesma sessão.&lt;/p&gt;

&lt;p&gt;Cada capítulo de &lt;em&gt;Soft Skills&lt;/em&gt; termina com uma “chamada à ação”. John lhe convida a fazer um pequeno exercício para ajudá-lo a tirar o maior proveito do conteúdo, e descobrir a melhor forma de aplicá-lo em sua vida. Não se assuste com a palavra “exercício”. Os desafios propostos são todos muito fáceis de seguir e geralmente envolvem um pouco de reflexão e depois alguma escrita. Eu geralmente sou o tipo de pessoa que iria chamar isso de “bobagem de autoajuda”. Mas o que eu descobrir ao ler este livro é que isso pode ser realmente eficaz.&lt;/p&gt;

&lt;p&gt;A questão é: você pode pensar que sabe o que quer fazer com a sua carreira e com a sua vida. Mas quando você se força a parar por alguns minutos e realmente pensar sobre isso e escrever em um pedaço de papel…você pode se surpreender com o quão pouco você realmente sabe sobre suas metas, suas forças, suas fraquezas, e o que você pretende realizar na vida.&lt;/p&gt;

&lt;p&gt;Isso é particularmente verdadeiro no começo da sua carreira. Nossa área é gigantesca. Quando você é recém-graduado, jovem e sem experiência, só a quantidade de opções disponíveis já é suficiente para lhe deixar sobrecarregado. É melhor arrumar emprego em uma start-up ou uma empresa grande? Talvez ser freelancer? Ruby on Rails ou Node.ks? Tantas dúvidas!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Soft Skills&lt;/em&gt; oferece alguma ajuda aqui. A primeira seção do livro sobre, entre outras coisas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;opções de emprego (freelancer x empregado x empreendedor);&lt;/li&gt;
  &lt;li&gt;tipos de especialidades para desenvolvedores;&lt;/li&gt;
  &lt;li&gt;tipos de empresas para se trabalhar;&lt;/li&gt;
  &lt;li&gt;conselhos para trabalhar remotamente.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Seção 4 (Produtividade) é talvez a minha favorita. A verdade é essa: se me deixar por conta própria, eu não sou lá tão produtivo. Shame on me!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dz5ppacuo/image/upload/v1470788220/shame_mivvrv.gif&quot; alt=&quot;Entendedores entenderão.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Eu venho brigando com a procrastinação desde a faculdade. Já tentei vários aplicativos de lista de tarefas e técnicas de produtividade. Eu leio &lt;a href=&quot;https://www.amazon.com/Getting-Things-Done-Stress-Free-Productivity-ebook/dp/B000WH7PKY#navbar&quot;&gt;Getting Things Done&lt;/a&gt; todo ano. Eu leio &lt;a href=&quot;http://lifehacker.com/&quot;&gt;Lifehacker&lt;/a&gt; quase que diariamente. Eu inclusive ouço um &lt;a href=&quot;https://www.relay.fm/cortex&quot;&gt;podcast cujo principal tema é trabalho e produtividade&lt;/a&gt;. E mesmo assim, eu não sou tão produtivo como eu gostaria de ser, apesar de que tenho feito algum progresso.&lt;/p&gt;

&lt;p&gt;Aqueles dentre vocês que compartilham dessa característica vão provavelmente encontrar algum valor em &lt;em&gt;Soft Skills&lt;/em&gt;. John cobre bastante coisa aqui, incluindo a formação de hábitos, a importância de se ter uma rotina, e quais são os maiores desperdícios de tempo que você deveria tentar eliminar da sua vida. Ele também fala sobre a 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pomodoro_Technique&quot;&gt;Técnica Pomodor&lt;/a&gt; e demonstra seu sistema de produtividade pessoal. Ele fala até sobre &lt;em&gt;burnout&lt;/em&gt;, o que pode ser um grande problema na nossa área e você definitivamente deve estar preparado(a) para lidar com isso durante sua carreira.&lt;/p&gt;

&lt;p&gt;Uma crítica comum que o livro recebe - e algumas pessoas estendem essa crítica ao restante do trabalho de John - é que ele é muito voltado para o marketing. É uma afirmação até justa, eu diria. Mas eu não penso que isso é necessariamente uma coisa ruim.&lt;/p&gt;

&lt;p&gt;Alguns anos atrás, na faculdade, eu assisti uma palestra na qual o palestrante disse algo do tipo: “não adianta nada você ser o melhor programador do mundo se ninguém sabe disso”.&lt;/p&gt;

&lt;p&gt;Para muitos desenvolvedores, a palavra marketing tem uma conotação muito negativa. Também pudera, todos estamos cansados de ver táticas de marketing manipulativas e sem escrúpulo.
O que precisa ser entendido aqui é que marketing é algo que nós todos fazemos, o tempo todo, mesmo que você não chame por esse nome. O que é uma entrevista de emprego, senão uma venda?&lt;/p&gt;

&lt;p&gt;Já que marketing é algo que todos fazemos, vale a pena fazê-lo correta e deliberadamente. Aqui é o ponto forte do livro, na minha opinião. Ele oferece conselhos sobe como tratar sua carreira como um negócio e seu nome como uma marca. Ele também explica o que uma marca é, qual seu propósito, seus componentes, e como você pode &lt;strong&gt;criar e estabelecer sua marca pessoal gerando valor para outras pessoas&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As seções 3 e 6 (&lt;em&gt;Aprendizado&lt;/em&gt; e &lt;em&gt;Fitness&lt;/em&gt;, respectivamente) também merecem menção honrosa, mas não as cobrirei em detalhe para não ficar muito extenso. Vai ler o livro! :D&lt;/p&gt;

&lt;h2 id=&quot;the-bad&quot;&gt;The Bad&lt;/h2&gt;

&lt;p&gt;Agora, vamos ver o que não é tão bom assim.&lt;/p&gt;

&lt;p&gt;Alguns dos capítulos são muito, muito curtos. Sim, eu sei que poucos parágrafos atrás eu estava elogiando a brevidade dos capítulos. Por que estou falando o contrário agora?&lt;/p&gt;

&lt;p&gt;Eu não me importo com um capítulo curto caso ele me dê algum valor. Na verdade, como eu disse antes, eu prefiro muito mais um capítulo curto a um maior, desde que ambos forneçam igual valor.&lt;/p&gt;

&lt;p&gt;Mas alguns capítulos fornecem pouquíssimo valor. Eles poderiam tranquilamente ser um parágrafo em outra seção.&lt;/p&gt;

&lt;p&gt;Por exemplo. Capítulo 18, “Não seja religioso sobre tecnologia”, tem três páginas, nas quais John nos diz para que não nos apegarmos exageradamente a linguagens de programação, frameworks, sistemas operacionais e etc. Ótimo conselho, concordo totalmente. Quantas horas já foram desperdiçadas na internet, em debates idiotas como “tabs x espaços”? Provavelmente bem mais do que gostaríamos de saber. Mas essa mensagem seria facilmente resumida em um parágrafo em outro capítulo.&lt;/p&gt;

&lt;p&gt;O livro também sofre do problema oposto. Alguns assuntos provavelmente se beneficiariam de um pouco mais de profundidade. No capítulo 25, “Escrevendo livros e artigos para atrair seguidores”, John diz que para conseguir publicar um livro por meios tradicionais, você deveria escrever uma proposta, para tentar vender o livro para a editora. Mas ele para por aí, &lt;strong&gt;sem mostrar um exemplo de como tal proposta seria&lt;/strong&gt;, o que seria extremamente valioso para os potenciais autores em sua audiência.&lt;/p&gt;

&lt;p&gt;Algumas das dicas do livro são…esquisitas. Eu particularmente não gostei do conselho de John para contratar um escritor de currículo profissional. Na nossa área, hoje em dia, currículos são pouca coisa mais que mera formalidade. Contanto que seu currículo não seja horrível (ie.e contém erros de grafia e gramática, está estruturado de uma maneira estranha, não contém informações essenciais, etc) provavelmente vai ficar tudo bem. Existem fatores muito mais importantes que seu potencial empregador vai levar em consideração.&lt;/p&gt;

&lt;h2 id=&quot;the-ugly&quot;&gt;The Ugly&lt;/h2&gt;

&lt;p&gt;A maioria dos livros de software tem a capa feia ou estranha, e &lt;strong&gt;&lt;em&gt;Soft Skills&lt;/em&gt;&lt;/strong&gt; não é exceção. Mas quem liga? Eu só queria &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Good,_the_Bad_and_the_Ugly&quot;&gt;fazer essa referência mesmo :P&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;concluso&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Soft Skills: The software developer’s life manual&lt;/em&gt; foi uma leitura divertida. John oferece algumas ótimas dicas, especialmente no que diz respeito a aprendizado, carreira e produtividade.&lt;/p&gt;

&lt;p&gt;Existem alguns contras, claro, como eu já disso. Algumas das dicas simplesmente não fazem sentido pra mim. Eu entendo que elas provavelmente funcionaram para o autor, entretanto.&lt;/p&gt;

&lt;p&gt;Minha abordagem com esse tipo de livro é: guarde o que for valioso, ignore o resto. E eu posso tranquilamente dizer que encontrei uma boa quantidade de conteúdo valioso em &lt;em&gt;Soft Skills&lt;/em&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Aug 2016 00:00:00 -0300</pubDate>
        <link>http://carlosschults.net/pt/resenha-livro-soft-skills/</link>
        <guid isPermaLink="true">http://carlosschults.net/pt/resenha-livro-soft-skills/</guid>
        
        <category>livros</category>
        
        
      </item>
    
  </channel>
</rss>
